# src/modules/impl/inviter/progress_manager.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
–í—ã–Ω–µ—Å–µ–Ω –∏–∑ admin_inviter.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
"""
import traceback
import threading
import queue
import json
from typing import Dict
from datetime import datetime
from loguru import logger
from pathlib import Path
from src.entities.moduls.inviter import *


class ProgressManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, parent_process):
        self.parent = parent_process
        self.file_write_lock = threading.Lock()

    def save_users_progress_to_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª (thread-safe) –ë–ï–ó –ë–≠–ö–ê–ü–û–í
        """
        try:
            with self.file_write_lock:  # Thread-safe –∑–∞–ø–∏—Å—å
                logger.debug(f"üíæ [{self.parent.profile_name}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª...")

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                all_lines = []

                # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for username, user in self.parent.processed_users.items():
                    line = self._format_user_for_file(user)
                    if line:
                        all_lines.append(line)

                # 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                remaining_users = []
                try:
                    while not self.parent.user_queue.empty():
                        user = self.parent.user_queue.get_nowait()
                        remaining_users.append(user)
                        # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        all_lines.append(f"@{user.username}")
                except queue.Empty:
                    pass

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                for user in remaining_users:
                    self.parent.user_queue.put(user)

                # 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä—è–º–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ë–ï–ó –ë–≠–ö–ê–ü–ê
                content = '\n'.join(all_lines)
                self.parent.users_file_path.write_text(content, encoding='utf-8', errors='replace')

                logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {len(self.parent.processed_users)}")
                logger.info(f"   üìä –û—Å—Ç–∞–≤—à–∏—Ö—Å—è: {len(remaining_users)}")

        except Exception as e:
            logger.error(f"‚ùå [{self.parent.profile_name}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            logger.error(f"‚ùå [{self.parent.profile_name}] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")

    def _format_user_for_file(self, user: InviteUser) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        """
        try:
            username = user.username
            if not username.startswith('@'):
                username = f"@{username}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if user.status == UserStatus.INVITED:
                status_text = "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω"
            elif user.status == UserStatus.PRIVACY:
                status_text = "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
            elif user.status == UserStatus.ALREADY_IN:
                status_text = "üë• –£–∂–µ –≤ —á–∞—Ç–µ"
            elif user.status == UserStatus.SPAM_BLOCK:
                status_text = "üö´ –°–ø–∞–º–±–ª–æ–∫"
            elif user.status == UserStatus.NOT_FOUND:
                status_text = "‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω"
            elif user.status == UserStatus.ERROR:
                status_text = f"‚ùå –û—à–∏–±–∫–∞: {user.error_message or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}"
            else:
                # –î–ª—è —á–∏—Å—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ username
                return username

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.error_message and user.error_message != status_text:
                status_text += f" - {user.error_message}"

            return f"{username}: {status_text}"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
            return f"@{user.username}: ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

    def load_user_statuses(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            profile_folder = Path(self.parent.profile_data['folder_path'])
            status_file = profile_folder / "user_statuses.json"

            if status_file.exists():
                with open(status_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for username, user_data in data.get('users', {}).items():
                    user = InviteUser(username=username)

                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ enum —Å—Ç–∞—Ç—É—Å–∞
                    status_value = user_data.get('status', 'NEW')
                    if isinstance(status_value, str):
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ enum –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
                        for status_enum in UserStatus:
                            if status_enum.value == status_value:
                                user.status = status_enum
                                break
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NEW
                            user.status = UserStatus.NEW
                    else:
                        user.status = UserStatus.NEW

                    user.last_attempt = datetime.fromisoformat(user_data['last_attempt']) if user_data.get(
                        'last_attempt') else None
                    user.error_message = user_data.get('error_message')
                    self.parent.processed_users[username] = user

                logger.success(
                    f"[{self.parent.profile_name}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.parent.processed_users)}")
            else:
                logger.info(
                    f"[{self.parent.profile_name}] –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")

        except Exception as e:
            logger.error(f"[{self.parent.profile_name}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    def save_user_statuses(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            profile_folder = Path(self.parent.profile_data['folder_path'])
            status_file = profile_folder / "user_statuses.json"

            data = {
                'users': {},
                'last_updated': datetime.now().isoformat()
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for username, user in self.parent.processed_users.items():
                data['users'][username] = {
                    'status': user.status.value if hasattr(user.status, 'value') else str(user.status),
                    'last_attempt': user.last_attempt.isoformat() if user.last_attempt else None,
                    'error_message': user.error_message
                }

            with open(status_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            logger.success(
                f"[{self.parent.profile_name}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.parent.processed_users)}")

        except Exception as e:
            logger.error(f"[{self.parent.profile_name}] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")