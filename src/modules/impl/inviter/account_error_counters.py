# src/modules/impl/inviter/account_error_counters.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –æ—à–∏–±–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–í—ã–Ω–µ—Å–µ–Ω –∏–∑ admin_inviter.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
"""
from dataclasses import dataclass
from typing import Dict
from loguru import logger
from src.entities.moduls.inviter import *
from datetime import datetime


class AccountErrorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, parent_process):
        self.parent = parent_process
        self.error_counters: Dict[str, AccountErrorCounters] = {}

    def get_counters(self, account_name: str) -> AccountErrorCounters:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_name not in self.error_counters:
            self.error_counters[account_name] = AccountErrorCounters()
        return self.error_counters[account_name]

    def check_error_limits(self, account_name: str, error_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (spam_block, writeoff, block_invite, success)

        Returns:
            True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å, False –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
        """
        counters = self.get_counters(account_name)
        config = self.parent.config
        profile_name = self.parent.profile_name

        if error_type == "spam_block":
            counters.consecutive_spam_blocks += 1
            counters.reset_writeoffs()
            counters.reset_block_invites()

            if counters.consecutive_spam_blocks >= config.acc_spam_limit:
                logger.error(
                    f"[{profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–ø–∞–º-–±–ª–æ–∫–æ–≤: {counters.consecutive_spam_blocks}/{config.acc_spam_limit}")
                return True

        elif error_type == "writeoff":
            counters.consecutive_writeoffs += 1
            counters.reset_spam_blocks()
            counters.reset_block_invites()

            if counters.consecutive_writeoffs >= config.acc_writeoff_limit:
                logger.error(
                    f"[{profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω–∏–π: {counters.consecutive_writeoffs}/{config.acc_writeoff_limit}")
                return True

        elif error_type == "block_invite":
            counters.consecutive_block_invites += 1
            counters.reset_spam_blocks()
            counters.reset_writeoffs()

            if counters.consecutive_block_invites >= config.acc_block_invite_limit:
                logger.error(
                    f"[{profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –±–ª–æ–∫–æ–≤ –∏–Ω–≤–∞–π—Ç–æ–≤: {counters.consecutive_block_invites}/{config.acc_block_invite_limit}")
                return True

        elif error_type == "success":
            # –ü—Ä–∏ —É—Å–ø–µ—Ö–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
            counters.reset_all()

        return False

    def mark_account_as_processed(self, account_name: str, reason: str):
        """–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–µ—Ä—Ç–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ú–ï–†–¢–í–´–ï –∞–∫–∫–∞—É–Ω—Ç—ã - –±–æ–ª—å—à–µ –ù–ò–ö–û–ì–î–ê –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            permanently_dead_reasons = {
                'dead', 'frozen', 'missing_files', 'unauthorized'
            }

            # –ó–ê–ö–û–ù–ß–ò–í–®–ò–ï —Ä–∞–±–æ—Ç—É
            finished_work_reasons = {
                '–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—Ö–æ–≤', '–ª–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω–∏–π', '–ª–∏–º–∏—Ç —Å–ø–∞–º-–±–ª–æ–∫–æ–≤',
                '–ª–∏–º–∏—Ç –±–ª–æ–∫–æ–≤ –∏–Ω–≤–∞–π—Ç–æ–≤', '—Ñ–ª—É–¥ –ª–∏–º–∏—Ç'
            }

            is_permanently_dead = any(dead_reason in reason for dead_reason in permanently_dead_reasons)
            is_finished_work = any(finished_reason in reason for finished_reason in finished_work_reasons)

            if is_permanently_dead or is_finished_work:
                # –ù–ê–í–°–ï–ì–î–ê –∏—Å–∫–ª—é—á–∞–µ–º
                self.parent.processed_accounts.add(account_name)

                if is_permanently_dead:
                    logger.error(f"[{self.parent.profile_name}] üíÄ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ú–ï–†–¢–í: {reason}")
                else:
                    pass

                # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                self._mark_account_as_dead_in_manager(account_name, reason)
            else:
                logger.warning(f"[{self.parent.profile_name}] ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {account_name} - {reason}")

            self.parent.account_finish_times[account_name] = datetime.now()

        except Exception as e:
            logger.error(f"[{self.parent.profile_name}] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ {account_name}: {e}")

    def _mark_account_as_dead_in_manager(self, account_name: str, reason: str):
        """–ö–†–ò–¢–ò–ß–ù–û: –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–π –≤ AccountManager"""
        try:
            if hasattr(self.parent.account_manager, 'traffic_accounts'):
                if account_name in self.parent.account_manager.traffic_accounts:
                    account_data = self.parent.account_manager.traffic_accounts[account_name]

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                    if 'dead' in reason or 'unauthorized' in reason or 'missing_files' in reason:
                        new_status = 'dead'
                    elif 'frozen' in reason:
                        new_status = 'frozen'
                    elif '—Ñ–ª—É–¥' in reason:
                        new_status = 'flood'
                    elif '–ª–∏–º–∏—Ç —É—Å–ø–µ—Ö–æ–≤' in reason:
                        new_status = 'finished'
                    else:
                        new_status = 'dead'

                    # –ö–†–ò–¢–ò–ß–ù–û: –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                    old_status = account_data.status
                    account_data.status = new_status
                    account_data.is_busy = False
                    account_data.busy_by = None

                    logger.debug(
                        f"[{self.parent.profile_name}] üìù AccountManager: {account_name} {old_status} -> {new_status}")

        except Exception as e:
            logger.error(f"[{self.parent.profile_name}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {account_name}: {e}")

    def update_account_status_in_manager_sync(self, account_name: str, new_status: str):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        """
        try:
            account_manager = self.parent.account_manager
            profile_name = self.parent.profile_name

            if hasattr(account_manager, 'traffic_accounts'):
                if account_name in account_manager.traffic_accounts:
                    account_data = account_manager.traffic_accounts[account_name]

                    old_status = account_data.status
                    account_data.status = new_status
                    account_data.is_busy = False
                    account_data.busy_by = None

                else:
                    logger.warning(
                        f"[{profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ traffic_accounts –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            else:
                logger.warning(f"[{profile_name}] –£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç traffic_accounts")
        except Exception as e:
            logger.error(f"[{self.parent.profile_name}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {e}")