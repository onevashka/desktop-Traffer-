# src/modules/impl/inviter/admin_inviter.py
"""
–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–æ–≤
"""

import threading
import asyncio
import queue
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger

from .base_inviter import BaseInviterProcess
from .bot_manager import BotManager
from .admin_rights_manager import AdminRightsManager
from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats

# –ò–º–ø–æ—Ä—Ç—ã Telethon –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


class AdminInviterProcess(BaseInviterProcess):
    """–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –Ω–∞ —á–∞—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self, profile_name: str, profile_data: Dict, account_manager):
        super().__init__(profile_name, profile_data, account_manager)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        self.bot_account_info = profile_data.get('config', {}).get('bot_account')
        if not self.bot_account_info:
            logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±–æ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}")

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.bot_manager: Optional[BotManager] = None
        self.admin_rights_manager: Optional[AdminRightsManager] = None

        # –ü–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        self.chat_threads = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
        self.account_stats: Dict[str, AccountStats] = {}
        self.total_success = 0
        self.total_errors = 0
        self.total_processed = 0
        self.frozen_accounts = set()
        self.finished_accounts = set()
        self.account_finish_times: Dict[str, datetime] = {}
        self.initial_chats_count = 0

        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä –¥–ª—è {profile_name}")
        if self.bot_account_info:
            logger.info(f"   –ë–æ—Ç-–∞–∫–∫–∞—É–Ω—Ç: {self.bot_account_info.get('name', 'Unknown')}")

    def _run_inviting(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}] ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")

        if not self.bot_account_info:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±–æ—Ç–∞!")
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            asyncio.run(self._async_run_inviting())
        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.is_running = False
            self.finished_at = datetime.now()

    async def _async_run_inviting(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            if not await self._initialize_bot():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

            # 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if not await self._user_interaction():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —á–∞—Å—Ç—å (–ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤)
            await self._start_chat_threads()

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.bot_manager:
                await self.bot_manager.close()

    async def _initialize_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            logger.info(f"[{self.profile_name}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            self.bot_manager = BotManager(
                account_name=self.bot_account_info['name'],
                profile_name=self.profile_name
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            if not await self.bot_manager.initialize():
                return False

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
            self.admin_rights_manager = AdminRightsManager(
                bot_manager=self.bot_manager,
                profile_name=self.profile_name
            )

            logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_manager.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

    async def _user_interaction(self) -> bool:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chat_links = []
            temp_queue = []

            while not self.chat_queue.empty():
                chat = self.chat_queue.get_nowait()
                chat_links.append(chat.link)
                temp_queue.append(chat)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
            for chat in temp_queue:
                self.chat_queue.put(chat)

            if not chat_links:
                logger.error("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from .console_interface import get_console_interface
            console = get_console_interface()

            return console.show_bot_setup_instructions(
                bot_username=self.bot_manager.bot_username,
                profile_name=self.profile_name,
                chat_links=chat_links
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return False

    async def _start_chat_threads(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)"""
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if self.config.delay_after_start > 0:
            logger.info(f"[{self.profile_name}] –ó–∞–¥–µ—Ä–∂–∫–∞ {self.config.delay_after_start} —Å–µ–∫...")
            self.stop_flag.wait(self.config.delay_after_start)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_chats = self.chat_queue.qsize()
        self.initial_chats_count = total_chats
        logger.info(f"[{self.profile_name}] –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_chats}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
        total_invites_needed = total_chats * self.config.success_per_chat if self.config.success_per_chat > 0 else 999999
        accounts_needed = min(
            total_invites_needed // 10 if total_invites_needed > 0 else 50,
            self.config.account_limit if self.config.account_limit > 0 else 999999
        )

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        module_name = f"admin_inviter_{self.profile_name}"
        allocated_accounts = self._get_fresh_accounts(module_name, accounts_needed)

        if not allocated_accounts:
            logger.error(f"[{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            return

        logger.info(f"[{self.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(allocated_accounts)}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        chat_index = 0
        account_index = 0

        while self.chat_queue.qsize() > 0 and not self.stop_flag.is_set():
            try:
                chat = self.chat_queue.get_nowait()

                # –í—ã–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                chat_accounts = []
                accounts_to_allocate = min(self.config.threads_per_chat, len(allocated_accounts) - account_index)

                for j in range(accounts_to_allocate):
                    if account_index < len(allocated_accounts):
                        chat_accounts.append(allocated_accounts[account_index])
                        account_index += 1

                if not chat_accounts:
                    self.chat_queue.put(chat)
                    logger.warning(f"[{self.profile_name}] –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat}")
                    break

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
                thread = AdminChatWorkerThread(
                    chat_id=chat_index + 1,
                    chat_link=chat,
                    accounts=chat_accounts,
                    parent=self,
                    profile_name=self.profile_name,
                    bot_manager=self.bot_manager,
                    admin_rights_manager=self.admin_rights_manager
                )
                thread.start()
                self.chat_threads.append(thread)
                chat_index += 1

                logger.info(
                    f"[{self.profile_name}] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞ #{chat_index}: {chat} (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(chat_accounts)})")

            except queue.Empty:
                break

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        self._wait_for_threads()
        self._print_final_stats()

    def _get_fresh_accounts(self, module_name: str, count: int) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫–æ–ø–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ)"""
        self._clean_expired_accounts()
        all_accounts = self.account_manager.get_free_accounts(module_name, count * 2)

        if not all_accounts:
            return []

        fresh_accounts = []
        for account in all_accounts:
            if account.name not in self.finished_accounts:
                fresh_accounts.append(account)
                if len(fresh_accounts) >= count:
                    break
            else:
                self.account_manager.release_account(account.name, module_name)
                logger.info(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account.name} –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        return fresh_accounts

    def _clean_expired_accounts(self):
        """–û—á–∏—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Å—Ç–µ–∫—à–µ–π 24-—á–∞—Å–æ–≤–æ–π –º–µ—Ç–∫–æ–π"""
        now = datetime.now()
        expired = []

        for account_name, finish_time in self.account_finish_times.items():
            if now - finish_time >= timedelta(hours=24):
                expired.append(account_name)

        for account_name in expired:
            self.finished_accounts.discard(account_name)
            del self.account_finish_times[account_name]
            logger.info(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)")

    def _wait_for_threads(self):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (–∫–æ–ø–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ)"""
        logger.info(f"[{self.profile_name}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

        while not self.stop_flag.is_set():
            alive = [t for t in self.chat_threads if t.is_alive()]

            if not alive:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                break

            if self.user_queue.empty() and self.total_processed > 0:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

            self.stop_flag.wait(10)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.chat_threads:
            if thread.is_alive():
                thread.join(timeout=30)

    def update_account_stats(self, account_name: str, success: bool = False,
                             spam_block: bool = False, error: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–æ–ø–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ)"""
        if account_name not in self.account_stats:
            self.account_stats[account_name] = AccountStats(name=account_name)

        stats = self.account_stats[account_name]

        if success:
            stats.invites += 1
            self.total_success += 1

            if self.config.success_per_account > 0 and stats.invites >= self.config.success_per_account:
                stats.status = 'finished'
                self.finished_accounts.add(account_name)
                self.account_finish_times[account_name] = datetime.now()
                logger.warning(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–∞–π—Ç–æ–≤: {stats.invites}")

        if spam_block:
            stats.spam_blocks += 1
            stats.status = 'frozen'
            self.frozen_accounts.add(account_name)
            logger.error(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–æ–ª—É—á–∏–ª —Å–ø–∞–º–±–ª–æ–∫")

        if error:
            stats.errors += 1

        self.total_processed += 1

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–ø–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ)"""
        logger.info("=" * 60)
        logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ú–ò–ù-–ò–ù–í–ê–ô–¢–ï–†–ê: {self.profile_name}")
        logger.info("=" * 60)

        logger.info(f"üéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.total_success}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {self.total_errors}")
        logger.info(f"   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_processed}")

        if self.account_stats:
            logger.info(f"\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:")
            for account_name, stats in self.account_stats.items():
                status_icon = "üèÅ" if stats.status == 'finished' else "‚ö°" if stats.status == 'working' else "‚ùå"
                logger.info(
                    f"   {status_icon} {account_name}: –∏–Ω–≤–∞–π—Ç–æ–≤={stats.invites}, –æ—à–∏–±–æ–∫={stats.errors}, —Å–ø–∞–º–±–ª–æ–∫–æ–≤={stats.spam_blocks}, —Å—Ç–∞—Ç—É—Å={stats.status}")

        if self.finished_accounts:
            logger.info(f"\nüèÅ –û–¢–†–ê–ë–û–¢–ê–í–®–ò–ï –ê–ö–ö–ê–£–ù–¢–´: {len(self.finished_accounts)}")
            for account_name in self.finished_accounts:
                if account_name in self.account_finish_times:
                    finish_time = self.account_finish_times[account_name]
                    next_available = finish_time + timedelta(hours=24)
                    logger.info(f"   - {account_name} (–¥–æ—Å—Ç—É–ø–µ–Ω —Å {next_available.strftime('%H:%M:%S')})")

        if self.frozen_accounts:
            logger.warning(f"\n–ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´: {len(self.frozen_accounts)}")
            for frozen_account in self.frozen_accounts:
                logger.warning(f"   - {frozen_account}")

        logger.info("=" * 60)


class AdminChatWorkerThread(threading.Thread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self, chat_id: int, chat_link: str, accounts: List, parent: AdminInviterProcess,
                 profile_name: str, bot_manager: BotManager, admin_rights_manager: AdminRightsManager):
        super().__init__(name=f"AdminChat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.accounts = accounts
        self.parent = parent
        self.profile_name = profile_name
        self.bot_manager = bot_manager
        self.admin_rights_manager = admin_rights_manager
        self.main_loop = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        self.chat_success = 0
        self.chat_errors = 0
        self.chat_processed = 0

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            self.main_loop = loop

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(self._work())

        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}]-[AdminChat-{self.chat_id}] –û—à–∏–±–∫–∞: {e}")
        finally:
            loop.close()

    async def _work(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã...")
        for account_data in self.accounts:
            try:
                await account_data.account.create_client()
            except Exception as e:
                logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {account_data.name}: {e}")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã - –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∑–∞ —Ä–∞–∑
        for account_data in self.accounts:
            if self.parent.stop_flag.is_set():
                break

            if account_data.name in self.parent.finished_accounts:
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ê–∫–∫–∞—É–Ω—Ç {account_data.name} —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            try:
                # 1. –í–´–î–ê–ï–ú –ü–†–ê–í–ê –ê–î–ú–ò–ù–ê –∞–∫–∫–∞—É–Ω—Ç—É
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîß –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account_data.name}")

                admin_granted = await self.admin_rights_manager.grant_admin_rights(
                    account=account_data.account,
                    chat_link=self.chat_link
                )

                if not admin_granted:
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account_data.name}")
                    continue

                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤—ã–¥–∞–Ω—ã: {account_data.name}")

                # 2. –†–ê–ë–û–¢–ê–ï–ú —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –∫–∞–∫ –∞–¥–º–∏–Ω–æ–º
                await self._work_with_admin_account(account_data)

            except Exception as e:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_data.name}: {e}")
            finally:
                # 3. –ó–ê–ë–ò–†–ê–ï–ú –ü–†–ê–í–ê –ê–î–ú–ò–ù–ê (–≤—Å–µ–≥–¥–∞!)
                try:
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîÑ –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account_data.name}")

                    await self.admin_rights_manager.revoke_admin_rights(
                        account=account_data.account,
                        chat_link=self.chat_link
                    )

                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã: {account_data.name}")

                except Exception as e:
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤: {account_data.name}: {e}")

        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üèÅ –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _work_with_admin_account(self, account_data):
        """–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –∫–∞–∫ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        account_success = 0
        account_errors = 0
        consecutive_errors = 0

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üë®‚Äçüíº –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∞: {account_data.name}")

        while not self.parent.stop_flag.is_set():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if self.parent.config.success_per_account > 0 and account_success >= self.parent.config.success_per_account:
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üéØ –ê–∫–∫–∞—É–Ω—Ç {account_data.name} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞: {account_success}")
                break

            if consecutive_errors >= self.parent.config.spam_errors:
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –¥–ª—è {account_data.name}: {consecutive_errors}")
                break

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞
            try:
                user = self.parent.user_queue.get_nowait()
            except queue.Empty:
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üì≠ –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è {account_data.name}")
                break

            # –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
            try:
                success = await self._invite_user_as_admin(account_data.account, user)

                if success:
                    account_success += 1
                    self.chat_success += 1
                    consecutive_errors = 0
                    self.parent.update_account_stats(account_data.name, success=True)
                    logger.debug(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ò–Ω–≤–∞–π—Ç: {account_data.name} ‚Üí @{user.username}")
                else:
                    account_errors += 1
                    self.chat_errors += 1
                    consecutive_errors += 1
                    self.parent.update_account_stats(account_data.name, error=True)

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
                if self.parent.config.invite_delay > 0:
                    await asyncio.sleep(self.parent.config.invite_delay)

            except Exception as e:
                account_errors += 1
                self.chat_errors += 1
                consecutive_errors += 1
                self.parent.update_account_stats(account_data.name, error=True)
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∞ {account_data.name}: {e}")

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üìä –ê–∫–∫–∞—É–Ω—Ç {account_data.name} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É: —É—Å–ø–µ—Ö–æ–≤={account_success}, –æ—à–∏–±–æ–∫={account_errors}")

    async def _invite_user_as_admin(self, account, user: InviteUser) -> bool:
        """–ò–Ω–≤–∞–π—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_entity = await account.client.get_input_entity(self.chat_link)
            user_entity = await account.client.get_input_entity(user.username)

            # –ò–Ω–≤–∞–π—Ç–∏–º —á–µ—Ä–µ–∑ MTProto (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
            await account.client(InviteToChannelRequest(
                channel=chat_entity,
                users=[user_entity]
            ))

            return True

        except UserPrivacyRestrictedError:
            logger.debug(f"[{self.profile_name}] üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return False
        except FloodWaitError as e:
            logger.warning(f"[{self.profile_name}] ‚è≥ –§–ª—É–¥-–ª–∏–º–∏—Ç –¥–ª—è {account.name}: {e.seconds} —Å–µ–∫")
            await asyncio.sleep(e.seconds)
            return False
        except PeerFloodError:
            logger.error(f"[{self.profile_name}] üö´ –°–ø–∞–º–±–ª–æ–∫ –¥–ª—è {account.name}")
            self.parent.update_account_stats(account.name, spam_block=True)
            return False
        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∞ @{user.username}: {e}")
            return False