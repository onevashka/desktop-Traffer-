# src/modules/impl/inviter/admin_inviter.py
"""
–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–æ–≤
"""

import threading
import asyncio
import queue
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger

from .base_inviter import BaseInviterProcess
from .bot_manager import BotManager
from .admin_rights_manager import AdminRightsManager
from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats

# –ò–º–ø–æ—Ä—Ç—ã Telethon –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


class AdminInviterProcess(BaseInviterProcess):
    """–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –Ω–∞ —á–∞—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self, profile_name: str, profile_data: Dict, account_manager):
        super().__init__(profile_name, profile_data, account_manager)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        self.bot_account_info = profile_data.get('config', {}).get('bot_account')
        if not self.bot_account_info:
            logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±–æ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}")

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.bot_manager: Optional[BotManager] = None
        self.admin_rights_manager: Optional[AdminRightsManager] = None

        # –ü–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        self.chat_threads = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
        self.account_stats: Dict[str, AccountStats] = {}
        self.total_success = 0
        self.total_errors = 0
        self.total_processed = 0
        self.frozen_accounts = set()
        self.finished_accounts = set()
        self.account_finish_times: Dict[str, datetime] = {}
        self.initial_chats_count = 0

        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä –¥–ª—è {profile_name}")
        if self.bot_account_info:
            logger.info(f"   –ë–æ—Ç-–∞–∫–∫–∞—É–Ω—Ç: {self.bot_account_info.get('name', 'Unknown')}")

    def _run_inviting(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}] ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")

        if not self.bot_account_info:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±–æ—Ç–∞!")
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            asyncio.run(self._async_run_inviting())
        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.is_running = False
            self.finished_at = datetime.now()

    async def _async_run_inviting(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            if not await self._initialize_bot():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

            # 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if not await self._user_interaction():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —á–∞—Å—Ç—å (–ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤)
            await self._start_chat_threads()

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.bot_manager:
                await self.bot_manager.close()

    async def _initialize_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            logger.info(f"[{self.profile_name}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            self.bot_manager = BotManager(
                account_name=self.bot_account_info['name'],
                profile_name=self.profile_name
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            if not await self.bot_manager.initialize():
                return False

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
            self.admin_rights_manager = AdminRightsManager(
                bot_manager=self.bot_manager,
                profile_name=self.profile_name
            )

            logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_manager.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

    async def _user_interaction(self) -> bool:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chat_links = []
            temp_queue = []

            while not self.chat_queue.empty():
                chat = self.chat_queue.get_nowait()
                chat_links.append(chat)
                temp_queue.append(chat)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
            for chat in temp_queue:
                self.chat_queue.put(chat)

            if not chat_links:
                logger.error("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ª–æ–≥
            logger.info(f"=" * 70)
            logger.info(f"ü§ñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ë–û–¢–ê")
            logger.info(f"=" * 70)
            logger.info(f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @{self.bot_manager.bot_username} –≤ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:")

            for i, chat in enumerate(chat_links, 1):
                logger.info(f"   {i}. {chat}")

            logger.info(f"2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö")
            logger.info(f"3. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            logger.info(f"=" * 70)

            # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            await asyncio.sleep(60)

            logger.info(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return False

    async def _start_chat_threads(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)"""
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if self.config.delay_after_start > 0:
            logger.info(f"[{self.profile_name}] –ó–∞–¥–µ—Ä–∂–∫–∞ {self.config.delay_after_start} —Å–µ–∫...")
            self.stop_flag.wait(self.config.delay_after_start)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_chats = self.chat_queue.qsize()
        self.initial_chats_count = total_chats
        logger.info(f"[{self.profile_name}] –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_chats}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
        total_invites_needed = total_chats * self.config.success_per_chat if self.config.success_per_chat > 0 else 999999
        logger.info(f"[{self.profile_name}] –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –≤—Å–µ–≥–æ: {total_invites_needed}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –∏—Å—Ö–æ–¥—è –∏–∑ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        if self.config.success_per_account > 0:
            accounts_needed = (
                                          total_invites_needed + self.config.success_per_account - 1) // self.config.success_per_account
            logger.info(
                f"[{self.profile_name}] –†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_needed} (–ø–æ {self.config.success_per_account} –∏–Ω–≤–∞–π—Ç–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞)")
        else:
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            accounts_needed = total_chats * self.config.threads_per_chat
            logger.info(f"[{self.profile_name}] –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º {accounts_needed} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        available_accounts = self.account_manager.get_free_accounts_count()
        logger.info(f"[{self.profile_name}] –î–æ—Å—Ç—É–ø–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {available_accounts}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        initial_accounts_to_request = min(accounts_needed, available_accounts,
                                          self.config.threads_per_chat * total_chats)

        if initial_accounts_to_request < accounts_needed:
            logger.warning(
                f"[{self.profile_name}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {accounts_needed}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}")
            logger.info(
                f"[{self.profile_name}] –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {initial_accounts_to_request} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        module_name = f"admin_inviter_{self.profile_name}"
        allocated_accounts = self._get_fresh_accounts(module_name, initial_accounts_to_request)

        if not allocated_accounts:
            logger.error(f"[{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            return

        logger.info(f"[{self.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: {len(allocated_accounts)}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        chat_index = 0
        account_index = 0

        while self.chat_queue.qsize() > 0 and not self.stop_flag.is_set():
            try:
                chat = self.chat_queue.get_nowait()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                if account_index >= len(allocated_accounts):
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                    additional_accounts = self._get_fresh_accounts(
                        module_name,
                        self.config.threads_per_chat
                    )

                    if additional_accounts:
                        allocated_accounts.extend(additional_accounts)
                        logger.info(
                            f"[{self.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {len(additional_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    else:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                        self.chat_queue.put(chat)
                        logger.warning(f"[{self.profile_name}] –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat}, –æ—Ç–ª–æ–∂–µ–Ω")
                        break

                # –í—ã–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                chat_accounts = []
                accounts_to_allocate = min(self.config.threads_per_chat, len(allocated_accounts) - account_index)

                for j in range(accounts_to_allocate):
                    if account_index < len(allocated_accounts):
                        chat_accounts.append(allocated_accounts[account_index])
                        account_index += 1

                if not chat_accounts:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
                    self.chat_queue.put(chat)
                    logger.warning(f"[{self.profile_name}]  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —á–∞—Ç–∞ {chat}")
                    break

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
                thread = AdminChatWorkerThread(
                    chat_id=chat_index + 1,
                    chat_link=chat,
                    accounts=chat_accounts,
                    parent=self,
                    profile_name=self.profile_name,
                    bot_manager=self.bot_manager,
                    admin_rights_manager=self.admin_rights_manager
                )
                thread.start()
                self.chat_threads.append(thread)
                chat_index += 1

                logger.info(
                    f"[{self.profile_name}] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞ #{chat_index}: {chat} (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(chat_accounts)})")

            except queue.Empty:
                break

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        self._wait_for_threads()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        if self.chat_queue.qsize() > 0:
            logger.warning(f"[{self.profile_name}] –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {self.chat_queue.qsize()}")

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_final_stats()

    def _get_fresh_accounts(self, module_name: str, count: int) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫–æ–ø–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ)"""
        self._clean_expired_accounts()
        all_accounts = self.account_manager.get_free_accounts(module_name, count * 2)

        if not all_accounts:
            return []

        fresh_accounts = []
        for account in all_accounts:
            if account.name not in self.finished_accounts:
                fresh_accounts.append(account)
                if len(fresh_accounts) >= count:
                    break
            else:
                self.account_manager.release_account(account.name, module_name)
                logger.info(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account.name} –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        return fresh_accounts

    def _clean_expired_accounts(self):
        """–û—á–∏—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Å—Ç–µ–∫—à–µ–π 24-—á–∞—Å–æ–≤–æ–π –º–µ—Ç–∫–æ–π"""
        now = datetime.now()
        expired = []

        for account_name, finish_time in self.account_finish_times.items():
            if now - finish_time >= timedelta(hours=24):
                expired.append(account_name)

        for account_name in expired:
            self.finished_accounts.discard(account_name)
            del self.account_finish_times[account_name]
            logger.info(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)")

    def _wait_for_threads(self):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        logger.info(f"[{self.profile_name}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

        while not self.stop_flag.is_set():
            alive = [t for t in self.chat_threads if t.is_alive()]

            if not alive:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.user_queue.empty() and self.total_processed > 0:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            free_accounts = self.account_manager.get_free_accounts_count()
            active_accounts = len(alive)
            finished_accounts = len(self.finished_accounts)

            self.stop_flag.wait(10)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.chat_threads:
            if thread.is_alive():
                thread.join(timeout=30)

    def update_account_stats(self, account_name: str, success: bool = False,
                             spam_block: bool = False, error: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã"""
        if account_name not in self.account_stats:
            self.account_stats[account_name] = AccountStats(name=account_name)

        stats = self.account_stats[account_name]

        if success:
            stats.invites += 1
            self.total_success += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–∏–º–∏—Ç–∞
            if self.config.success_per_account > 0 and stats.invites >= self.config.success_per_account:
                stats.status = 'finished'
                self.finished_accounts.add(account_name)
                self.account_finish_times[account_name] = datetime.now()
                logger.warning(
                    f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–∞–π—Ç–æ–≤: {stats.invites}")

                # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ 24 —á–∞—Å–∞
                self._mark_account_as_finished(account_name)

        if error:
            stats.errors += 1
            self.total_errors += 1
        if spam_block:
            stats.spam_blocks += 1
            stats.consecutive_spam += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–ø–∞–º–±–ª–æ–∫–æ–≤
            if stats.spam_blocks >= self.config.acc_spam_limit:
                stats.status = 'spam_blocked'
                self.frozen_accounts.add(account_name)
                logger.error(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º")
        else:
            stats.consecutive_spam = 0

        self.total_processed += 1

    def _mark_account_as_finished(self, account_name: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ 24 —á–∞—Å–∞"""
        try:
            finish_time = datetime.now()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            self.account_finish_times[account_name] = finish_time

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
            next_available = finish_time + timedelta(hours=24)
            logger.info(f"üìå [{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
            logger.info(f"   ‚è∞ –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {next_available.strftime('%Y-%m-%d %H:%M:%S')}")

        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ: {e}")

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("=" * 60)
        logger.info(f"[{self.profile_name}]   üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"[{self.profile_name}]   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_processed}")
        logger.info(f"[{self.profile_name}]   –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.total_success}")
        logger.info(f"[{self.profile_name}]   –û—à–∏–±–æ–∫: {self.total_errors}")

        if self.total_processed > 0:
            success_rate = (self.total_success / self.total_processed) * 100
            logger.info(f"[{self.profile_name}]   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

        logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:")
        for account_name, stats in self.account_stats.items():
            status_icon = "‚úÖ" if stats.status == 'finished' else "‚ö°" if stats.status == 'working' else "‚ùå"
            logger.info(
                f"   {status_icon} {account_name}: –∏–Ω–≤–∞–π—Ç–æ–≤={stats.invites}, –æ—à–∏–±–æ–∫={stats.errors}, —Å–ø–∞–º–±–ª–æ–∫–æ–≤={stats.spam_blocks}, —Å—Ç–∞—Ç—É—Å={stats.status}")

        if self.finished_accounts:
            logger.info(f"\nüèÅ –û–¢–†–ê–ë–û–¢–ê–í–®–ò–ï –ê–ö–ö–ê–£–ù–¢–´: {len(self.finished_accounts)}")
            for account_name in self.finished_accounts:
                if account_name in self.account_finish_times:
                    finish_time = self.account_finish_times[account_name]
                    next_available = finish_time + timedelta(hours=24)
                    logger.info(f"   - {account_name} (–¥–æ—Å—Ç—É–ø–µ–Ω —Å {next_available.strftime('%H:%M:%S')})")

        if self.frozen_accounts:
            logger.warning(f"\n–ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´: {len(self.frozen_accounts)}")
            for frozen_account in self.frozen_accounts:
                logger.warning(f"   - {frozen_account}")

        logger.info("=" * 60)


class AdminChatWorkerThread(threading.Thread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self, chat_id: int, chat_link: str, accounts: List, parent: AdminInviterProcess,
                 profile_name: str, bot_manager: BotManager, admin_rights_manager: AdminRightsManager):
        super().__init__(name=f"AdminChat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.accounts = accounts
        self.parent = parent
        self.profile_name = profile_name
        self.bot_manager = bot_manager
        self.admin_rights_manager = admin_rights_manager
        self.main_loop = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        self.chat_success = 0
        self.chat_errors = 0
        self.chat_processed = 0

        # –§–ª–∞–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞
        self.chat_stop_reason = None
        self.stop_all_workers = False

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.chat_entity = None
        self.chat_telegram_id = None

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            self.main_loop = loop

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(self._work())

        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}]-[AdminChat-{self.chat_id}] –û—à–∏–±–∫–∞: {e}")
        finally:
            loop.close()

    async def _work(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã...")
        for account_data in self.accounts:
            try:
                await account_data.account.create_client()
            except Exception as e:
                logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {account_data.name}: {e}")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã - –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∑–∞ —Ä–∞–∑
        for account_data in self.accounts:
            if self.parent.stop_flag.is_set() or self.stop_all_workers:
                break

            if account_data.name in self.parent.finished_accounts:
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ê–∫–∫–∞—É–Ω—Ç {account_data.name} —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            try:
                # 1. –í–´–î–ê–ï–ú –ü–†–ê–í–ê –ê–î–ú–ò–ù–ê –∞–∫–∫–∞—É–Ω—Ç—É
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîß –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account_data.name}")

                admin_granted = await self.admin_rights_manager.grant_admin_rights(
                    account=account_data.account,
                    chat_link=self.chat_link
                )

                if not admin_granted:
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account_data.name}")
                    continue

                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤—ã–¥–∞–Ω—ã: {account_data.name}")

                # 2. –†–ê–ë–û–¢–ê–ï–ú —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –∫–∞–∫ –∞–¥–º–∏–Ω–æ–º
                await self._work_with_admin_account(account_data)

            except Exception as e:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_data.name}: {e}")
            finally:
                # 3. –ó–ê–ë–ò–†–ê–ï–ú –ü–†–ê–í–ê –ê–î–ú–ò–ù–ê (–≤—Å–µ–≥–¥–∞!)
                try:
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîÑ –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account_data.name}")

                    await self.admin_rights_manager.revoke_admin_rights(
                        account=account_data.account,
                        chat_link=self.chat_link
                    )

                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã: {account_data.name}")

                except Exception as e:
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤: {account_data.name}: {e}")

        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üèÅ –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={self.chat_processed}, —É—Å–ø–µ—à–Ω–æ={self.chat_success}, –æ—à–∏–±–æ–∫={self.chat_errors}")

    async def _work_with_admin_account(self, account_data):
        """–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –∫–∞–∫ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        account_name = account_data.name
        account = account_data.account

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üë®‚Äçüíº –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∞: {account_name}")

        invites_count = 0
        errors_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            me = await account.client.get_me()
            logger.info(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {me.first_name} {me.last_name or ''} (@{me.username or 'no_username'})")
        except Exception as e:
            logger.error(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            return

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        chat_entity = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞
            chat_entity = await account.client.get_entity(self.chat_link)
            if hasattr(chat_entity, 'id'):
                self.chat_telegram_id = chat_entity.id

            logger.info(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞: {self.chat_link}")
        except Exception as e:
            logger.error(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞: {e}")
            return

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        while not self.parent.stop_flag.is_set() and not self.stop_all_workers:
            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–∏–º–∏—Ç–∞
            account_stats = self.parent.account_stats.get(account_name)
            if account_stats and account_stats.status == 'finished':
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ê–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞ —Å–ø–∞–º
            if account_stats and account_stats.status == 'spam_blocked':
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞
            if self.parent.config.success_per_chat > 0 and self.chat_success >= self.parent.config.success_per_chat:
                logger.success(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.chat_success}")
                self.stop_all_workers = True
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.parent.config.success_per_account > 0:
                if invites_count >= self.parent.config.success_per_account:
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {invites_count}")
                    break

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user = self.parent.user_queue.get_nowait()
            except queue.Empty:
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
                break

            # –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self._invite_user(user, account, account_name)

            if success:
                invites_count += 1
                self.chat_success += 1
            else:
                errors_count += 1
                self.chat_errors += 1

            self.chat_processed += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏)
            self.parent.update_account_stats(
                account_name,
                success=success,
                spam_block=(user.status == UserStatus.SPAM_BLOCK if hasattr(user, 'status') else False),
                error=(not success)
            )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
            if self.parent.config.delay_between > 0:
                await asyncio.sleep(self.parent.config.delay_between)

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ó–∞–≤–µ—Ä—à–µ–Ω. –ò–Ω–≤–∞–π—Ç–æ–≤: {invites_count}, –æ—à–∏–±–æ–∫: {errors_count}")

    async def _invite_user(self, user: InviteUser, account, account_name: str) -> bool:
        """–ò–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telethon —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        client = account.client

        if not client or not client.is_connected():
            logger.error(f"‚ùå [{self.profile_name}]-[AdminChat-{self.chat_link}] –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        username = user.username
        if username.startswith('@'):
            username = username[1:]

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å @{username} –≤ {self.chat_link}")

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤
            try:
                full_user = await client(GetFullUserRequest(username))
                old_common_chats = full_user.full_user.common_chats_count
            except (ValueError, TypeError, UsernameInvalidError, UsernameNotOccupiedError):
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                user.status = UserStatus.NOT_FOUND
                user.last_attempt = datetime.now()
                user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                self.parent.processed_users[username] = user
                return False

            # 1.5 –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —á–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            if self.chat_telegram_id and old_common_chats > 0:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º user entity
                    user_entity = await client.get_entity(username)

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—â–∏–µ —á–∞—Ç—ã
                    common_chats_result = await client(GetCommonChatsRequest(
                        user_id=user_entity,
                        max_id=0,
                        limit=100
                    ))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –Ω–∞—à —á–∞—Ç
                    for chat in common_chats_result.chats:
                        if hasattr(chat, 'id') and chat.id == self.chat_telegram_id:
                            logger.warning(
                                f"üë• [{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} —É–∂–µ –≤ —á–∞—Ç–µ!")
                            user.status = UserStatus.ALREADY_IN
                            user.last_attempt = datetime.now()
                            user.error_message = "–£–∂–µ –≤ —á–∞—Ç–µ"
                            self.parent.processed_users[username] = user
                            return False

                    logger.debug(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")

                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–≤–∞–π—Ç
                    logger.debug(
                        f"‚ö†[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–∏–µ —á–∞—Ç—ã: {e}")

            # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            try:
                # –ü–æ–ª—É—á–∞–µ–º entity –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_entity = await client.get_entity(username)

                # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await client(InviteToChannelRequest(
                    channel=self.chat_link,
                    users=[user_entity]
                ))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ missing_invitees (–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å)
                if hasattr(result, 'missing_invitees') and result.missing_invitees:
                    logger.warning(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                    user.status = UserStatus.PRIVACY
                    user.last_attempt = datetime.now()
                    user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
                    self.parent.processed_users[username] = user
                    return False

            except UserPrivacyRestrictedError:
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                user.status = UserStatus.PRIVACY
                user.last_attempt = datetime.now()
                user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
                self.parent.processed_users[username] = user
                return False

            # 3. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏–ª—Å—è
            await asyncio.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É (–º–µ–Ω—å—à–µ —á–µ–º –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º, —É –Ω–∞—Å –∂–µ –∞–¥–º–∏–Ω)

            full_user2 = await client(GetFullUserRequest(username))
            new_common_chats = full_user2.full_user.common_chats_count

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å - —Å–ø–∏—Å–∞–Ω–∏–µ
            if new_common_chats <= old_common_chats:
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å—Ä–∞–∑—É —Å–ø–∏—Å–∞–Ω")
                user.status = UserStatus.ERROR
                user.last_attempt = datetime.now()
                user.error_message = "–°–ø–∏—Å–∞–Ω–∏–µ"
                self.parent.processed_users[username] = user
                return False

            # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
            logger.success(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            user.status = UserStatus.INVITED
            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return True

        except (PeerFloodError, FloodWaitError) as e:
            if isinstance(e, FloodWaitError):
                wait_seconds = e.seconds
                logger.warning(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] FloodWait: –∂–¥—É {wait_seconds} —Å–µ–∫.")
                await asyncio.sleep(wait_seconds)
            else:
                logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –°–ø–∞–º–±–ª–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ @{username}")

            user.status = UserStatus.SPAM_BLOCK
            user.last_attempt = datetime.now()
            user.error_message = str(e)
            self.parent.processed_users[username] = user
            return False

        except UserPrivacyRestrictedError:
            logger.warning(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
            user.status = UserStatus.PRIVACY
            user.last_attempt = datetime.now()
            user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
            self.parent.processed_users[username] = user
            return False

        except (UserDeactivatedBanError, UserDeactivatedError):
            logger.warning(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram")
            user.status = UserStatus.NOT_FOUND
            user.last_attempt = datetime.now()
            user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            self.parent.processed_users[username] = user
            return False

        except (ChatAdminRequiredError, ChatWriteForbiddenError):
            logger.error(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ (–¥–∞–∂–µ —Å –∞–¥–º–∏–Ω–∫–æ–π!)")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ"
            self.parent.processed_users[username] = user

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, —Ç.–∫. –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏
            self.chat_stop_reason = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"
            self.stop_all_workers = True
            return False

        except ChannelsTooMuchError:
            logger.warning(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} —É–∂–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Ç–æ–≤")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = "–ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤"
            self.parent.processed_users[username] = user
            return False

        except Exception as e:
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            error_text = str(e)

            if "CHAT_MEMBER_ADD_FAILED" in error_text:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å @{username}")
                user.status = UserStatus.ERROR
                user.error_message = "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"

            elif "You're banned from sending messages" in error_text:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤")
                user.status = UserStatus.ERROR
                user.error_message = "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

            elif "user was kicked" in error_text.lower():
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} –±—ã–ª —Ä–∞–Ω–µ–µ –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞")
                user.status = UserStatus.ALREADY_IN
                user.error_message = "–ë—ã–ª –∫–∏–∫–Ω—É—Ç"

            elif "already in too many channels" in error_text.lower():
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} –≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö —á–∞—Ç–∞—Ö")
                user.status = UserStatus.ERROR
                user.error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Ç–æ–≤"

            else:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
                user.status = UserStatus.ERROR
                user.error_message = f"–û—à–∏–±–∫–∞: {error_text[:50]}"

            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return False