# src/modules/impl/inviter/admin_inviter.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ê–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ—á–µ—Ä–µ–¥—è–º–∏
- –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
- –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤–µ–¥—É—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –û—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω–∞ –æ–±—â–∞—è –æ—á–µ—Ä–µ–¥—å admin_command_queue
"""
import asyncio
import queue
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger
from pathlib import Path
from dataclasses import dataclass

from .base_inviter import BaseInviterProcess
from .bot_manager import BotManager
from .admin_rights_manager import AdminRightsManager
from .account_mover import AccountMover
from .worker_thread import ChatWorkerThread
from .account_error_counters import AccountErrorManager
from .progress_manager import ProgressManager
from .report_generator import ReportGenerator
from .realtime_logger import RealtimeLogger  # –î–û–ë–ê–í–õ–ï–ù–û
from .utils import clean_expired_accounts, ensure_main_admin_ready_in_chat
from src.entities.moduls.inviter import *
from .chat_protection import ChatProtectionManager


class AdminInviterProcess(BaseInviterProcess):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ—á–µ—Ä–µ–¥—è–º–∏"""

    def __init__(self, profile_name: str, profile_data: Dict, account_manager):
        super().__init__(profile_name, profile_data, account_manager)

        profile_folder = Path(profile_data['folder_path'])
        from .data_loader import InviterDataLoader
        loader = InviterDataLoader(profile_folder)
        self.bot_token = loader._load_bot_token()

        # –ù–û–í–û–ï: –ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"
        self.available_admins = []
        self.chat_admins: Dict[str, ChatAdmin] = {}

        if admins_folder.exists():
            session_files = list(admins_folder.glob("*.session"))
            for session_file in session_files:
                admin_name = session_file.stem
                json_file = admins_folder / f"{admin_name}.json"
                if json_file.exists():
                    self.available_admins.append(admin_name)
                    logger.success(f"[{self.profile_name}] –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω: {admin_name}")

        logger.info(f"[{self.profile_name}] –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(self.available_admins)}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.account_mover = AccountMover(profile_folder)
        self.error_manager = AccountErrorManager(self)
        self.progress_manager = ProgressManager(self)
        self.report_generator = ReportGenerator(self)

        # –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.realtime_logger = RealtimeLogger(profile_name, profile_folder)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.bot_manager: Optional[BotManager] = None
        self.admin_rights_manager: Optional[AdminRightsManager] = None

        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–ò–†–ê–ï–ú –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å - –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞!
        # self.admin_command_queue = queue.Queue()  # –£–î–ê–õ–ï–ù–ê!

        # üî• –ù–û–í–û–ï: –û—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        self.chat_command_queues: Dict[str, queue.Queue] = {}
        self.chat_processors: Dict[str, asyncio.Task] = {}

        self.bot_command_queue: queue.Queue = queue.Queue()
        self.bot_command_processor_task: Optional[asyncio.Task] = None

        self.chat_threads = []
        self.ready_chats = set()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.account_stats: Dict[str, AccountStats] = {}
        self.total_success = 0
        self.total_errors = 0
        self.total_processed = 0
        self.frozen_accounts = set()
        self.finished_accounts = set()
        self.blocked_accounts = set()
        self.account_finish_times: Dict[str, datetime] = {}
        self.chat_stats: Dict[str, Dict] = {}

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        self.writeoff_accounts = set()
        self.spam_block_accounts = set()
        self.block_invite_accounts = set()
        self.finished_successfully_accounts = set()
        self.processed_accounts = set()

        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–ª—É–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.flood_accounts = set()

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_file_path = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

        self.chat_threads = []
        self.shutdown_in_progress = False

        self.chat_protection_manager = ChatProtectionManager(self)

        self.clear_stopped_chats_file()

        self.failed_admins = set()

        # ============================================================================
    # üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ú–ò –û–ß–ï–†–ï–î–Ø–ú–ò
    # ============================================================================

    def send_command_to_chat(self, chat_link: str, command: AdminCommand):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if chat_link in self.chat_command_queues:
            self.chat_command_queues[chat_link].put(command)
            admin_name = self.chat_admins[chat_link].name if chat_link in self.chat_admins else "Unknown"
            logger.debug(
                f"[{self.profile_name}] üì§ –ö–æ–º–∞–Ω–¥–∞ {command.action} –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ {command.worker_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_name} –≤ —á–∞—Ç–µ {chat_link}")
        else:
            logger.error(f"[{self.profile_name}] ‚ùå –û—á–µ—Ä–µ–¥—å –¥–ª—è —á–∞—Ç–∞ {chat_link} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            if command.response_queue:
                command.response_queue.put(False)

    def get_chat_admin_info(self, chat_link: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ –¥–ª—è —á–∞—Ç–∞"""
        if chat_link in self.chat_admins:
            admin = self.chat_admins[chat_link]
            queue_size = self.chat_command_queues[chat_link].qsize() if chat_link in self.chat_command_queues else 0
            return f"–ê–¥–º–∏–Ω: {admin.name}, –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥: {queue_size}, –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {admin.is_ready}"
        return "–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    # –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ revoke_main_admin_rights_for_chat:

    async def revoke_main_admin_rights_for_chat(self, chat_link: str, reason: str) -> bool:
        """üî• –û–ë–ù–û–í–õ–ï–ù–û: –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫"""
        try:
            logger.info(f"[{self.profile_name}] üëëüîí –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_link} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")

            # –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            if chat_link not in self.chat_admins:
                logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –¥–ª—è —á–∞—Ç–∞ {chat_link} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True

            admin_data = self.chat_admins[chat_link]

            # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï!
            admin_user_id = admin_data.user_id
            chat_id = admin_data.chat_id

            if not admin_user_id or not chat_id:
                logger.warning(
                    f"[{self.profile_name}] ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ {admin_data.name} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (ID: {admin_user_id}, Chat: {chat_id})")
                return True

            logger.info(
                f"[{self.profile_name}] üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ {admin_data.name}: user_id={admin_user_id}, chat_id={chat_id}")

            # üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≥–¥–µ –∂–∏–≤–µ—Ç –±–æ—Ç
            success = self.send_bot_command(
                action="REVOKE_ADMIN_RIGHTS",
                chat_id=chat_id,
                user_id=admin_user_id,
                account_name=admin_data.name,
                timeout=20  # 20 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            )

            if success:
                logger.debug(
                    f"[{self.profile_name}] ‚úÖ –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {admin_data.name} –≤ {chat_link}")
            else:
                logger.warning(
                    f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {admin_data.name}")

            return True  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
            return True

    async def _start_bot_command_processor(self):
        """üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop"""
        self.bot_command_processor_task = asyncio.create_task(self._process_bot_commands())
        logger.info(f"[{self.profile_name}] üöÄ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

    async def _process_bot_commands(self):
        """üî• –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop"""
        while not self.stop_flag.is_set():
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
                commands_processed = 0
                while commands_processed < 5:  # –î–æ 5 –∫–æ–º–∞–Ω–¥ –∑–∞ —Ä–∞–∑
                    try:
                        command = self.bot_command_queue.get_nowait()
                        await self._execute_bot_command(command)
                        commands_processed += 1
                    except queue.Empty:
                        break

                # –ë—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª
                await asyncio.sleep(0.01)

            except Exception as e:
                logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
                await asyncio.sleep(1)

        logger.info(f"[{self.profile_name}] üõë –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _execute_bot_command(self, command: dict):
        """üî• –ù–û–í–û–ï: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if command["action"] == "REVOKE_ADMIN_RIGHTS":
                success = await self.admin_rights_manager.revoke_main_admin_rights(
                    chat_link=command["chat_id"],
                    user_id=command["user_id"],
                    account_name=command["account_name"]
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
                if command.get("response_queue"):
                    command["response_queue"].put(success)

            elif command["action"] == "GRANT_ADMIN_RIGHTS":
                success = await self.admin_rights_manager.grant_main_admin_rights(
                    chat_link=command["chat_id"],
                    user_id=command["user_id"],
                    account_name=command["account_name"]
                )

                if command.get("response_queue"):
                    command["response_queue"].put(success)

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ {command['action']}: {e}")
            if command.get("response_queue"):
                command["response_queue"].put(False)

    def send_bot_command(self, action: str, chat_id: str, user_id: int, account_name: str, timeout: int = 30) -> bool:
        """üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫"""
        try:
            response_queue = queue.Queue()

            command = {
                "action": action,
                "chat_id": chat_id,
                "user_id": user_id,
                "account_name": account_name,
                "response_queue": response_queue
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            self.bot_command_queue.put(command)

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            try:
                result = response_queue.get(timeout=600)
                return result
            except queue.Empty:
                logger.error(f"[{self.profile_name}] ‚è∞ –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ {action} ({timeout} —Å–µ–∫)")
                return False

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É: {e}")
            return False

    # ============================================================================
    # –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    # ============================================================================

    def clear_stopped_chats_file(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            profile_folder = Path(self.profile_data['folder_path'])
            stopped_chats_file = profile_folder / "–û—Å—Ç–∞–Ω–æ–≤–∫–∞_—á–∞—Ç–∞.txt"

            if stopped_chats_file.exists():
                # –ß–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    with open(stopped_chats_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                    if content:
                        lines = [line for line in content.split('\n') if line.strip() and 'https://t.me/' in line]
                        if lines:
                            logger.info(
                                f"[{self.profile_name}] üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å {len(lines)} –∑–∞–ø–∏—Å—è–º–∏")
                except:
                    pass

            else:
                logger.info(f"[{self.profile_name}] üìÑ –§–∞–π–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")

    def record_stopped_chat(self, chat_link: str, reason: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–∞—Ç –≤ —Ñ–∞–π–ª"""
        try:
            profile_folder = Path(self.profile_data['folder_path'])
            stopped_chats_file = profile_folder / "–û—Å—Ç–∞–Ω–æ–≤–∫–∞_—á–∞—Ç–∞.txt"

            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            record_line = f"[{current_time}] {chat_link} - {reason}\n"

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ñ–∞–π–ª
            with open(stopped_chats_file, 'a', encoding='utf-8') as f:
                f.write(record_line)

            logger.debug(f"[{self.profile_name}] üìù –ó–ê–ü–ò–°–ê–ù –û–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –ß–ê–¢: {chat_link}")
            logger.debug(f"[{self.profile_name}] üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")

    def _check_account_error_limits(self, account_name: str, error_type: str) -> bool:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º AccountErrorManager"""
        return self.error_manager.check_error_limits(account_name, error_type)

    def _mark_account_as_processed(self, account_name: str, reason: str):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º AccountErrorManager"""
        self.error_manager.mark_account_as_processed(account_name, reason)

    def _update_account_status_in_manager_sync(self, account_name: str, new_status: str):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º AccountErrorManager"""
        self.error_manager.update_account_status_in_manager_sync(account_name, new_status)

    def _save_users_progress_to_file(self):
        """–£–ë–†–ê–ù–û - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, –≤—Å–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        pass

    def _load_user_statuses(self):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º ProgressManager"""
        self.progress_manager.load_user_statuses()

    def _save_user_statuses(self):
        """–£–ë–†–ê–ù–û - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, –≤—Å–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        pass

    def _generate_final_report(self):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º ReportGenerator"""
        self.report_generator.generate_final_report()

    # ============================================================================
    # –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–¶–ï–°–°–ê (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ)
    # ============================================================================

    def get_fresh_accounts(self, module_name: str, count: int) -> List:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ò —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ"""
        try:
            logger.debug(f"[{self.profile_name}] üéØ –ó–∞–ø—Ä–æ—Å: {count}, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {len(self.processed_accounts)}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            request_count = min(count * 2, 100)
            accounts = self.account_manager.get_free_accounts(module_name, request_count)

            if not accounts:
                free_count = self.account_manager.get_free_accounts_count()
                logger.warning(f"[{self.profile_name}] ‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°–≤–æ–±–æ–¥–Ω—ã—Ö: {free_count}")
                return []

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
            fresh_accounts = []
            for account_data in accounts:
                if account_data.name not in self.processed_accounts:
                    fresh_accounts.append(account_data)
                    if len(fresh_accounts) >= count:
                        break
                else:
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–π
                    try:
                        self.account_manager.release_account(account_data.name, module_name)
                    except Exception:
                        pass

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–∏—à–Ω–∏–µ
            for i in range(len(fresh_accounts), len(accounts)):
                try:
                    self.account_manager.release_account(accounts[i].name, module_name)
                except Exception:
                    pass

            if fresh_accounts:
                logger.debug(f"[{self.profile_name}] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(fresh_accounts)} —Å–≤–µ–∂–∏—Ö")
            else:
                logger.error(f"[{self.profile_name}] ‚ùå –í—Å–µ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω—ã!")

            return fresh_accounts

        except Exception as e:
            logger.error(f"[{self.profile_name}] üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []

    def check_accounts_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            free_count = self.account_manager.get_free_accounts_count()
            estimated_available = max(0, free_count - len(self.processed_accounts))
            return estimated_available > 0
        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return False

    def _assign_admins_to_chats(self):
        """üî• –û–ë–ù–û–í–õ–ï–ù–û: –ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
        chat_links = []
        temp_chats = []
        while not self.chat_queue.empty():
            chat = self.chat_queue.get_nowait()
            chat_links.append(chat)
            temp_chats.append(chat)
        for chat in temp_chats:
            self.chat_queue.put(chat)

        if not chat_links:
            logger.error(f"[{self.profile_name}] –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤")
            return False

        if len(self.available_admins) < len(chat_links):
            logger.error(
                f"[{self.profile_name}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–æ–≤: {len(self.available_admins)} –¥–ª—è {len(chat_links)} —á–∞—Ç–æ–≤")
            return False

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
        profile_folder = Path(self.profile_data['folder_path'])
        admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"

        for i, chat_link in enumerate(chat_links):
            admin_name = self.available_admins[i]
            chat_admin = ChatAdmin(
                name=admin_name,
                session_path=admins_folder / f"{admin_name}.session",
                json_path=admins_folder / f"{admin_name}.json"
            )
            self.chat_admins[chat_link] = chat_admin
            logger.success(f"[{self.profile_name}] –ß–∞—Ç {chat_link} ‚Üí –ê–¥–º–∏–Ω {admin_name}")

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        for chat_link in self.chat_admins.keys():
            self.chat_command_queues[chat_link] = queue.Queue()

        logger.info(
            f"[{self.profile_name}] üìä –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {len(self.chat_admins)} –∞–¥–º–∏–Ω–æ–≤, —Ä–µ–∑–µ—Ä–≤: {len(self.available_admins) - len(self.chat_admins)}")
        return True

    def _run_inviting(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        logger.success(f"[{self.profile_name}] –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")

        if not self.bot_token or not self.available_admins:
            logger.error(f"[{self.profile_name}] –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç –∏–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤")
            return

        self._load_user_statuses()

        try:
            asyncio.run(self._async_run_inviting())
        except Exception as e:
            logger.error(f"[{self.profile_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.is_running = False
            self.finished_at = datetime.now()

            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã - –æ–Ω–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã)
            total_processed = len(self.processed_users)
            successful_invites = sum(1 for user in self.processed_users.values() if user.status == UserStatus.INVITED)
            privacy_restricted = sum(1 for user in self.processed_users.values() if user.status == UserStatus.PRIVACY)
            spam_blocks = sum(1 for user in self.processed_users.values() if user.status == UserStatus.SPAM_BLOCK)
            not_found = sum(1 for user in self.processed_users.values() if user.status == UserStatus.NOT_FOUND)
            already_in = sum(1 for user in self.processed_users.values() if user.status == UserStatus.ALREADY_IN)
            errors = sum(1 for user in self.processed_users.values() if user.status == UserStatus.ERROR)

            success_rate = (successful_invites / total_processed * 100) if total_processed > 0 else 0

            logger.success(f"")
            logger.success(f"üéØ [{self.profile_name}] –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.success(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {successful_invites} —á–µ–ª.")
            logger.success(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {privacy_restricted} —á–µ–ª.")
            logger.success(f"üö´ –°–ø–∞–º-–±–ª–æ–∫–∏: {spam_blocks} —á–µ–ª.")
            logger.success(f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found} —á–µ–ª.")
            logger.success(f"üë• –£–∂–µ –≤ —á–∞—Ç–∞—Ö: {already_in} —á–µ–ª.")
            logger.success(f"‚ùå –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏: {errors} —á–µ–ª.")
            logger.success(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
            logger.success(f"")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –ø–∞–ø–∫–µ –û—Ç—á–µ—Ç—ã/
            self._generate_final_report()

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            self.realtime_logger.finalize_report(total_processed, successful_invites)

    async def _start_chat_processors(self):
        """üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞"""
        for chat_link in self.chat_admins.keys():
            processor = asyncio.create_task(
                self._process_chat_commands(chat_link)
            )
            self.chat_processors[chat_link] = processor
            admin_name = self.chat_admins[chat_link].name
            logger.success(
                f"[{self.profile_name}] üöÄ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è —á–∞—Ç–∞: {chat_link} (–ê–¥–º–∏–Ω: {admin_name})")

    async def _process_chat_commands(self, chat_link: str):
        """üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        chat_admin = self.chat_admins.get(chat_link)
        if not chat_admin:
            logger.error(f"[{self.profile_name}] –ê–¥–º–∏–Ω –¥–ª—è —á–∞—Ç–∞ {chat_link} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        logger.info(f"[{self.profile_name}] üöÄ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —á–∞—Ç–∞: {chat_link}")
        logger.info(f"[{self.profile_name}] üë®‚Äçüíº –ê–¥–º–∏–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_admin.name}")

        while not self.stop_flag.is_set():
            try:
                # üî• –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¢–û–õ–¨–ö–û —ç—Ç–æ–≥–æ —á–∞—Ç–∞!
                chat_queue = self.chat_command_queues[chat_link]

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 10 –∫–æ–º–∞–Ω–¥ –∑–∞ —Ä–∞–∑ –¥–ª—è –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏—è
                commands_processed = 0
                while commands_processed < 20:
                    try:
                        command = chat_queue.get_nowait()

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≠–¢–û–ì–û —á–∞—Ç–∞ —Å –ï–ì–û –∞–¥–º–∏–Ω–æ–º
                        await self._execute_chat_command(command, chat_link, chat_admin)
                        commands_processed += 1

                    except queue.Empty:
                        break

                # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
                await asyncio.sleep(0.01)

            except Exception as e:
                logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {chat_link}: {e}")
                await asyncio.sleep(1)

        logger.info(f"[{self.profile_name}] üõë –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞: {chat_link}")

    async def _execute_chat_command(self, command: AdminCommand, chat_link: str, chat_admin):
        """üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            if not chat_admin.is_ready:
                logger.error(f"[{self.profile_name}] ‚ùå –ê–¥–º–∏–Ω {chat_admin.name} –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_link}")
                if command.response_queue:
                    command.response_queue.put(False)
                return

            if command.action == "GRANT_RIGHTS":
                from .admin_rights_manager import grant_worker_rights_directly
                chat_entity = await chat_admin.account.client.get_entity(command.chat_link)
                success = await grant_worker_rights_directly(
                    main_admin=chat_admin.account,
                    chat_entity=chat_entity,
                    worker_user_id=command.worker_user_id,
                    worker_user_access_hash=command.worker_access_hash,
                    worker_name=command.worker_name,
                    worker_username=command.username,
                    chat_link=chat_link
                )

                if success == "TOO_MANY_ADMINS":
                    logger.error(f"[{self.profile_name}] üëë‚ùå –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ê–î–ú–ò–ù–û–í –≤ —á–∞—Ç–µ {chat_link}")
                    command.response_queue.put("TOO_MANY_ADMINS")
                elif success == True:
                    command.response_queue.put(True)
                else:
                    logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≤–æ—Ä–∫–µ—Ä—É {command.worker_name}")
                    command.response_queue.put(False)

            elif command.action == "REVOKE_RIGHTS":
                from .admin_rights_manager import revoke_worker_rights_directly
                chat_entity = await chat_admin.account.client.get_entity(command.chat_link)
                await revoke_worker_rights_directly(
                    main_admin_client=chat_admin.account.client,
                    chat_entity=chat_entity,
                    worker_user_id=command.worker_user_id,
                    worker_name=command.worker_name,
                    worker_username=command.username,
                )
                command.response_queue.put(True)

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command.action} –≤ —á–∞—Ç–µ {chat_link}: {e}")
            if command.response_queue:
                command.response_queue.put(False)

    async def _async_run_inviting(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
        try:
            if not await self._init_bot():
                return
            if not await self._setup_bot():
                return
            if not self._assign_admins_to_chats():
                return
            if not await self._setup_chat_admins():
                return

            # üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∫–æ–º–∞–Ω–¥
            await self._start_chat_processors()

            # üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await self._start_bot_command_processor()

            if not await self._prepare_admins_in_chats():
                return
            await self._main_work_loop()
        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞: {e}")
        finally:
            await self._cleanup()

    async def _init_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.bot_manager = BotManager(bot_token=self.bot_token, proxy_url=None)
            if not await self.bot_manager.connect():
                return False
            self.admin_rights_manager = AdminRightsManager(bot_manager=self.bot_manager)
            return True
        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            return False

    async def _setup_bot(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        chat_links = []
        temp_chats = []
        while not self.chat_queue.empty():
            chat = self.chat_queue.get_nowait()
            chat_links.append(chat)
            temp_chats.append(chat)
        for chat in temp_chats:
            self.chat_queue.put(chat)

        if not chat_links:
            return False

        setup_needed = []
        for chat in chat_links:
            is_admin = await self.bot_manager.check_bot_admin_status(chat)
            if not is_admin:
                setup_needed.append(chat)
                logger.warning(f"[{self.profile_name}] –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {chat}")
            else:
                logger.success(f"[{self.profile_name}] –ë–æ—Ç –≥–æ—Ç–æ–≤ –≤ —á–∞—Ç–µ: {chat}")

        if setup_needed:
            await asyncio.sleep(60)

        return True

    def _get_free_admin(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞"""
        used_admins = {ca.name for ca in self.chat_admins.values()}

        for admin_name in self.available_admins:
            if admin_name not in used_admins and admin_name not in self.failed_admins:
                return admin_name
        return None

    def _mark_admin_failed(self, admin_name: str, reason: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ"""
        self.failed_admins.add(admin_name)
        logger.error(f"[{self.profile_name}] ‚ùå –ê–¥–º–∏–Ω {admin_name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π: {reason}")

    async def _try_replace_failed_admin(self, chat_link: str, failed_admin_name: str, reason: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞"""
        try:
            logger.warning(f"[{self.profile_name}] üîÑ –ó–∞–º–µ–Ω—è–µ–º –∞–¥–º–∏–Ω–∞ {failed_admin_name} –¥–ª—è {chat_link}")

            # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞
            old_admin = self.chat_admins[chat_link]
            if old_admin.account:
                try:
                    await old_admin.account.disconnect()
                except:
                    pass

            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            new_admin_name = self._get_free_admin()
            if not new_admin_name:
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã!")
                return False

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            profile_folder = Path(self.profile_data['folder_path'])
            admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"

            new_chat_admin = ChatAdmin(
                name=new_admin_name,
                session_path=admins_folder / f"{new_admin_name}.session",
                json_path=admins_folder / f"{new_admin_name}.json"
            )

            # –ó–∞–º–µ–Ω—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ
            self.chat_admins[chat_link] = new_chat_admin
            self._mark_admin_failed(failed_admin_name, reason)

            logger.success(f"[{self.profile_name}] ‚úÖ –ó–∞–º–µ–Ω–µ–Ω: {failed_admin_name} ‚Üí {new_admin_name}")
            return True

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞: {e}")
            return False

    async def _setup_chat_admins(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞"""
        try:
            for chat_link, chat_admin in self.chat_admins.items():
                logger.info(f"[{self.profile_name}] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∞ {chat_admin.name} –¥–ª—è —á–∞—Ç–∞ {chat_link}")

                if not chat_admin.session_path.exists() or not chat_admin.json_path.exists():
                    logger.error(f"[{self.profile_name}] –§–∞–π–ª—ã –∞–¥–º–∏–Ω–∞ {chat_admin.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return False

                from src.accounts.impl.account import Account
                chat_admin.account = Account(
                    session_path=chat_admin.session_path,
                    json_path=chat_admin.json_path
                )
                await chat_admin.account.create_client()

                if not await chat_admin.account.connect():
                    logger.error(f"[{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ {chat_admin.name}")
                    return False

                if not await chat_admin.account.client.is_user_authorized():
                    logger.error(f"[{self.profile_name}] –ê–¥–º–∏–Ω {chat_admin.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return False

                me = await chat_admin.account.client.get_me()
                logger.success(
                    f"[{self.profile_name}] –ê–¥–º–∏–Ω {chat_admin.name} –ø–æ–¥–∫–ª—é—á–µ–Ω: {me.first_name} (@{me.username or '–±–µ–∑ username'})")

            return True

        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
            return False

    async def _prepare_admins_in_chats(self) -> bool:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –µ–≥–æ —á–∞—Ç–µ"""
        for chat_link, chat_admin in self.chat_admins.items():
            logger.info(f"[{self.profile_name}] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∞ {chat_admin.name} –≤ —á–∞—Ç–µ {chat_link}")

            success = await ensure_main_admin_ready_in_chat(
                main_admin_account=chat_admin.account,
                admin_rights_manager=self.admin_rights_manager,
                chat_link=chat_link,
                chat_admin=chat_admin
            )

            if success:
                chat_admin.is_ready = True
                self.ready_chats.add(chat_link)
                logger.success(f"[{self.profile_name}] –ê–¥–º–∏–Ω {chat_admin.name} –≥–æ—Ç–æ–≤ –≤ —á–∞—Ç–µ: {chat_link}")
            else:
                logger.error(
                    f"[{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ {chat_admin.name} –≤ —á–∞—Ç–µ: {chat_link}")

        if not self.ready_chats:
            logger.error(f"[{self.profile_name}] –ù–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω –Ω–µ –≥–æ—Ç–æ–≤! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—É.")
            return False

        logger.success(f"[{self.profile_name}] –ì–æ—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(self.ready_chats)} –∏–∑ {len(self.chat_admins)}")
        return True

    async def _main_work_loop(self):
        """üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ - —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —á–∞—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if self.config.delay_after_start > 0:
            await asyncio.sleep(self.config.delay_after_start)

        await self._start_chats()

        if not self.chat_threads:
            logger.error(f"[{self.profile_name}] –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–æ–≤!")
            return

        # –§–õ–ê–ì –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        work_finished = False

        while not self.stop_flag.is_set() and not work_finished:
            try:
                # üî• –£–ë–†–ê–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (—Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —á–∞—Ç —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)
                # üî• –û–°–¢–ê–ï–¢–°–Ø: –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–æ–≤

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
                alive_threads = [t for t in self.chat_threads if t.is_alive()]

                if not alive_threads:
                    # –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å - –ª–æ–≥–∏—Ä—É–µ–º –û–î–ò–ù –†–ê–ó –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    logger.info(f"üéØ [{self.profile_name}] –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - —Ä–∞–±–æ—Ç–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
                    work_finished = True  # –ö–†–ò–¢–ò–ß–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    break

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ò –Ω–µ—Ç –∂–∏–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
                if self.user_queue.empty() and not alive_threads:
                    logger.info(f"üéØ [{self.profile_name}] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∂–∏–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É!")
                    work_finished = True
                    break

                await asyncio.sleep(0.1)  # üî• –ë–´–°–¢–†–ï–ï: –±—ã–ª–æ 0.05

            except Exception as e:
                logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
                await asyncio.sleep(1)

        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        logger.info(f"[{self.profile_name}] –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Ç–æ–∫–∏...")

        for thread in self.chat_threads:
            if thread.is_alive():
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    self.stop_flag.set()
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    thread.join(timeout=400)

                    # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ –∂–∏–≤ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    if thread.is_alive():
                        logger.warning(
                            f"[{self.profile_name}] –ü–æ—Ç–æ–∫ {thread.name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
                        # –í Python –Ω–µ—Ç —Å–ø–æ—Å–æ–±–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ç—å –ø–æ—Ç–æ–∫, –Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                except Exception as e:
                    logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ {thread.name}: {e}")

        try:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            released_count = self.account_manager.release_all_module_accounts(f"admin_inviter_{self.profile_name}")
            if released_count > 0:
                logger.info(f"[{self.profile_name}] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {released_count}")
        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

        logger.success(f"[{self.profile_name}] ‚úÖ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    async def _start_chats(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–æ–≤"""
        ready_chat_list = list(self.ready_chats)

        if not ready_chat_list:
            logger.error(f"[{self.profile_name}] –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return

        for i, chat_link in enumerate(ready_chat_list, 1):
            try:
                thread = ChatWorkerThread(chat_id=i, chat_link=chat_link, parent=self)
                thread.start()
                self.chat_threads.append(thread)
                admin_name = self.chat_admins.get(chat_link, ChatAdmin('–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')).name
                logger.success(
                    f"[{self.profile_name}]-[–ü–æ—Ç–æ–∫-{i}] –ó–∞–ø—É—â–µ–Ω —á–∞—Ç: {chat_link} (–ê–¥–º–∏–Ω: {admin_name})")
            except Exception as e:
                logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–∞ {chat_link}: {e}")

    async def _cleanup(self):
        """üî• –£–õ–£–ß–®–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:

            # üî• –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            if self.bot_command_processor_task and not self.bot_command_processor_task.done():
                logger.info(f"[{self.profile_name}] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
                self.bot_command_processor_task.cancel()
                try:
                    await asyncio.wait_for(self.bot_command_processor_task, timeout=400)
                except (asyncio.TimeoutError, asyncio.CancelledError):
                    logger.debug(f"[{self.profile_name}] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥")
                logger.success(f"[{self.profile_name}] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            while not self.bot_command_queue.empty():
                try:
                    command = self.bot_command_queue.get_nowait()
                    if command.get("response_queue"):
                        command["response_queue"].put(False)
                except queue.Empty:
                    break

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∫–æ–º–∞–Ω–¥
            logger.debug(f"[{self.profile_name}] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∫–æ–º–∞–Ω–¥...")

            for chat_link, processor in self.chat_processors.items():
                if not processor.done():
                    processor.cancel()
                    try:
                        await asyncio.wait_for(processor, timeout=400)
                    except (asyncio.TimeoutError, asyncio.CancelledError):
                        logger.debug(
                            f"[{self.profile_name}] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —á–∞—Ç–∞ {chat_link} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥")

                    logger.success(f"[{self.profile_name}] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞: {chat_link}")

            # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
            for chat_link, queue_obj in self.chat_command_queues.items():
                while not queue_obj.empty():
                    try:
                        command = queue_obj.get_nowait()
                        if command.response_queue:
                            command.response_queue.put(False)  # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
                    except queue.Empty:
                        break
                logger.debug(f"[{self.profile_name}] üßπ –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞: {chat_link}")

            try:
                module_name = f"admin_inviter_{self.profile_name}"
                released_count = self.account_manager.release_all_module_accounts(module_name)
            except Exception as e:
                logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

            for chat_link, chat_admin in self.chat_admins.items():
                if chat_admin.account:
                    try:
                        if chat_admin.account.client and chat_admin.account.client.is_connected():
                            await chat_admin.account.disconnect()
                            logger.info(
                                f"[{self.profile_name}] üîå –û—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω {chat_admin.name} –¥–ª—è —á–∞—Ç–∞ {chat_link}")
                    except Exception as e:
                        logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {chat_admin.name}: {e}")

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤ _cleanup: {e}")

    def graceful_stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤"""
        if self.shutdown_in_progress:
            logger.warning(f"[{self.profile_name}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
            return

        self.shutdown_in_progress = True
        logger.info(f"[{self.profile_name}] üõë –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ñ–∏–ª—è...")

        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_flag.set()
        logger.info(f"[{self.profile_name}] üö© –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–æ–≤
        if self.chat_threads:
            logger.info(f"[{self.profile_name}] ‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(self.chat_threads)} –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–æ–≤...")

            for i, chat_thread in enumerate(self.chat_threads, 1):
                if chat_thread.is_alive():
                    logger.info(
                        f"[{self.profile_name}] ‚è≥ –û–∂–∏–¥–∞–µ–º —á–∞—Ç-–ø–æ—Ç–æ–∫ {i}/{len(self.chat_threads)}: {chat_thread.chat_link}")
                    chat_thread.join(timeout=120)  # –î–∞–µ–º 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç

                    if chat_thread.is_alive():
                        logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ß–∞—Ç-–ø–æ—Ç–æ–∫ {i} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 2 –º–∏–Ω—É—Ç—ã")
                    else:
                        logger.success(f"[{self.profile_name}] ‚úÖ –ß–∞—Ç-–ø–æ—Ç–æ–∫ {i} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            logger.info(f"[{self.profile_name}] ‚ÑπÔ∏è –ù–µ—Ç —á–∞—Ç-–ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è")

        logger.success(f"[{self.profile_name}] ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def update_account_stats(self, account_name: str, success: bool = False, spam_block: bool = False,
                             error: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if account_name not in self.account_stats:
            self.account_stats[account_name] = AccountStats(name=account_name)

        stats = self.account_stats[account_name]

        if success:
            stats.invites += 1
            self.total_success += 1
            if (self.config.success_per_account > 0 and stats.invites >= self.config.success_per_account):
                stats.status = 'finished'
                self.finished_accounts.add(account_name)
                self.finished_successfully_accounts.add(account_name)
                self.account_finish_times[account_name] = datetime.now()
                self._mark_account_as_processed(account_name, "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—Ö–æ–≤")
                self._update_account_status_in_manager_sync(account_name, "finished")

                from .utils import mark_account_as_finished
                mark_account_as_finished(self, account_name)

        if error:
            stats.errors += 1
            self.total_errors += 1

        if spam_block:
            stats.spam_blocks += 1
            if stats.spam_blocks >= self.config.acc_spam_limit:
                stats.status = 'spam_blocked'
                self.frozen_accounts.add(account_name)

        self.total_processed += 1