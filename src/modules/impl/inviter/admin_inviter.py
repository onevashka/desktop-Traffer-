# src/modules/impl/inviter/admin_inviter.py
"""
–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–æ–≤
–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ utils
"""
import traceback
import threading
import asyncio
import queue
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger
from pathlib import Path

from .base_inviter import BaseInviterProcess
from .bot_manager import BotManager
from .admin_rights_manager import AdminRightsManager
from .account_mover import AccountMover
from .utils import (
    get_fresh_accounts, clean_expired_accounts, load_main_admin_account,
    initialize_worker_clients, check_chat_limits, check_account_limits,
    mark_account_as_finished, print_final_stats, release_worker_accounts,
    determine_account_problem
)
from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats

# –ò–º–ø–æ—Ä—Ç—ã Telethon –¥–ª—è –æ—à–∏–±–æ–∫
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


class AdminInviterProcess(BaseInviterProcess):
    """–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, profile_name: str, profile_data: Dict, account_manager):
        super().__init__(profile_name, profile_data, account_manager)

        profile_folder = Path(profile_data['folder_path'])
        from .data_loader import InviterDataLoader
        loader = InviterDataLoader(profile_folder)
        self.bot_token = loader._load_bot_token()

        # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"
        self.main_admin_account_name = None

        if admins_folder.exists():
            session_files = list(admins_folder.glob("*.session"))
            if session_files:
                self.main_admin_account_name = session_files[0].stem
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã: {self.main_admin_account_name}")
            else:
                logger.error(f"‚ùå –ù–µ—Ç .session —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã –¥–ª—è {profile_name}")
        else:
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ –ê–¥–º–∏–Ω—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {profile_name}")

        if not self.main_admin_account_name:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –¥–ª—è {profile_name}")
            logger.error("üí° –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–∞–ø–∫—É –ê–¥–º–∏–Ω—ã —á–µ—Ä–µ–∑ GUI")

        # –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.account_mover = AccountMover(profile_folder)

        # –ù–û–í–û–ï: –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.blocked_accounts = set()

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.bot_manager: Optional[BotManager] = None
        self.admin_rights_manager: Optional[AdminRightsManager] = None

        # –ü–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        self.chat_threads = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        self.account_stats: Dict[str, AccountStats] = {}
        self.total_success = 0
        self.total_errors = 0
        self.total_processed = 0
        self.frozen_accounts = set()
        self.finished_accounts = set()
        self.account_finish_times: Dict[str, datetime] = {}
        self.initial_chats_count = 0

        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä –¥–ª—è {profile_name}")
        if self.main_admin_account_name:
            logger.info(f"   –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: {self.main_admin_account_name}")

        self.main_loop = None

    def _run_inviting(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}] ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")

        if not self.bot_token:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return

        if not self.main_admin_account_name:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!")
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            asyncio.run(self._async_run_inviting())
        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.is_running = False
            self.finished_at = datetime.now()

    async def _async_run_inviting(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π event loop
            self.main_loop = asyncio.get_event_loop()
            logger.debug(f"[{self.profile_name}] üîÑ –û—Å–Ω–æ–≤–Ω–æ–π loop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {id(self.main_loop)}")

            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            if not await self._initialize_bot():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

            # 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            if not await self._user_interaction():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
            await self._start_chat_threads()

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            logger.error(f"[{self.profile_name}] üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.bot_manager:
                await self.bot_manager.disconnect()

    async def _initialize_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            logger.info(f"[{self.profile_name}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            self.bot_manager = BotManager(
                bot_token=self.bot_token,
                proxy_url=None
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
            if not await self.bot_manager.connect():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
                return False

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
            self.admin_rights_manager = AdminRightsManager(
                bot_manager=self.bot_manager
            )

            logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_manager.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

    async def _user_interaction(self) -> bool:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chat_links = []
            temp_queue = []

            while not self.chat_queue.empty():
                chat = self.chat_queue.get_nowait()
                chat_links.append(chat)
                temp_queue.append(chat)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
            for chat in temp_queue:
                self.chat_queue.put(chat)

            if not chat_links:
                logger.error("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            logger.info(f"=" * 70)
            logger.info(f"ü§ñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ë–û–¢–ê")
            logger.info(f"=" * 70)
            logger.info(f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @{self.bot_manager.bot_username} –≤ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:")

            for i, chat in enumerate(chat_links, 1):
                logger.info(f"   {i}. {chat}")

            logger.info(f"2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö")
            logger.info(f"   (–ü—Ä–∞–≤–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏)")
            logger.info(f"3. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            logger.info(f"=" * 70)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö...")
            setup_needed = []

            for chat in chat_links:
                is_admin = await self.bot_manager.check_bot_admin_status(chat)
                if not is_admin:
                    setup_needed.append(chat)
                    logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤: {chat}")
                else:
                    logger.info(f"‚úÖ –ë–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω –≤: {chat}")

            if setup_needed:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ {len(setup_needed)} —á–∞—Ç–∞—Ö...")
                await asyncio.sleep(60)

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                logger.info(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
                still_need_setup = []

                for chat in setup_needed:
                    is_admin = await self.bot_manager.check_bot_admin_status(chat)
                    if not is_admin:
                        still_need_setup.append(chat)

                if still_need_setup:
                    logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ {len(still_need_setup)} —á–∞—Ç–∞—Ö:")
                    for chat in still_need_setup:
                        logger.warning(f"   - {chat}")
                    logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏")

            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return False

    async def _start_chat_threads(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤"""
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if self.config.delay_after_start > 0:
            logger.info(f"[{self.profile_name}] –ó–∞–¥–µ—Ä–∂–∫–∞ {self.config.delay_after_start} —Å–µ–∫...")
            self.stop_flag.wait(self.config.delay_after_start)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_chats = self.chat_queue.qsize()
        self.initial_chats_count = total_chats
        logger.info(f"[{self.profile_name}] –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_chats}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        total_invites_needed = total_chats * self.config.success_per_chat if self.config.success_per_chat > 0 else 999999
        logger.info(f"[{self.profile_name}] –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –≤—Å–µ–≥–æ: {total_invites_needed}")

        if self.config.success_per_account > 0:
            accounts_needed = (
                                          total_invites_needed + self.config.success_per_account - 1) // self.config.success_per_account
            logger.info(f"[{self.profile_name}] –†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_needed}")
        else:
            accounts_needed = total_chats * self.config.threads_per_chat
            logger.info(f"[{self.profile_name}] –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º {accounts_needed} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        available_accounts = self.account_manager.get_free_accounts_count()
        logger.info(f"[{self.profile_name}] –î–æ—Å—Ç—É–ø–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {available_accounts}")

        initial_accounts_to_request = min(accounts_needed, available_accounts,
                                          self.config.threads_per_chat * total_chats)

        if initial_accounts_to_request < accounts_needed:
            logger.warning(
                f"[{self.profile_name}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {accounts_needed}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}")

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if not self.main_admin_account_name:
            logger.error(f"[{self.profile_name}] ‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        main_admin_account = load_main_admin_account(self)
        if not main_admin_account:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
            return

        logger.info(f"[{self.profile_name}] –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {self.main_admin_account_name}")

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü–æ–ª—É—á–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
        module_name = f"admin_inviter_{self.profile_name}"
        allocated_worker_accounts = get_fresh_accounts(self, module_name, initial_accounts_to_request)

        if not allocated_worker_accounts:
            logger.error(f"[{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç—ã")
            return

        logger.info(f"[{self.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: {len(allocated_worker_accounts)}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        chat_index = 0
        worker_index = 0

        while self.chat_queue.qsize() > 0 and not self.stop_flag.is_set():
            try:
                chat = self.chat_queue.get_nowait()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                if worker_index >= len(allocated_worker_accounts):
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                    additional_accounts = get_fresh_accounts(self, module_name, self.config.threads_per_chat)

                    if additional_accounts:
                        allocated_worker_accounts.extend(additional_accounts)
                        logger.info(
                            f"[{self.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {len(additional_accounts)} –≤–æ—Ä–∫–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    else:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                        self.chat_queue.put(chat)
                        logger.warning(f"[{self.profile_name}] –ù–µ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat}, –æ—Ç–ª–æ–∂–µ–Ω")
                        break

                # –í—ã–¥–µ–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                chat_worker_accounts = []
                workers_for_chat = min(self.config.threads_per_chat, len(allocated_worker_accounts) - worker_index)

                for j in range(workers_for_chat):
                    if worker_index < len(allocated_worker_accounts):
                        chat_worker_accounts.append(allocated_worker_accounts[worker_index])
                        worker_index += 1

                if not chat_worker_accounts:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
                    self.chat_queue.put(chat)
                    logger.warning(f"[{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat}")
                    break

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
                thread = AdminChatWorkerThread(
                    chat_id=chat_index + 1,
                    chat_link=chat,
                    main_admin_account=main_admin_account,
                    worker_accounts=chat_worker_accounts,
                    parent=self,
                    profile_name=self.profile_name,
                    bot_token=self.bot_token,
                    account_mover=self.account_mover
                )
                thread.start()
                self.chat_threads.append(thread)
                chat_index += 1

                logger.info(
                    f"[{self.profile_name}] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞ #{chat_index}: {chat} (–≤–æ—Ä–∫–µ—Ä–æ–≤: {len(chat_worker_accounts)})")

            except queue.Empty:
                break

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        self._wait_for_threads()

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_final_stats(self)

    def _wait_for_threads(self):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        logger.info(f"[{self.profile_name}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

        while not self.stop_flag.is_set():
            alive = [t for t in self.chat_threads if t.is_alive()]

            if not alive:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                break

            if self.user_queue.empty() and self.total_processed > 0:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

            self.stop_flag.wait(10)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.chat_threads:
            if thread.is_alive():
                thread.join(timeout=30)

    def update_account_stats(self, account_name: str, success: bool = False,
                             spam_block: bool = False, error: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã"""
        if account_name not in self.account_stats:
            self.account_stats[account_name] = AccountStats(name=account_name)

        stats = self.account_stats[account_name]

        if success:
            stats.invites += 1
            self.total_success += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–∏–º–∏—Ç–∞
            if self.config.success_per_account > 0 and stats.invites >= self.config.success_per_account:
                stats.status = 'finished'
                self.finished_accounts.add(account_name)
                self.account_finish_times[account_name] = datetime.now()
                logger.warning(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–∞–π—Ç–æ–≤: {stats.invites}")

                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                mark_account_as_finished(self, account_name)

        if error:
            stats.errors += 1
            self.total_errors += 1
        if spam_block:
            stats.spam_blocks += 1
            stats.consecutive_spam += 1

            if stats.spam_blocks >= self.config.acc_spam_limit:
                stats.status = 'spam_blocked'
                self.frozen_accounts.add(account_name)
                logger.error(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º")
        else:
            stats.consecutive_spam = 0

        self.total_processed += 1

    def handle_problematic_account(self, account_name: str, account_data, error: Exception) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –æ—Ç–∫–ª—é—á–∞–µ—Ç, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç, –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç
        –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            logger.error(f"üö® [{self.profile_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}")
            logger.error(f"   –û—à–∏–±–∫–∞: {error}")

            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
            problem_type = determine_account_problem(error)

            # 2. –û—Ç–∫–ª—é—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if account_data and hasattr(account_data, 'account'):
                try:
                    if hasattr(account_data.account, 'client') and account_data.account.client:
                        if account_data.account.client.is_connected():
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º loop
                            if self.main_loop:
                                future = asyncio.run_coroutine_threadsafe(
                                    account_data.account.disconnect(),
                                    self.main_loop
                                )
                                future.result(timeout=10)
                            logger.info(f"üîå [{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –æ—Ç–∫–ª—é—á–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [{self.profile_name}] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")

            # 3. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            module_name = f"admin_inviter_{self.profile_name}"
            self.account_manager.release_account(account_name, module_name)
            logger.info(f"üîì [{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")

            # 4. –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ AccountMover
            success = self.account_mover.move_account(account_name, problem_type)

            if success:
                logger.success(f"‚úÖ [{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É '{problem_type}'")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
                if problem_type == 'frozen':
                    self.frozen_accounts.add(account_name)

                return True  # –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            else:
                logger.error(f"‚ùå [{self.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account_name}")
                return False

        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
            return True  # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞


class AdminChatWorkerThread(threading.Thread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω–æ–π –≤–æ—Ä–∫–µ—Ä–æ–≤"""

    def __init__(self, chat_id: int, chat_link: str, main_admin_account,
                 worker_accounts: List, parent: AdminInviterProcess,
                 profile_name: str, bot_token: str, account_mover: AccountMover):
        super().__init__(name=f"AdminChat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.main_admin_account = main_admin_account
        self.main_admin_account_name = main_admin_account.name
        self.worker_accounts = worker_accounts
        self.parent = parent
        self.profile_name = profile_name
        self.bot_token = bot_token
        self.account_mover = account_mover

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.bot_manager = None
        self.admin_rights_manager = None
        self.main_loop = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        self.chat_success = 0
        self.chat_errors = 0
        self.chat_processed = 0

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.main_admin_has_rights = False
        self.chat_telegram_id = None
        self.chat_stop_reason = None
        self.stop_all_workers = False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            self.main_loop = loop

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(self._work())

        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}]-[AdminChat-{self.chat_id}] –û—à–∏–±–∫–∞: {e}")
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        finally:
            if loop:
                loop.close()

    async def _work(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º"""
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {len(self.worker_accounts)}")

        try:
            # 1. –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π bot manager
            if not await self._initialize_local_bot():
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç")
                return

            # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if not await self._setup_main_admin():
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
                return

            # 3. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏
            await self._work_with_workers_cyclically()

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ: {e}")
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        finally:
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await self._cleanup_main_admin()

            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç
            if self.bot_manager:
                await self.bot_manager.disconnect()

        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info(
            f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={self.chat_processed}, —É—Å–ø–µ—à–Ω–æ={self.chat_success}, –æ—à–∏–±–æ–∫={self.chat_errors}")

    async def _work_with_workers_cyclically(self):
        """–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ —Å –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π"""
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏")

        chat_completed = False
        active_workers = []
        active_workers_lock = threading.Lock()

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        await initialize_worker_clients(self.worker_accounts, self.parent)

        # –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ: –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º
        while not chat_completed and not self.parent.stop_flag.is_set():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
            worker_threads = []

            for i, account_data in enumerate(self.worker_accounts):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
                if account_data.name in self.parent.finished_accounts:
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –í–æ—Ä–∫–µ—Ä {account_data.name} —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                worker_thread = threading.Thread(
                    target=self._run_worker_in_thread,
                    args=(i + 1, account_data, active_workers, active_workers_lock),
                    name=f"AdminChat-{self.chat_link}-Worker-{i + 1}"
                )
                worker_thread.start()
                worker_threads.append(worker_thread)

            logger.info(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ó–∞–ø—É—â–µ–Ω–æ {len(worker_threads)} –ø–æ—Ç–æ–∫–æ–≤ –≤–æ—Ä–∫–µ—Ä–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            while not self.parent.stop_flag.is_set():
                await asyncio.sleep(2)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞
                if self.stop_all_workers:
                    logger.warning(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤. –ü—Ä–∏—á–∏–Ω–∞: {self.chat_stop_reason}")
                    chat_completed = True
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                with active_workers_lock:
                    still_working = len(active_workers)

                if still_working == 0:
                    logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")
                    break

                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if not check_chat_limits(self.parent, self.chat_success):
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞: {self.chat_success}")
                    chat_completed = True
                    break

                if self.parent.user_queue.empty():
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞")
                    await asyncio.sleep(5)
                    chat_completed = True
                    break

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Ä–∞–±–æ—Ç—É –≤–æ—Ä–∫–µ—Ä–æ–≤
            module_name = f"admin_inviter_{self.parent.profile_name}"
            release_worker_accounts(self.worker_accounts, module_name, self.parent.account_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É
            if chat_completed or self.stop_all_workers:
                break

            # –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            if not self.parent.user_queue.empty():
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")

                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
                new_worker_accounts = get_fresh_accounts(self.parent, module_name, self.parent.config.threads_per_chat)

                if not new_worker_accounts:
                    logger.warning(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")
                    chat_completed = True
                    break

                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
                await initialize_worker_clients(new_worker_accounts, self.parent)

                self.worker_accounts = new_worker_accounts
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {len(new_worker_accounts)}")

        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _run_worker_in_thread(self, worker_id: int, account_data, active_workers: list, lock: threading.Lock):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        with lock:
            active_workers.append(account_data.name)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –≤ loop —á–∞—Ç–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            future = asyncio.run_coroutine_threadsafe(
                self._run_worker(worker_id, account_data),
                self.main_loop
            )
            future.result()

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminWorker-{worker_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            with lock:
                if account_data.name in active_workers:
                    active_workers.remove(account_data.name)

    async def _run_worker(self, worker_id: int, account_data):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∑–∞–º–µ–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        worker_name = account_data.name
        worker_account = account_data.account

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}]-[Worker-{worker_id}] –ó–∞–ø—É—Å–∫ —Å –≤–æ—Ä–∫–µ—Ä–æ–º {worker_name}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç
            if not worker_account.client:
                logger.error(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(worker_name, account_data, Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω"))
                return

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if not await worker_account.connect():
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(worker_name, account_data, Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"))
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await worker_account.client.is_user_authorized():
                logger.error(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –í–æ—Ä–∫–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(worker_name, account_data, Exception("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"))
                await worker_account.disconnect()
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ
            try:
                me = await worker_account.client.get_me()
                logger.info(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {me.first_name} {me.last_name or ''}")
            except Exception as e:
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–∫–µ—Ä–µ: {e}")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(worker_name, account_data, e)
                await worker_account.disconnect()
                return

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
            join_result = await self._join_chat(worker_account, self.chat_link)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if join_result == "STOP_CHAT":
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —á–∞—Ç–∞. –ü—Ä–∏—á–∏–Ω–∞: {self.chat_stop_reason}")
                self.stop_all_workers = True
                await worker_account.disconnect()
                return
            elif join_result == "FROZEN_ACCOUNT":
                logger.error(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –í–æ—Ä–∫–µ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(worker_name, account_data, Exception("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω"))
                await worker_account.disconnect()
                return
            elif join_result != "SUCCESS":
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(worker_name, account_data,
                                                       Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É"))
                await worker_account.disconnect()
                return

            # –ü–æ–ª—É—á–∞–µ–º user_id –≤–æ—Ä–∫–µ—Ä–∞
            user_entity = await worker_account.client.get_entity('me')
            user_id = user_entity.id

            # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ –≤–æ—Ä–∫–µ—Ä—É
            rights_granted = await self.admin_rights_manager.grant_worker_rights(
                self.chat_link, user_id, worker_name
            )

            if not rights_granted:
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≤–æ—Ä–∫–µ—Ä—É")
                await worker_account.disconnect()
                return

            logger.info(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] ‚úÖ –í–æ—Ä–∫–µ—Ä –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞")

            invites_count = 0
            errors_count = 0

            # –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ò–ù–í–ê–ô–¢–ò–ù–ì–ê —Å –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            while not self.parent.stop_flag.is_set() and not self.stop_all_workers:
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞
                if not check_account_limits(self.parent, worker_name, invites_count):
                    logger.info(
                        f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –í–æ—Ä–∫–µ—Ä –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                    break

                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —á–∞—Ç–∞
                if not check_chat_limits(self.parent, self.chat_success):
                    logger.success(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.chat_success}")
                    break

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user = self.parent.user_queue.get_nowait()
                except queue.Empty:
                    logger.info(f"[{self.profile_name}]-[Worker-{worker_id}] –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
                    break

                # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    success = await self._invite_user(user, worker_account, worker_name, worker_id,
                                                      self.chat_link, self.chat_telegram_id)

                    if success:
                        invites_count += 1
                        self.chat_success += 1
                    else:
                        errors_count += 1

                    self.chat_processed += 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                    self.parent.update_account_stats(
                        worker_name,
                        success=success,
                        spam_block=(user.status == UserStatus.SPAM_BLOCK),
                        error=(not success)
                    )

                except (PeerFloodError, FloodWaitError, AuthKeyUnregisteredError, SessionRevokedError) as e:
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - —Å–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
                    logger.error(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.status = UserStatus.SPAM_BLOCK if 'flood' in str(e).lower() else UserStatus.ERROR
                    user.last_attempt = datetime.now()
                    user.error_message = str(e)
                    self.parent.processed_users[user.username] = user

                    # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                    self.parent.handle_problematic_account(worker_name, account_data, e)

                    logger.warning(
                        f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –í–æ—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏")
                    break

                except Exception as e:
                    # –û–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logger.error(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∞: {e}")
                    errors_count += 1
                    self.chat_processed += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
                if self.parent.config.delay_between > 0:
                    await asyncio.sleep(self.parent.config.delay_between)

            # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≤–æ—Ä–∫–µ—Ä–∞
            try:
                await self.admin_rights_manager.revoke_worker_rights(
                    self.chat_telegram_id, user_id, worker_name
                )
                logger.info(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] üîí –ü—Ä–∞–≤–∞ –≤–æ—Ä–∫–µ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"[{self.profile_name}]-[Worker-{worker_id}]-[{worker_name}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤: {e}")

            logger.info(
                f"[{self.profile_name}]-[Worker-{worker_id}] –í–æ—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–Ω–≤–∞–π—Ç–æ–≤: {invites_count}, –æ—à–∏–±–æ–∫: {errors_count}")

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[Worker-{worker_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ - —Å–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
            self.parent.handle_problematic_account(worker_name, account_data, e)

        finally:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
            try:
                await worker_account.disconnect()
            except:
                pass

    async def _initialize_local_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π bot manager –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")

            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π bot manager
            self.bot_manager = BotManager(
                bot_token=self.bot_token,
                proxy_url=None
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if not await self.bot_manager.connect():
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –±–æ—Ç—É")
                return False

            # –°–æ–∑–¥–∞–µ–º admin rights manager
            self.admin_rights_manager = AdminRightsManager(
                bot_manager=self.bot_manager
            )

            logger.info(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_manager.bot_username}")
            return True

        except Exception as e:
            logger.error(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
            return False

    async def _setup_main_admin(self) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: –∑–∞—Ö–æ–¥ –≤ —á–∞—Ç + –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –æ—Ç –±–æ—Ç–∞"""
        try:
            logger.info(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {self.main_admin_account_name}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.main_admin_account.client:
                await self.main_admin_account.create_client()

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if not await self.main_admin_account.connect():
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É")
                return False

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú UTILS: –ó–∞—Ö–æ–¥–∏–º –≤ —á–∞—Ç
            join_result = await self._join_chat(self.main_admin_account, self.chat_link)

            if join_result == "FROZEN_ACCOUNT":
                logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∑–∞–º–æ—Ä–æ–∂–µ–Ω")
                # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ –ø—Ä–æ–±–ª–µ–º–µ
                self.parent.handle_problematic_account(self.main_admin_account_name, None,
                                                       Exception("–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∑–∞–º–æ—Ä–æ–∂–µ–Ω"))
                return False
            elif join_result == "STOP_CHAT":
                logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            elif join_result != "SUCCESS":
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ —Å–º–æ–≥ –∑–∞–π—Ç–∏ –≤ —á–∞—Ç")
                return False

            # –ü–æ–ª—É—á–∞–µ–º user_id –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            user_entity = await self.main_admin_account.client.get_entity('me')
            user_id = user_entity.id

            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞ –¥–ª—è ID
            try:
                chat_entity = await self.main_admin_account.client.get_entity(self.chat_link)
                if hasattr(chat_entity, 'id'):
                    self.chat_telegram_id = chat_entity.id
                    logger.debug(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞: {self.chat_telegram_id}")
            except Exception as e:
                logger.warning(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞: {e}")

            # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
            logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîß –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É...")

            success = await self.admin_rights_manager.grant_main_admin_rights(
                self.chat_telegram_id, user_id, self.main_admin_account_name
            )

            if success:
                self.main_admin_has_rights = True
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞")
                return True
            else:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É")
                return False

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
            return False

    async def _cleanup_main_admin(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –∑–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        try:
            if self.main_admin_has_rights and self.admin_rights_manager:
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üßπ –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")

                await self.admin_rights_manager.revoke_main_admin_rights(self.chat_link)

                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ü—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã")
                self.main_admin_has_rights = False

            # –û—Ç–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if self.main_admin_account:
                try:
                    await self.main_admin_account.disconnect()
                    logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω")
                except Exception as e:
                    logger.warning(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")

                self.main_admin_account = None

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")

    async def _join_chat(self, account, chat_link: str):
        """–ó–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            result = await account.join(chat_link)

            if result == "ALREADY_PARTICIPANT":
                logger.info(f"[{self.profile_name}] –£–∂–µ –≤ —á–∞—Ç–µ {chat_link}")
                return "SUCCESS"

            elif result == "FROZEN_ACCOUNT":
                logger.error(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω")
                return "FROZEN_ACCOUNT"

            elif result == "CHAT_NOT_FOUND":
                logger.error(f"[{self.profile_name}] –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {chat_link}")
                self.chat_stop_reason = "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return "STOP_CHAT"

            elif result == "REQUEST_SENT":
                logger.warning(f"[{self.profile_name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {chat_link}")
                return False

            elif result == "FLOOD_WAIT":
                logger.warning(f"[{self.profile_name}] –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤ {chat_link}")
                return False

            elif isinstance(result, str) and result.startswith("ERROR:"):
                logger.error(f"‚ùå [{self.profile_name}] –û—à–∏–±–∫–∞: {result}")
                return False
            else:
                # –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å
                logger.info(f"[{self.profile_name}] {account.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {chat_link}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                if hasattr(result, 'id'):
                    self.chat_telegram_id = result.id

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if self.parent.config.delay_after_start > 0:
                    await asyncio.sleep(self.parent.config.delay_after_start)

                return "SUCCESS"

        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É {chat_link}: {e}")
            return False

    async def _invite_user(self, user: InviteUser, account, account_name: str, worker_id: int,
                           chat_link: str, chat_telegram_id: Optional[int]) -> bool:
        """–ò–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telethon"""
        client = account.client

        if not client or not client.is_connected():
            logger.error(f"‚ùå [{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        username = user.username
        if username.startswith('@'):
            username = username[1:]

        logger.info(
            f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å @{username} –≤ {chat_link}")

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤
            try:
                full_user = await client(GetFullUserRequest(username))
                old_common_chats = full_user.full_user.common_chats_count
            except (ValueError, TypeError, UsernameInvalidError, UsernameNotOccupiedError):
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                user.status = UserStatus.NOT_FOUND
                user.last_attempt = datetime.now()
                user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                self.parent.processed_users[username] = user
                return False

            # 1.5 –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —á–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            if chat_telegram_id and old_common_chats > 0:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º user entity
                    user_entity = await client.get_entity(username)

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—â–∏–µ —á–∞—Ç—ã
                    common_chats_result = await client(GetCommonChatsRequest(
                        user_id=user_entity,
                        max_id=0,
                        limit=100
                    ))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –Ω–∞—à —á–∞—Ç
                    for chat in common_chats_result.chats:
                        if hasattr(chat, 'id') and chat.id == chat_telegram_id:
                            logger.warning(
                                f"üë• [{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} —É–∂–µ –≤ —á–∞—Ç–µ! (–ß–∞—Ç: {chat_link})")
                            user.status = UserStatus.ALREADY_IN
                            user.last_attempt = datetime.now()
                            user.error_message = "–£–∂–µ –≤ —á–∞—Ç–µ"
                            self.parent.processed_users[username] = user
                            return False

                    logger.debug(
                        f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–ß–∞—Ç: {chat_link})")

                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–≤–∞–π—Ç
                    logger.debug(
                        f"‚ö†[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–∏–µ —á–∞—Ç—ã: {e}")

            # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            result = await client(InviteToChannelRequest(
                channel=chat_link,
                users=[username]
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ missing_invitees (–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å)
            if result.missing_invitees:
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.PRIVACY
                user.last_attempt = datetime.now()
                user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
                self.parent.processed_users[username] = user
                return False

            # 3. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏–ª—Å—è
            await asyncio.sleep(20)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

            full_user2 = await client(GetFullUserRequest(username))
            new_common_chats = full_user2.full_user.common_chats_count

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å - —Å–ø–∏—Å–∞–Ω–∏–µ
            if new_common_chats <= old_common_chats:
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å—Ä–∞–∑—É —Å–ø–∏—Å–∞–Ω (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.ERROR
                user.last_attempt = datetime.now()
                user.error_message = "–°–ø–∏—Å–∞–Ω–∏–µ"
                self.parent.processed_users[username] = user
                return False

            # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
            logger.success(
                f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! (–ß–∞—Ç: {chat_link})")
            user.status = UserStatus.INVITED
            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return True

        except (PeerFloodError, FloodWaitError) as e:
            if isinstance(e, FloodWaitError):
                wait_seconds = e.seconds
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} FloodWait: –∂–¥—É {wait_seconds} —Å–µ–∫.")
                await asyncio.sleep(wait_seconds)
            else:
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} –°–ø–∞–º–±–ª–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")

            user.status = UserStatus.SPAM_BLOCK
            user.last_attempt = datetime.now()
            user.error_message = str(e)
            self.parent.processed_users[username] = user
            return False

        except UserPrivacyRestrictedError:
            logger.warning(
                f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–ß–∞—Ç: {chat_link})")
            user.status = UserStatus.PRIVACY
            user.last_attempt = datetime.now()
            user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
            self.parent.processed_users[username] = user
            return False

        except (UserDeactivatedBanError, UserDeactivatedError):
            logger.warning(
                f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram (–ß–∞—Ç: {chat_link})")
            user.status = UserStatus.NOT_FOUND
            user.last_attempt = datetime.now()
            user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            self.parent.processed_users[username] = user
            return False

        except (ChatAdminRequiredError, ChatWriteForbiddenError):
            logger.error(
                f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ (–ß–∞—Ç: {chat_link})")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ"
            self.parent.processed_users[username] = user
            return False

        except ChannelsTooMuchError:
            logger.warning(
                f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} —É–∂–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Ç–æ–≤ (–ß–∞—Ç: {chat_link})")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = "–ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤"
            self.parent.processed_users[username] = user
            return False

        except Exception as e:
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            error_text = str(e)

            if "CHAT_MEMBER_ADD_FAILED" in error_text:
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å @{username} (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.ERROR
                user.error_message = "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"

            elif "You're banned from sending messages" in error_text:
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤ (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.ERROR
                user.error_message = "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

            elif "user was kicked" in error_text.lower():
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} –±—ã–ª —Ä–∞–Ω–µ–µ –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞ (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.ALREADY_IN
                user.error_message = "–ë—ã–ª –∫–∏–∫–Ω—É—Ç"

            elif "already in too many channels" in error_text.lower():
                logger.warning(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] @{username} –≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö —á–∞—Ç–∞—Ö (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.ERROR
                user.error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Ç–æ–≤"

            else:
                logger.error(
                    f"[{self.profile_name}]-[Worker-{worker_id}]-[{account_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e} (–ß–∞—Ç: {chat_link})")
                user.status = UserStatus.ERROR
                user.error_message = f"–û—à–∏–±–∫–∞: {error_text[:50]}"

            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return False