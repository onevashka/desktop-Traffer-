# src/modules/impl/inviter/admin_inviter.py
"""
–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–æ–≤
–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π BotManager –∏ AdminRightsManager
"""

import threading
import asyncio
import queue
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger
from pathlib import Path

from .base_inviter import BaseInviterProcess
from .bot_manager import BotManager
from .admin_rights_manager import AdminRightsManager
from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats

# –ò–º–ø–æ—Ä—Ç—ã Telethon –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


class AdminInviterProcess(BaseInviterProcess):
    """–ò–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É - –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –Ω–∞ —á–∞—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self, profile_name: str, profile_data: Dict, account_manager):
        super().__init__(profile_name, profile_data, account_manager)

        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        self.bot_token = profile_data.get('config', {}).get('bot_token')
        if not self.bot_token:
            logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}")

        # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.main_admin_account_name = profile_data.get('config', {}).get('main_admin_account')
        if not self.main_admin_account_name:
            logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}")

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.bot_manager: Optional[BotManager] = None
        self.admin_rights_manager: Optional[AdminRightsManager] = None

        # –ü–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        self.chat_threads = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)
        self.account_stats: Dict[str, AccountStats] = {}
        self.total_success = 0
        self.total_errors = 0
        self.total_processed = 0
        self.frozen_accounts = set()
        self.finished_accounts = set()
        self.account_finish_times: Dict[str, datetime] = {}
        self.initial_chats_count = 0

        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä –¥–ª—è {profile_name}")
        if self.main_admin_account_name:
            logger.info(f"   –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: {self.main_admin_account_name}")

    def _run_inviting(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}] ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")

        if not self.bot_token:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return

        if not self.main_admin_account_name:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!")
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            asyncio.run(self._async_run_inviting())
        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.is_running = False
            self.finished_at = datetime.now()

    async def _async_run_inviting(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            if not await self._initialize_bot():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

            # 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            if not await self._user_interaction():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —á–∞—Å—Ç—å (–ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤)
            await self._start_chat_threads()

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.bot_manager:
                await self.bot_manager.disconnect()

    async def _initialize_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            logger.info(f"[{self.profile_name}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            proxy_url = None
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            self.bot_manager = BotManager(
                bot_token=self.bot_token,
                proxy_url=proxy_url
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
            if not await self.bot_manager.connect():
                logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
                return False

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
            self.admin_rights_manager = AdminRightsManager(
                bot_manager=self.bot_manager
            )

            logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_manager.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

    async def _user_interaction(self) -> bool:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chat_links = []
            temp_queue = []

            while not self.chat_queue.empty():
                chat = self.chat_queue.get_nowait()
                chat_links.append(chat)
                temp_queue.append(chat)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
            for chat in temp_queue:
                self.chat_queue.put(chat)

            if not chat_links:
                logger.error("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            logger.info(f"=" * 70)
            logger.info(f"ü§ñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ë–û–¢–ê")
            logger.info(f"=" * 70)
            logger.info(f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @{self.bot_manager.bot_username} –≤ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:")

            for i, chat in enumerate(chat_links, 1):
                logger.info(f"   {i}. {chat}")

            logger.info(f"2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö")
            logger.info(f"   (–ü—Ä–∞–≤–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏)")
            logger.info(f"3. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            logger.info(f"=" * 70)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö...")
            setup_needed = []

            for chat in chat_links:
                is_admin = await self.bot_manager.check_bot_admin_status(chat)
                if not is_admin:
                    setup_needed.append(chat)
                    logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤: {chat}")
                else:
                    logger.info(f"‚úÖ –ë–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω –≤: {chat}")

            if setup_needed:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ {len(setup_needed)} —á–∞—Ç–∞—Ö...")
                logger.info(f"   –ß–∞—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {setup_needed}")

                # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç
                await asyncio.sleep(60)

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                logger.info(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
                still_need_setup = []

                for chat in setup_needed:
                    is_admin = await self.bot_manager.check_bot_admin_status(chat)
                    if not is_admin:
                        still_need_setup.append(chat)

                if still_need_setup:
                    logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ {len(still_need_setup)} —á–∞—Ç–∞—Ö:")
                    for chat in still_need_setup:
                        logger.warning(f"   - {chat}")
                    logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏")

            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return False

    async def _start_chat_threads(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º)"""
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if self.config.delay_after_start > 0:
            logger.info(f"[{self.profile_name}] –ó–∞–¥–µ—Ä–∂–∫–∞ {self.config.delay_after_start} —Å–µ–∫...")
            self.stop_flag.wait(self.config.delay_after_start)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_chats = self.chat_queue.qsize()
        self.initial_chats_count = total_chats
        logger.info(f"[{self.profile_name}] –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_chats}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
        total_invites_needed = total_chats * self.config.success_per_chat if self.config.success_per_chat > 0 else 999999
        logger.info(f"[{self.profile_name}] –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –≤—Å–µ–≥–æ: {total_invites_needed}")

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        module_name = f"admin_inviter_{self.profile_name}"
        main_admin_account = self.account_manager.get_account(self.main_admin_account_name, module_name)

        if not main_admin_account:
            logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {self.main_admin_account_name}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
        max_workers_per_chat = self.config.threads_per_chat
        total_workers_needed = min(total_chats * max_workers_per_chat, self.account_manager.get_free_accounts_count())

        worker_accounts = self.account_manager.get_free_accounts(module_name, total_workers_needed)
        logger.info(f"[{self.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(worker_accounts)}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        chat_index = 0
        worker_index = 0

        while self.chat_queue.qsize() > 0 and not self.stop_flag.is_set():
            try:
                chat = self.chat_queue.get_nowait()

                # –í—ã–¥–µ–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                chat_workers = []
                workers_for_chat = min(max_workers_per_chat, len(worker_accounts) - worker_index)

                for j in range(workers_for_chat):
                    if worker_index < len(worker_accounts):
                        chat_workers.append(worker_accounts[worker_index].name)
                        worker_index += 1

                if not chat_workers:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
                    self.chat_queue.put(chat)
                    logger.warning(f"[{self.profile_name}] –ù–µ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat}")
                    break

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
                thread = AdminChatWorkerThread(
                    chat_id=chat_index + 1,
                    chat_link=chat,
                    main_admin_account=self.main_admin_account_name,
                    worker_accounts=chat_workers,
                    parent=self,
                    profile_name=self.profile_name,
                    bot_manager=self.bot_manager,
                    admin_rights_manager=self.admin_rights_manager
                )
                thread.start()
                self.chat_threads.append(thread)
                chat_index += 1

                logger.info(
                    f"[{self.profile_name}] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞ #{chat_index}: {chat} "
                    f"(–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: {self.main_admin_account_name}, –≤–æ—Ä–∫–µ—Ä–æ–≤: {len(chat_workers)})"
                )

            except queue.Empty:
                break

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        self._wait_for_threads()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        if self.chat_queue.qsize() > 0:
            logger.warning(f"[{self.profile_name}] –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {self.chat_queue.qsize()}")

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_final_stats()

    def _get_fresh_accounts(self, module_name: str, count: int) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫–æ–ø–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ)"""
        self._clean_expired_accounts()
        all_accounts = self.account_manager.get_free_accounts(module_name, count * 2)

        if not all_accounts:
            return []

        fresh_accounts = []
        for account in all_accounts:
            if account.name not in self.finished_accounts:
                fresh_accounts.append(account)
                if len(fresh_accounts) >= count:
                    break
            else:
                self.account_manager.release_account(account.name, module_name)
                logger.info(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account.name} –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        return fresh_accounts

    def _clean_expired_accounts(self):
        """–û—á–∏—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Å—Ç–µ–∫—à–µ–π 24-—á–∞—Å–æ–≤–æ–π –º–µ—Ç–∫–æ–π"""
        now = datetime.now()
        expired = []

        for account_name, finish_time in self.account_finish_times.items():
            if now - finish_time >= timedelta(hours=24):
                expired.append(account_name)

        for account_name in expired:
            self.finished_accounts.discard(account_name)
            del self.account_finish_times[account_name]
            logger.info(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)")

    def _wait_for_threads(self):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        logger.info(f"[{self.profile_name}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

        while not self.stop_flag.is_set():
            alive = [t for t in self.chat_threads if t.is_alive()]

            if not alive:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.user_queue.empty() and self.total_processed > 0:
                logger.info(f"[{self.profile_name}] –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

            self.stop_flag.wait(10)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.chat_threads:
            if thread.is_alive():
                thread.join(timeout=30)

    def update_account_stats(self, account_name: str, success: bool = False,
                             spam_block: bool = False, error: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã"""
        if account_name not in self.account_stats:
            self.account_stats[account_name] = AccountStats(name=account_name)

        stats = self.account_stats[account_name]

        if success:
            stats.invites += 1
            self.total_success += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–∏–º–∏—Ç–∞
            if self.config.success_per_account > 0 and stats.invites >= self.config.success_per_account:
                stats.status = 'finished'
                self.finished_accounts.add(account_name)
                self.account_finish_times[account_name] = datetime.now()
                logger.warning(
                    f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–∞–π—Ç–æ–≤: {stats.invites}")

                self._mark_account_as_finished(account_name)

        if error:
            stats.errors += 1
            self.total_errors += 1
        if spam_block:
            stats.spam_blocks += 1
            stats.consecutive_spam += 1

            if stats.spam_blocks >= self.config.acc_spam_limit:
                stats.status = 'spam_blocked'
                self.frozen_accounts.add(account_name)
                logger.error(f"[{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º")
        else:
            stats.consecutive_spam = 0

        self.total_processed += 1

    def _mark_account_as_finished(self, account_name: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ 24 —á–∞—Å–∞"""
        try:
            finish_time = datetime.now()
            self.account_finish_times[account_name] = finish_time
            next_available = finish_time + timedelta(hours=24)
            logger.info(f"üìå [{self.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
            logger.info(f"   ‚è∞ –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {next_available.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("=" * 60)
        logger.info(f"[{self.profile_name}] üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"[{self.profile_name}] –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_processed}")
        logger.info(f"[{self.profile_name}] –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.total_success}")
        logger.info(f"[{self.profile_name}] –û—à–∏–±–æ–∫: {self.total_errors}")

        if self.total_processed > 0:
            success_rate = (self.total_success / self.total_processed) * 100
            logger.info(f"[{self.profile_name}] –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∞–≤–∞–º –∞–¥–º–∏–Ω–æ–≤
        if self.admin_rights_manager:
            rights_stats = self.admin_rights_manager.get_stats()
            logger.info(f"\nü§ñ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ú–ò–ù-–ü–†–ê–í:")
            logger.info(f"   –ß–∞—Ç–æ–≤ —Å –ø—Ä–∞–≤–∞–º–∏: {rights_stats['total_chats_with_rights']}")
            logger.info(f"   –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {rights_stats['total_admins']}")
            logger.info(f"   –ì–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {rights_stats['main_admins']}")
            logger.info(f"   –í–æ—Ä–∫–µ—Ä–æ–≤: {rights_stats['workers']}")

        logger.info("=" * 60)


class AdminChatWorkerThread(threading.Thread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""

    def __init__(self, chat_id: int, chat_link: str, main_admin_account: str,
                 worker_accounts: List[str], parent: AdminInviterProcess,
                 profile_name: str, bot_manager: BotManager,
                 admin_rights_manager: AdminRightsManager):
        super().__init__(name=f"AdminChat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.main_admin_account_name = main_admin_account
        self.worker_account_names = worker_accounts
        self.parent = parent
        self.profile_name = profile_name
        self.bot_manager = bot_manager
        self.admin_rights_manager = admin_rights_manager
        self.main_loop = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        self.chat_success = 0
        self.chat_errors = 0
        self.chat_processed = 0

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        self.main_admin_account = None
        self.main_admin_has_rights = False

        # ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤
        self.chat_telegram_id = None

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            self.main_loop = loop

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(self._work())

        except Exception as e:
            logger.error(f"‚ùå [{self.profile_name}]-[AdminChat-{self.chat_id}] –û—à–∏–±–∫–∞: {e}")
        finally:
            if loop:
                loop.close()

    async def _work(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")

        try:
            # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if not await self._setup_main_admin():
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
                return

            # 2. –†–∞–±–æ—Ç–∞–µ–º —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            await self._work_with_workers()

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ: {e}")
        finally:
            # 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –∑–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            await self._cleanup_main_admin()

        logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info(
            f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={self.chat_processed}, —É—Å–ø–µ—à–Ω–æ={self.chat_success}, –æ—à–∏–±–æ–∫={self.chat_errors}")

    async def _setup_main_admin(self) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: –∑–∞—Ö–æ–¥ –≤ —á–∞—Ç + –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –æ—Ç –±–æ—Ç–∞"""
        try:
            logger.info(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {self.main_admin_account_name}")

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ò–ó –ü–ê–ü–ö–ò –ê–î–ú–ò–ù–´
            module_name = f"admin_inviter_{self.profile_name}"

            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            self.main_admin_account = self.parent.account_manager.get_account(
                self.main_admin_account_name, module_name
            )

            if not self.main_admin_account:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ–±—ã—á–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ, —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø–∞–ø–∫–∏ –ê–¥–º–∏–Ω—ã
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–∞–ø–∫–∏ –ê–¥–º–∏–Ω—ã")
                self.main_admin_account = self._load_admin_from_folder()

            if not self.main_admin_account:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
                return False

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if not await self.main_admin_account.connect():
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É")
                return False

            # –ó–∞—Ö–æ–¥–∏–º –≤ —á–∞—Ç
            join_result = await self._join_chat(self.main_admin_account, self.chat_link)
            if join_result == "FROZEN_ACCOUNT":
                logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∑–∞–º–æ—Ä–æ–∂–µ–Ω")
                return False
            elif join_result == "STOP_CHAT":
                logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            elif join_result != "SUCCESS":
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ —Å–º–æ–≥ –∑–∞–π—Ç–∏ –≤ —á–∞—Ç")
                return False

            # –ü–æ–ª—É—á–∞–µ–º user_id –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏ ID —á–∞—Ç–∞
            user_entity = await self.main_admin_account.client.get_entity('me')
            user_id = user_entity.id

            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞ –¥–ª—è ID
            try:
                chat_entity = await self.main_admin_account.client.get_entity(self.chat_link)
                if hasattr(chat_entity, 'id'):
                    self.chat_telegram_id = chat_entity.id
                    logger.debug(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞: {self.chat_telegram_id}")
            except Exception as e:
                logger.warning(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞: {e}")

            # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            success = await self.admin_rights_manager.grant_main_admin_rights(
                self.chat_link, user_id, self.main_admin_account_name
            )

            if success:
                self.main_admin_has_rights = True
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞")
                return True
            else:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É")
                return False

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
            return False

    def _load_admin_from_folder(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è/–ê–¥–º–∏–Ω—ã"""
        try:
            profile_folder = Path(self.parent.profile_data['folder_path'])
            admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"

            # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞
            session_file = admins_folder / f"{self.main_admin_account_name}.session"
            json_file = admins_folder / f"{self.main_admin_account_name}.json"

            if not session_file.exists():
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω session —Ñ–∞–π–ª: {session_file}")
                return None

            if not json_file.exists():
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª: {json_file}")
                return None

            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é (–º–∏–Ω—É—è –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
            from src.accounts.impl.account import Account
            account = Account(
                session_path=session_file,
                json_path=json_file
            )

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∏–∑ –ø–∞–ø–∫–∏ –ê–¥–º–∏–Ω—ã: {self.main_admin_account_name}")
            return account

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–∞–ø–∫–∏: {e}")
            return None

    async def _work_with_workers(self):
        """–†–∞–±–æ—Ç–∞–µ—Ç —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: –≤—ã–¥–∞—á–∞ –ø—Ä–∞–≤ -> –∏–Ω–≤–∞–π—Ç -> –æ—Ç–∑—ã–≤ –ø—Ä–∞–≤"""
        module_name = f"admin_inviter_{self.profile_name}"

        for worker_name in self.worker_account_names:
            if self.parent.stop_flag.is_set():
                break

            try:
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üë∑ –†–∞–±–æ—Ç–∞–µ–º —Å –≤–æ—Ä–∫–µ—Ä–æ–º: {worker_name}")

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞
                worker_account = self.parent.account_manager.get_account(worker_name, module_name)
                if not worker_account:
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞: {worker_name}")
                    continue

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–æ—Ä–∫–µ—Ä—É
                if not await worker_account.connect():
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–æ—Ä–∫–µ—Ä—É: {worker_name}")
                    continue

                # –ó–∞—Ö–æ–¥–∏–º –≤ —á–∞—Ç
                await self._join_chat(worker_account, self.chat_link)

                # –ü–æ–ª—É—á–∞–µ–º user_id –≤–æ—Ä–∫–µ—Ä–∞
                user_entity = await worker_account.client.get_entity('me')
                user_id = user_entity.id

                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ –≤–æ—Ä–∫–µ—Ä—É
                rights_granted = await self.admin_rights_manager.grant_worker_rights(
                    self.chat_link, user_id, worker_name
                )

                if rights_granted:
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –í–æ—Ä–∫–µ—Ä {worker_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞")

                    # –†–∞–±–æ—Ç–∞–µ–º —Å –≤–æ—Ä–∫–µ—Ä–æ–º
                    await self._work_with_worker_account(worker_account, worker_name)

                    # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≤–æ—Ä–∫–µ—Ä–∞
                    await self.admin_rights_manager.revoke_worker_rights(
                        self.chat_link, user_id, worker_name
                    )
                    logger.info(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üîí –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –≤–æ—Ä–∫–µ—Ä–∞: {worker_name}")
                else:
                    logger.error(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≤–æ—Ä–∫–µ—Ä—É: {worker_name}")

            except Exception as e:
                logger.error(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Ä–∫–µ—Ä–æ–º {worker_name}: {e}")
            finally:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                self.parent.account_manager.release_account(worker_name, module_name)

    async def _work_with_worker_account(self, worker_account, worker_name: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞"""
        invites_count = 0
        errors_count = 0

        while not self.parent.stop_flag.is_set():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if self.parent.config.success_per_chat > 0 and self.chat_success >= self.parent.config.success_per_chat:
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–ª—è —á–∞—Ç–∞: {self.chat_success}")
                break

            if self.parent.config.success_per_account > 0 and invites_count >= self.parent.config.success_per_account:
                logger.info(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {invites_count}")
                break

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user = self.parent.user_queue.get_nowait()
            except queue.Empty:
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –û—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")
                break

            # –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self._invite_user(user, worker_account, worker_name)

            if success:
                invites_count += 1
                self.chat_success += 1
            else:
                errors_count += 1
                self.chat_errors += 1

            self.chat_processed += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.parent.update_account_stats(
                worker_name,
                success=success,
                spam_block=(user.status == UserStatus.SPAM_BLOCK if hasattr(user, 'status') else False),
                error=(not success)
            )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
            if self.parent.config.delay_between > 0:
                await asyncio.sleep(self.parent.config.delay_between)

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –í–æ—Ä–∫–µ—Ä {worker_name} –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–Ω–≤–∞–π—Ç–æ–≤: {invites_count}, –æ—à–∏–±–æ–∫: {errors_count}")

    async def _cleanup_main_admin(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –∑–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        try:
            if self.main_admin_has_rights:
                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] üßπ –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")

                await self.admin_rights_manager.revoke_main_admin_rights(self.chat_link)

                logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ –ü—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã")
                self.main_admin_has_rights = False

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if self.main_admin_account:
                module_name = f"admin_inviter_{self.profile_name}"
                self.parent.account_manager.release_account(self.main_admin_account_name, module_name)

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")

    async def _join_chat(self, account, chat_link: str):
        """–ó–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç"""
        try:
            from telethon.tl.functions.channels import JoinChannelRequest
            await account.client(JoinChannelRequest(chat_link))
            logger.info(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚úÖ {account.name} –∑–∞—à–µ–ª –≤ —á–∞—Ç")
            await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            logger.warning(
                f"[{self.profile_name}]-[AdminChat-{self.chat_link}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞—Ö–æ–¥–∞ –≤ —á–∞—Ç –¥–ª—è {account.name}: {e}")

    async def _invite_user(self, user: InviteUser, account, account_name: str) -> bool:
        """–ò–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–∫–∞ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)"""
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ _invite_user
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        client = account.client

        if not client or not client.is_connected():
            logger.error(f"‚ùå [{self.profile_name}]-[AdminChat-{self.chat_link}] –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        username = user.username
        if username.startswith('@'):
            username = username[1:]

        logger.info(
            f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å @{username}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                full_user = await client(GetFullUserRequest(username))
                old_common_chats = full_user.full_user.common_chats_count
            except (ValueError, TypeError, UsernameInvalidError, UsernameNotOccupiedError):
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                user.status = UserStatus.NOT_FOUND
                user.last_attempt = datetime.now()
                user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                self.parent.processed_users[username] = user
                return False

            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            try:
                user_entity = await client.get_entity(username)
                result = await client(InviteToChannelRequest(
                    channel=self.chat_link,
                    users=[user_entity]
                ))

                if hasattr(result, 'missing_invitees') and result.missing_invitees:
                    logger.warning(
                        f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                    user.status = UserStatus.PRIVACY
                    user.last_attempt = datetime.now()
                    user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
                    self.parent.processed_users[username] = user
                    return False

            except UserPrivacyRestrictedError:
                logger.warning(
                    f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                user.status = UserStatus.PRIVACY
                user.last_attempt = datetime.now()
                user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
                self.parent.processed_users[username] = user
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await asyncio.sleep(5)  # –ú–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ - —É –Ω–∞—Å –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞

            full_user2 = await client(GetFullUserRequest(username))
            new_common_chats = full_user2.full_user.common_chats_count

            if new_common_chats <= old_common_chats:
                logger.warning(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} —Å–ø–∏—Å–∞–Ω")
                user.status = UserStatus.ERROR
                user.last_attempt = datetime.now()
                user.error_message = "–°–ø–∏—Å–∞–Ω–∏–µ"
                self.parent.processed_users[username] = user
                return False

            # –£—Å–ø–µ—Ö
            logger.success(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            user.status = UserStatus.INVITED
            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return True

        except (PeerFloodError, FloodWaitError) as e:
            if isinstance(e, FloodWaitError):
                wait_seconds = e.seconds
                logger.warning(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] FloodWait: –∂–¥—É {wait_seconds} —Å–µ–∫.")
                await asyncio.sleep(wait_seconds)
            else:
                logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –°–ø–∞–º–±–ª–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ @{username}")

            user.status = UserStatus.SPAM_BLOCK
            user.last_attempt = datetime.now()
            user.error_message = str(e)
            self.parent.processed_users[username] = user
            return False

        except Exception as e:
            logger.error(f"[{self.profile_name}]-[AdminChat-{self.chat_link}] –û—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = f"–û—à–∏–±–∫–∞: {str(e)[:50]}"
            self.parent.processed_users[username] = user
            return False