import traceback
import threading
import asyncio
import queue
import time
from typing import Optional
from datetime import datetime
from loguru import logger
from pathlib import Path
from dataclasses import dataclass

from src.entities.moduls.inviter import InviteUser, UserStatus
from .utils import check_chat_limits, check_account_limits
from src.entities.moduls.inviter import *

# –ò–º–ø–æ—Ä—Ç—ã Telethon
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError, PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError
)
from telethon.tl.types import ChatAdminRights
from telethon.tl.functions.channels import EditAdminRequest


class ChatWorkerThread(threading.Thread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, chat_id: int, chat_link: str, parent):
        super().__init__(name=f"Chat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.parent = parent
        self.chat_success = 0
        self.chat_total = 0
        self.active_threads = []
        self.threads_lock = threading.Lock()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        if chat_link not in parent.chat_stats:
            parent.chat_stats[chat_link] = {"success": 0, "total": 0}

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        if self.chat_link not in self.parent.ready_chats:
            logger.error(f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] –ß–∞—Ç –Ω–µ –≥–æ—Ç–æ–≤")
            return

        module_name = f"admin_inviter_{self.parent.profile_name}"

        try:
            while not self.parent.stop_flag.is_set():
                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
                if not check_chat_limits(self.parent, self.chat_success):
                    logger.success(
                        f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–∞")
                    break

                if self.parent.user_queue.empty():
                    logger.info(
                        f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    break

                # –£–±–∏—Ä–∞–µ–º –º–µ—Ä—Ç–≤—ã–µ –ø–æ—Ç–æ–∫–∏
                with self.threads_lock:
                    self.active_threads = [t for t in self.active_threads if t.is_alive()]
                    active_count = len(self.active_threads)

                # –ù—É–∂–Ω—ã –Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏?
                needed = self.parent.config.threads_per_chat - active_count
                if needed > 0:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    if not self.parent.check_accounts_availability():
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
                        if active_count == 0:
                            logger.info(
                                f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø–æ—Ç–æ–∫–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º")
                            break

                        # –ò–Ω–∞—á–µ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                        time.sleep(10)
                        continue

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
                    for i in range(needed):
                        worker = WorkerThread(
                            thread_id=active_count + i + 1,
                            chat_thread=self,
                            module_name=module_name
                        )
                        worker.start()

                        with self.threads_lock:
                            self.active_threads.append(worker)

                        logger.success(
                            f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫-{active_count + i + 1}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                time.sleep(5)

            # –û–ë–ù–û–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            logger.info(
                f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] üõë –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö worker –ø–æ—Ç–æ–∫–æ–≤...")

            with self.threads_lock:
                threads_to_wait = self.active_threads.copy()

            if threads_to_wait:
                logger.info(
                    f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] ‚è≥ –ù–∞–π–¥–µ–Ω–æ {len(threads_to_wait)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è")

                for i, worker in enumerate(threads_to_wait, 1):
                    if worker.is_alive():
                        logger.info(
                            f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] ‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è worker –ø–æ—Ç–æ–∫–∞ {i}/{len(threads_to_wait)}")
                        worker.join(timeout=60)  # –ñ–¥–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥ –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫

                        if worker.is_alive():
                            logger.warning(
                                f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] ‚ö†Ô∏è Worker –ø–æ—Ç–æ–∫ {i} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥")
                        else:
                            logger.success(
                                f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] ‚úÖ Worker –ø–æ—Ç–æ–∫ {i} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

                logger.success(
                    f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] ‚úÖ –í—Å–µ worker –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            else:
                logger.info(
                    f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] ‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è")

        except Exception as e:
            logger.error(f"[{self.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_id}]-[{self.chat_link}] –û—à–∏–±–∫–∞: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –∂–¥–µ–º –ø–æ—Ç–æ–∫–∏
            with self.threads_lock:
                threads_to_wait = self.active_threads.copy()

            for worker in threads_to_wait:
                if worker.is_alive():
                    worker.join(timeout=30)


class WorkerThread(threading.Thread):
    """
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ—Ç–æ–∫ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """

    def __init__(self, thread_id: int, chat_thread: ChatWorkerThread, module_name: str):
        super().__init__(name=f"Thread-{thread_id}")
        self.thread_id = thread_id
        self.chat_thread = chat_thread
        self.module_name = module_name
        self.current_account_data = None
        self.current_account_name = "–ù–µ—Ç–ê–∫–∫–∞—É–Ω—Ç–∞"
        self.thread_account = None
        self.realtime_logger = None  # –î–û–ë–ê–í–õ–ï–ù–û: –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª–µ–º

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞ - —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            if self.chat_thread.chat_link not in self.chat_thread.parent.ready_chats:
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] –ß–∞—Ç –Ω–µ –≥–æ—Ç–æ–≤")
                return

            # –°–æ–∑–¥–∞–µ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            loop.run_until_complete(self._thread_logic())

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] –û—à–∏–±–∫–∞: {e}")
        finally:
            # –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            logger.info(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] ‚úÖ Worker –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            if 'loop' in locals():
                loop.close()

    async def _thread_logic(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        chat_id = self.chat_thread.chat_id

        # –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–û–¢–û–ö–ê - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫–∞ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        while not self.chat_thread.parent.stop_flag.is_set():

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.chat_thread.parent.user_queue.empty():
                logger.info(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —á–∞—Ç–∞
            if not check_chat_limits(self.chat_thread.parent, self.chat_thread.chat_success):
                break

            # –ü–û–õ–£–ß–ê–ï–ú –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            fresh_accounts = self.chat_thread.parent.get_fresh_accounts(self.module_name, 1)

            if not fresh_accounts:
                logger.warning(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫")
                break

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.current_account_data = fresh_accounts[0]
            self.current_account_name = self.current_account_data.name
            self.thread_account = None

            logger.info(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {self.current_account_name}")

            # –†–ê–ë–û–¢–ê–ï–ú –° –¢–ï–ö–£–©–ò–ú –ê–ö–ö–ê–£–ù–¢–û–ú –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            account_finished = await self._work_with_current_account()

            if account_finished:
                logger.info(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç {self.current_account_name} –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                continue
            else:
                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[–ü–æ—Ç–æ–∫-{self.thread_id}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫")
                break

    async def _work_with_current_account(self) -> bool:
        """
        –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

        Returns:
            True - –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (–¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞/–ø—Ä–æ–±–ª–µ–º—ã), –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
            False - –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Ç–æ–∫
        """
        chat_id = self.chat_thread.chat_id
        client_connected = False
        rights_granted = False

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞
            session_path = self.current_account_data.account.session_path
            json_path = self.current_account_data.account.json_path

            if not Path(session_path).exists():
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
                await self._ensure_disconnected()
                await self._handle_problem("missing_files")
                return True

            if not Path(json_path).exists():
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
                await self._ensure_disconnected()
                await self._handle_problem("missing_files")
                return True

            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            from src.accounts.impl.account import Account
            self.thread_account = Account(session_path=session_path, json_path=json_path)
            await self.thread_account.create_client()

            if not await self.thread_account.connect():
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –ù–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")
                await self._ensure_disconnected()
                await self._handle_problem("connection_failed")
                return True

            client_connected = True

            if not await self.thread_account.client.is_user_authorized():
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await self._ensure_disconnected()
                await self._handle_problem("unauthorized")
                return True

            me = await self.thread_account.client.get_me()
            logger.success(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –ü–æ–¥–∫–ª—é—á–µ–Ω: {me.first_name}")

            # 3. –í—Ö–æ–¥ –≤ —á–∞—Ç
            join_result = await self._join_chat()
            if join_result == "FROZEN_ACCOUNT":
                await self._ensure_disconnected()
                await self._handle_problem("frozen")
                return True
            elif join_result != "SUCCESS":
                await self._ensure_disconnected()
                await self._handle_problem("dead")
                return True

            # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤
            user_entity = await self.thread_account.client.get_entity('me')
            response_queue = queue.Queue()
            command = AdminCommand(
                action="GRANT_RIGHTS",
                worker_name=self.current_account_name,
                worker_user_id=user_entity.id,
                worker_access_hash=user_entity.access_hash,
                chat_link=self.chat_thread.chat_link,
                response_queue=response_queue
            )

            self.chat_thread.parent.admin_command_queue.put(command)

            try:
                rights_granted = response_queue.get(timeout=30)
            except queue.Empty:
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤")
                await self._ensure_disconnected()
                await self._handle_problem("dead")
                return True

            if not rights_granted:
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –ü—Ä–∞–≤–∞ –Ω–µ –≤—ã–¥–∞–Ω—ã")
                await self._ensure_disconnected()
                await self._handle_problem("dead")
                return True

            logger.success(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] ‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã")

            # –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            self.realtime_logger = self.chat_thread.parent.realtime_logger

            # 5. –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ò–ù–í–ê–ô–¢–ò–ù–ì–ê –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            invites_count = 0

            while not self.chat_thread.parent.stop_flag.is_set():
                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
                if not check_account_limits(self.chat_thread.parent, self.current_account_name, invites_count):
                    logger.info(
                        f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫–∫–∞—É–Ω—Ç–∞")
                    break

                if not check_chat_limits(self.chat_thread.parent, self.chat_thread.chat_success):
                    logger.info(
                        f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–∞")
                    break

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user = self.chat_thread.parent.user_queue.get_nowait()
                except queue.Empty:
                    logger.info(
                        f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    break

                # –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    result = await self._invite_user(user)

                    # –°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –í–°–ï–ì–î–ê –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—Ä–æ–º–µ USER_ALREADY
                    if result != "USER_ALREADY":
                        self.chat_thread.chat_total += 1
                        self.chat_thread.parent.chat_stats[self.chat_thread.chat_link]["total"] += 1

                    if result == "SUCCESS":
                        invites_count += 1
                        self.chat_thread.chat_success += 1
                        self.chat_thread.parent.chat_stats[self.chat_thread.chat_link]["success"] += 1

                        logger.success(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] ‚úÖ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù #{invites_count}: @{user.username}")

                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                        self.chat_thread.parent._check_account_error_limits(self.current_account_name, "success")
                        self.chat_thread.parent.update_account_stats(self.current_account_name, success=True)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —É—Å–ø–µ—Ö–æ–≤
                        if self.current_account_name in self.chat_thread.parent.finished_successfully_accounts:
                            logger.success(
                                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üéØ –î–û–°–¢–ò–ì –õ–ò–ú–ò–¢–ê –£–°–ü–ï–•–û–í - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç")

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                            await self._update_account_status_in_manager("finished")
                            break

                    elif result == "FLOOD_WAIT":  # üî• –ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–õ–£–î–ê!
                        logger.error(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üö´ –ü–û–õ–£–ß–ï–ù –§–õ–£–î - –ó–ê–í–ï–†–®–ê–ï–ú –ê–ö–ö–ê–£–ù–¢")

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–ª—É–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                        if not hasattr(self.chat_thread.parent, 'flood_accounts'):
                            self.chat_thread.parent.flood_accounts = set()

                        self.chat_thread.parent.flood_accounts.add(self.current_account_name)
                        self.chat_thread.parent._mark_account_as_processed(self.current_account_name, "—Ñ–ª—É–¥ –ª–∏–º–∏—Ç")

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                        await self._update_account_status_in_manager("flood")

                        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
                        await self._ensure_disconnected()
                        await self._handle_problem("flood")
                        break  # üî• –í–´–•–û–î–ò–ú –ò–ó –¶–ò–ö–õ–ê - –∞–∫–∫–∞—É–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

                    elif result == "WRITEOFF":
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] ‚ùå –°–ü–ò–°–ê–ù–ò–ï (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω): @{user.username}")

                        should_finish = self.chat_thread.parent._check_account_error_limits(self.current_account_name,
                                                                                            "writeoff")
                        if should_finish:
                            logger.error(
                                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üî• –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –°–ü–ò–°–ê–ù–ò–ô - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç")

                            self.chat_thread.parent.writeoff_accounts.add(self.current_account_name)
                            self.chat_thread.parent._mark_account_as_processed(self.current_account_name,
                                                                               "–ª–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω–∏–π")
                            await self._update_account_status_in_manager("writeoff")

                            await self._ensure_disconnected()
                            await self._handle_problem("writeoff_limit")
                            break

                        self.chat_thread.parent.update_account_stats(self.current_account_name, error=True)

                    elif result == "SPAM_BLOCK":
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üö´ –°–ü–ê–ú-–ë–õ–û–ö: @{user.username}")

                        should_finish = self.chat_thread.parent._check_account_error_limits(self.current_account_name,
                                                                                            "spam_block")
                        if should_finish:
                            logger.error(
                                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üî• –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –°–ü–ê–ú-–ë–õ–û–ö–û–í - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç")

                            self.chat_thread.parent.spam_block_accounts.add(self.current_account_name)
                            self.chat_thread.parent._mark_account_as_processed(self.current_account_name,
                                                                               "–ª–∏–º–∏—Ç —Å–ø–∞–º-–±–ª–æ–∫–æ–≤")
                            await self._update_account_status_in_manager("frozen")

                            await self._ensure_disconnected()
                            await self._handle_problem("spam_limit")
                            break

                        self.chat_thread.parent.update_account_stats(self.current_account_name, spam_block=True,
                                                                     error=True)

                    elif result == "BLOCK_INVITE":
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üîê –ë–õ–û–ö –ù–ê –ò–ù–í–ê–ô–¢–´: @{user.username}")

                        should_finish = self.chat_thread.parent._check_account_error_limits(self.current_account_name,
                                                                                            "block_invite")
                        if should_finish:
                            logger.error(
                                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üî• –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –ë–õ–û–ö–û–í –ò–ù–í–ê–ô–¢–û–í - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç")

                            self.chat_thread.parent.block_invite_accounts.add(self.current_account_name)
                            self.chat_thread.parent._mark_account_as_processed(self.current_account_name,
                                                                               "–ª–∏–º–∏—Ç –±–ª–æ–∫–æ–≤ –∏–Ω–≤–∞–π—Ç–æ–≤")
                            await self._update_account_status_in_manager("dead")

                            await self._ensure_disconnected()
                            await self._handle_problem("block_limit")
                            break

                        self.chat_thread.parent.update_account_stats(self.current_account_name, error=True)

                    elif result == "PRIVACY":
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üîí –ü–†–ò–í–ê–¢–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: @{user.username}")

                    elif result == "NOT_FOUND":
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üîç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù: @{user.username}")

                    elif result == "USER_ALREADY":
                        logger.info(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üë§ –£–ñ–ï –û–ë–†–ê–ë–û–¢–ê–ù: @{user.username}")

                    else:  # ERROR –∏ –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] ‚ùì –û–®–ò–ë–ö–ê: @{user.username} (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result})")

                except (AuthKeyUnregisteredError, SessionRevokedError) as e:
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –ù–ï —Ñ–ª—É–¥!
                    logger.error(
                        f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

                    user.status = UserStatus.ERROR
                    user.last_attempt = datetime.now()
                    user.error_message = str(e)

                    # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if self.realtime_logger:
                        self.realtime_logger.update_user_status_immediately(user)

                    self.chat_thread.parent.processed_users[user.username] = user

                    problem_type = 'dead'  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ = –º–µ—Ä—Ç–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    self.chat_thread.parent._mark_account_as_processed(self.current_account_name,
                                                                       f"–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {problem_type}")

                    await self._update_account_status_in_manager(problem_type)
                    await self._ensure_disconnected()
                    await self._handle_problem(problem_type)
                    break

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
                if self.chat_thread.parent.config.delay_between > 0:
                    await asyncio.sleep(self.chat_thread.parent.config.delay_between)

            # 6. –û—Ç–∑—ã–≤ –ø—Ä–∞–≤
            if rights_granted:
                await self._revoke_rights(user_entity.id)

            # 7. –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò –ê–ö–ö–ê–£–ù–¢–ê
            self._show_account_finish_stats("–ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£", invites_count)

            # 8. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            await self._finalize_current_account(client_connected)

            # –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - –º–æ–∂–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            return True

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

            # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            self.chat_thread.parent._mark_account_as_processed(self.current_account_name,
                                                               f"–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:50]}")

            await self._handle_problem("dead")
            await self._finalize_current_account(client_connected)

            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            return True

    async def _invite_user(self, user: InviteUser) -> str:
        """
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∏–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        üî• –û–ë–ù–û–í–õ–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ FloodWait - –ù–ï –ñ–î–ï–ú 300 —Å–µ–∫—É–Ω–¥!
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: SUCCESS, WRITEOFF, SPAM_BLOCK, BLOCK_INVITE, PRIVACY, NOT_FOUND, USER_ALREADY, ERROR, FLOOD_WAIT
        """
        client = self.thread_account.client
        username = user.username.lstrip('@')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if username in self.chat_thread.parent.processed_users:
            existing_user = self.chat_thread.parent.processed_users[username]
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if existing_user.status in [UserStatus.INVITED, UserStatus.ALREADY_IN, UserStatus.NOT_FOUND]:
                return "USER_ALREADY"

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                full_user = await client(GetFullUserRequest(username))
                old_common_chats = full_user.full_user.common_chats_count
            except (ValueError, TypeError, UsernameInvalidError, UsernameNotOccupiedError):
                user.status = UserStatus.NOT_FOUND
                user.last_attempt = datetime.now()
                user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

                # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if self.realtime_logger:
                    self.realtime_logger.update_user_status_immediately(user)

                self.chat_thread.parent.processed_users[username] = user
                return "NOT_FOUND"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            if old_common_chats > 0:
                try:
                    user_entity = await client.get_input_entity(username)
                    common_chats_result = await client(GetCommonChatsRequest(
                        user_id=user_entity,
                        max_id=0,
                        limit=100
                    ))

                    current_chat_entity = await client.get_input_entity(self.chat_thread.chat_link)
                    current_chat_id = None

                    try:
                        chat_full = await client.get_entity(self.chat_thread.chat_link)
                        current_chat_id = chat_full.id
                    except Exception as e:
                        pass

                    if current_chat_id:
                        for chat in common_chats_result.chats:
                            if hasattr(chat, 'id') and chat.id == current_chat_id:
                                user.status = UserStatus.ALREADY_IN
                                user.last_attempt = datetime.now()
                                user.error_message = "–£–∂–µ –≤ —á–∞—Ç–µ"

                                # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                                if self.realtime_logger:
                                    self.realtime_logger.update_user_status_immediately(user)

                                self.chat_thread.parent.processed_users[username] = user
                                return "USER_ALREADY"

                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–≤–∞–π—Ç
                    pass

            # –ò–Ω–≤–∞–π—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            input_channel = await client.get_input_entity(self.chat_thread.chat_link)
            input_user = await client.get_input_entity(username)

            rights = ChatAdminRights(
                invite_users=True,
                anonymous=True,
            )

            await client(EditAdminRequest(
                channel=input_channel,
                user_id=input_user,
                admin_rights=rights,
                rank="–∞–¥–º–∏–Ω"
            ))

            await asyncio.sleep(10)

            no_rights = ChatAdminRights(
                invite_users=False,
                anonymous=False,
            )

            # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            await client(EditAdminRequest(
                channel=input_channel,
                user_id=input_user,
                admin_rights=no_rights,
                rank=""
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            await asyncio.sleep(15)

            try:
                full_user2 = await client(GetFullUserRequest(username))
                new_common_chats = full_user2.full_user.common_chats_count

                if new_common_chats <= old_common_chats:
                    user.status = UserStatus.ERROR
                    user.last_attempt = datetime.now()
                    user.error_message = "–°–ø–∏—Å–∞–Ω–∏–µ"

                    # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if self.realtime_logger:
                        self.realtime_logger.update_user_status_immediately(user)

                    self.chat_thread.parent.processed_users[username] = user
                    return "WRITEOFF"
            except:
                pass

            # ‚úÖ –£–°–ü–ï–• - –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï –ú–ï–°–¢–û!
            user.status = UserStatus.INVITED
            user.last_attempt = datetime.now()
            user.error_message = "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω"

            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
            if self.realtime_logger:
                self.realtime_logger.update_user_status_immediately(user)
                self.realtime_logger.log_successful_invite(
                    username=username,
                    chat_link=self.chat_thread.chat_link,
                    account_name=self.current_account_name
                )

            self.chat_thread.parent.processed_users[username] = user
            return "SUCCESS"

        except (PeerFloodError, FloodWaitError) as e:
            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê - –ù–ï –ñ–î–ï–ú, –ê –°–†–ê–ó–£ –ó–ê–í–ï–†–®–ê–ï–ú –ê–ö–ö–ê–£–ù–¢!
            user.status = UserStatus.FLOOD_WAIT
            user.last_attempt = datetime.now()
            user.error_message = f"FloodWait: {str(e)}"

            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if self.realtime_logger:
                self.realtime_logger.update_user_status_immediately(user)

            self.chat_thread.parent.processed_users[username] = user

            # –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ –ù–ï –ñ–î–ï–ú!
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] üö´ –ü–û–õ–£–ß–ï–ù –§–õ–£–î - –ó–ê–í–ï–†–®–ê–ï–ú –ê–ö–ö–ê–£–ù–¢: {str(e)}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return "FLOOD_WAIT"

        except UserPrivacyRestrictedError:
            user.status = UserStatus.PRIVACY
            user.last_attempt = datetime.now()
            user.error_message = "–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"

            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if self.realtime_logger:
                self.realtime_logger.update_user_status_immediately(user)

            self.chat_thread.parent.processed_users[username] = user
            return "PRIVACY"

        except (UserDeactivatedBanError, UserDeactivatedError):
            user.status = UserStatus.NOT_FOUND
            user.last_attempt = datetime.now()
            user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if self.realtime_logger:
                self.realtime_logger.update_user_status_immediately(user)

            self.chat_thread.parent.processed_users[username] = user
            return "NOT_FOUND"

        except Exception as e:
            error_msg = str(e)

            if "You're spamreported, you can't create channels or chats" in error_msg:
                user.status = UserStatus.SPAM_BLOCK
                user.last_attempt = datetime.now()
                user.error_message = "–°–ø–∞–º–±–ª–æ–∫"

                # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if self.realtime_logger:
                    self.realtime_logger.update_user_status_immediately(user)

                self.chat_thread.parent.processed_users[username] = user
                return "SPAM_BLOCK"
            else:
                user.status = UserStatus.ERROR
                user.last_attempt = datetime.now()
                user.error_message = f"–û—à–∏–±–∫–∞: {str(e)[:50]}"

                # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if self.realtime_logger:
                    self.realtime_logger.update_user_status_immediately(user)

                self.chat_thread.parent.processed_users[username] = user
                print(e)
                return "BLOCK_INVITE"

    def _count_accounts_used_in_chat(self) -> int:
        """
        üî• –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ
        """
        try:
            chat_link = self.chat_thread.chat_link
            accounts_count = 0

            # –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –î–û–ë–ê–í–õ–Ø–ï–ú –§–õ–£–î!
            all_finished_accounts = (
                    self.chat_thread.parent.finished_successfully_accounts |
                    self.chat_thread.parent.writeoff_accounts |
                    self.chat_thread.parent.spam_block_accounts |
                    self.chat_thread.parent.block_invite_accounts |
                    self.chat_thread.parent.frozen_accounts |
                    self.chat_thread.parent.blocked_accounts |
                    getattr(self.chat_thread.parent, 'flood_accounts', set())  # üî• –ù–û–í–û–ï –ú–ù–û–ñ–ï–°–¢–í–û!
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            all_finished_accounts.add(self.current_account_name)
            accounts_count = len(all_finished_accounts)

            return accounts_count

        except Exception as e:
            logger.error(f"[{self.chat_thread.parent.profile_name}] –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return 1  # –ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç

    async def _finalize_current_account(self, client_connected: bool):
        """üî• –û–ë–ù–û–í–õ–ï–ù–û: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –° –ü–†–û–í–ï–†–ö–û–ô –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø"""
        try:
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            await self._ensure_disconnected()

            # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            try:
                self.chat_thread.parent.account_manager.release_account(self.current_account_name, self.module_name)
            except Exception as e:
                logger.error(
                    f"[{self.chat_thread.parent.profile_name}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è: {e}")

            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–î–ï–†–ñ–ö–£ –§–õ–£–î –ê–ö–ö–ê–£–ù–¢–û–í
            if (self.current_account_name in self.chat_thread.parent.writeoff_accounts or
                    self.current_account_name in self.chat_thread.parent.spam_block_accounts or
                    self.current_account_name in self.chat_thread.parent.block_invite_accounts or
                    self.current_account_name in self.chat_thread.parent.finished_successfully_accounts or
                    self.current_account_name in self.chat_thread.parent.frozen_accounts or
                    self.current_account_name in self.chat_thread.parent.blocked_accounts or
                    self.current_account_name in getattr(self.chat_thread.parent, 'flood_accounts',
                                                         set())):  # üî• –ù–û–í–û–ï –£–°–õ–û–í–ò–ï!

                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞–ø–∫–∏ - –î–û–ë–ê–í–õ–Ø–ï–ú –§–õ–£–î!
                    if self.current_account_name in self.chat_thread.parent.writeoff_accounts:
                        problem_type = 'writeoff'
                    elif self.current_account_name in self.chat_thread.parent.spam_block_accounts:
                        problem_type = 'spam_block'
                    elif self.current_account_name in self.chat_thread.parent.block_invite_accounts:
                        problem_type = 'block_invite'
                    elif self.current_account_name in self.chat_thread.parent.finished_successfully_accounts:
                        problem_type = 'finished'
                    elif self.current_account_name in self.chat_thread.parent.frozen_accounts:
                        problem_type = 'frozen'
                    elif self.current_account_name in getattr(self.chat_thread.parent, 'flood_accounts',
                                                              set()):  # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê!
                        problem_type = 'flood'
                    else:
                        problem_type = 'dead'

                    success = self.chat_thread.parent.account_mover.move_account(self.current_account_name,
                                                                                 problem_type)

                    if success:
                        logger.success(
                            f"[{self.chat_thread.parent.profile_name}]-[{self.current_account_name}] üìÅ –§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {problem_type}")
                    else:
                        logger.warning(
                            f"[{self.chat_thread.parent.profile_name}]-[{self.current_account_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã")

                except Exception as e:
                    logger.error(
                        f"[{self.chat_thread.parent.profile_name}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    async def _update_account_status_in_manager(self, new_status: str):
        """üî• –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –ø—É—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º account_data –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if hasattr(self.chat_thread.parent.account_manager, 'traffic_accounts'):
                if self.current_account_name in self.chat_thread.parent.account_manager.traffic_accounts:
                    account_data = self.chat_thread.parent.account_manager.traffic_accounts[self.current_account_name]

                    old_status = account_data.status
                    account_data.status = new_status

                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                    account_data.is_busy = False
                    account_data.busy_by = None

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                    from paths import WORK_TRAFFER_FOLDER
                    folder_mapping = {
                        'writeoff': WORK_TRAFFER_FOLDER / "–°–ø–∏—Å–∞–Ω–Ω—ã–µ",
                        'spam_block': WORK_TRAFFER_FOLDER / "–°–ø–∞–º_–±–ª–æ–∫",
                        'block_invite': WORK_TRAFFER_FOLDER / "–ë–ª–æ–∫_–∏–Ω–≤–∞–π—Ç–æ–≤",
                        'frozen': WORK_TRAFFER_FOLDER / "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ",
                        'dead': WORK_TRAFFER_FOLDER / "–ú–µ—Ä—Ç–≤—ã–µ",
                        'finished': WORK_TRAFFER_FOLDER / "–£—Å–ø–µ—à–Ω–æ_–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ",
                        'flood': WORK_TRAFFER_FOLDER / "–§–ª—É–¥"  # üî• –ù–û–í–û–ï MAPPING –¥–ª—è —Ñ–ª—É–¥–∞
                    }

                    if new_status in folder_mapping:
                        new_folder = folder_mapping[new_status]
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ account_data
                        account_data.account.session_path = new_folder / f"{self.current_account_name}.session"
                        account_data.account.json_path = new_folder / f"{self.current_account_name}.json"

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {e}")

    def _show_account_finish_stats(self, reason: str, account_invites: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            chat_link = self.chat_thread.chat_link
            chat_success = self.chat_thread.parent.chat_stats.get(chat_link, {}).get("success", 0)
            chat_total = self.chat_thread.parent.chat_stats.get(chat_link, {}).get("total", 0)
            accounts_used = self._count_accounts_used_in_chat()

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏
            users_remaining = self.chat_thread.parent.user_queue.qsize()

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            total_users = getattr(self.chat_thread.parent, 'total_users_count', users_remaining + chat_total)

            logger.success(
                f"üíº –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–ê: ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {chat_success}, üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {chat_total}, üë• –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_used}, üìä –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å: {users_remaining} –∏–∑ {total_users}, –ß–∞—Ç {self.chat_thread.chat_link}")

        except Exception as e:
            logger.error(f"[{self.chat_thread.parent.profile_name}] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")

    async def _join_chat(self):
        """–í—Ö–æ–¥ –≤ —á–∞—Ç"""
        try:
            result = await self.thread_account.join(self.chat_thread.chat_link)

            if result == "ALREADY_PARTICIPANT":
                logger.success(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –£–∂–µ –≤ —á–∞—Ç–µ")
                return "SUCCESS"
            elif result == "FROZEN_ACCOUNT":
                return "FROZEN_ACCOUNT"
            elif result == "CHAT_NOT_FOUND":
                return "CHAT_NOT_FOUND"
            elif isinstance(result, str) and result.startswith("ERROR:"):
                return "ERROR"
            else:
                logger.success(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –í—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç")
                return "SUCCESS"

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç: {e}")
            return "ERROR"

    async def _revoke_rights(self, thread_user_id: int):
        """–û—Ç–∑—ã–≤ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω—É"""
        try:
            response_queue = queue.Queue()
            command = AdminCommand(
                action="REVOKE_RIGHTS",
                worker_name=self.current_account_name,
                worker_user_id=thread_user_id,
                worker_access_hash=0,
                chat_link=self.chat_thread.chat_link,
                response_queue=response_queue
            )

            self.chat_thread.parent.admin_command_queue.put(command)

            try:
                response_queue.get(timeout=15)
                logger.success(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã")
            except queue.Empty:
                logger.warning(
                    f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –¢–∞–π–º–∞—É—Ç –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤")

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤: {e}")

    async def _ensure_disconnected(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telethon —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            if self.thread_account and self.thread_account.client:
                if hasattr(self.thread_account.client, 'is_connected') and self.thread_account.client.is_connected():
                    await self.thread_account.disconnect()
                else:
                    logger.debug(f"[{self.current_account_name}] –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω")
            else:
                logger.debug(f"[{self.current_account_name}] –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            logger.warning(f"[{self.current_account_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): {e}")
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –º—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å

    async def _disconnect(self):
        """–ú–Ø–ì–ö–û–ï –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞"""
        await self._ensure_disconnected()

    async def _handle_problem(self, problem_type: str):
        """üî• –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –° –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï–ú"""
        try:
            # –°–ù–ê–ß–ê–õ–ê –æ—Ç–∫–ª—é—á–∞–µ–º
            await self._ensure_disconnected()

            # –ü–æ—Ç–æ–º –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.chat_thread.parent._mark_account_as_processed(self.current_account_name, problem_type)

            if problem_type in ['frozen', 'spam_limit']:
                self.chat_thread.parent.frozen_accounts.add(self.current_account_name)
            elif problem_type == 'flood':  # üî• –ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–õ–£–î–ê!
                if not hasattr(self.chat_thread.parent, 'flood_accounts'):
                    self.chat_thread.parent.flood_accounts = set()
                self.chat_thread.parent.flood_accounts.add(self.current_account_name)
            else:
                self.chat_thread.parent.blocked_accounts.add(self.current_account_name)

        except Exception as e:
            logger.error(
                f"[{self.chat_thread.parent.profile_name}]-[–ü–æ—Ç–æ–∫-{self.chat_thread.chat_id}]-[{self.chat_thread.chat_link}]-[{self.current_account_name}] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏: {e}")