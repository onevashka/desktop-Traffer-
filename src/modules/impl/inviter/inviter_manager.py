# src/modules/impl/inviter/inviter_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ß–ï–†–ï–ó PROFILE_MANAGER
"""

from typing import Dict, List, Optional, Tuple
from loguru import logger
from paths import Path
from .profile_manager import InviterProfileManager


class InviterModuleManager:
    """
    –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏, –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """

    def __init__(self):
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profile_manager = InviterProfileManager()

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        self.active_processes: Dict[str, any] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._stats_cache = {}

        logger.info("üì® InviterModuleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üì® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
            await self.load_profiles()

            logger.info("‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤!")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {e}")

    async def load_profiles(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        try:
            profiles = self.profile_manager.load_all_profiles()
            logger.info(f"üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
            self._update_stats_cache()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø–ú–ò
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def create_profile(self, profile_name: str, initial_settings: Dict = None) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            result = self.profile_manager.create_profile(profile_name, initial_settings)

            if result['success']:
                self._update_stats_cache()
                logger.info(f"üì® –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {profile_name}")

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–æ–¥—É–ª–µ {profile_name}: {e}")
            return {'success': False, 'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}

    def delete_profile(self, profile_name: str) -> Dict[str, any]:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
            if profile_name in self.active_processes:
                self.stop_profile(profile_name)

            result = self.profile_manager.delete_profile(profile_name)

            if result['success']:
                self._update_stats_cache()
                logger.info(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {profile_name}")

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–æ–¥—É–ª–µ {profile_name}: {e}")
            return {'success': False, 'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}

    def get_all_profiles_for_gui(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è GUI"""
        try:
            profiles = self.profile_manager.get_all_profiles()

            for profile in profiles:
                profile_name = profile['name']
                profile['is_running'] = profile_name in self.active_processes

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                invite_type = profile.get('config', {}).get('invite_type', 'classic')
                profile['invite_type'] = invite_type
                profile['invite_type_display'] = "ü§ñ –ê–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–∏–Ω–≥" if invite_type == 'admin' else "üë• –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π"

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if profile_name in self.active_processes:
                    process = self.active_processes[profile_name]
                    profile['process_stats'] = {
                        'is_running': process.is_alive() if hasattr(process, 'is_alive') else True,
                        'profile_name': profile_name,
                        'started_at': process.started_at if hasattr(process, 'started_at') else None,
                        'invite_type': invite_type
                    }

            return profiles

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è GUI: {e}")
            return []

    def update_profile_users(self, profile_name: str, users_list: List[str]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ò–°–ü–û–õ–¨–ó–£–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–Æ –ò–ó PROFILE_MANAGER)
        """
        try:
            # –¢–µ–ø–µ—Ä—å –≤—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ profile_manager
            success = self.profile_manager.update_users_database(profile_name, users_list)

            if success:
                self._update_stats_cache()
                logger.info(f"üìù –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {profile_name}")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–æ–¥—É–ª–µ {profile_name}: {e}")
            return False

    def update_profile_chats(self, profile_name: str, chats_list: List[str]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤ (–ò–°–ü–û–õ–¨–ó–£–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–Æ –ò–ó PROFILE_MANAGER)
        """
        try:
            # –¢–µ–ø–µ—Ä—å –≤—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ profile_manager
            success = self.profile_manager.update_chats_database(profile_name, chats_list)

            if success:
                self._update_stats_cache()
                logger.info(f"üí¨ –ë–∞–∑–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {profile_name}")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –º–æ–¥—É–ª–µ {profile_name}: {e}")
            return False

    def update_profile_config(self, profile_name: str, config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            validated_config = self._validate_config(config)

            success = self.profile_manager.update_profile_config(profile_name, validated_config)

            if success:
                logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {profile_name}")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ {profile_name}: {e}")
            return False

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üöÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê–ú–ò –ò–ù–í–ê–ô–¢–ò–ù–ì–ê
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def start_profile(self, profile_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            profile = self.profile_manager.get_profile(profile_name)
            if not profile:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            if profile_name in self.active_processes:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω: {profile_name}")
                return True

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            invite_type = profile.get('config', {}).get('invite_type', 'classic')

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            validation = self._validate_profile_for_start(profile)
            if not validation['valid']:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É: {validation['message']}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º AccountManager
            from src.accounts.manager import _account_manager
            if not _account_manager:
                logger.error("‚ùå AccountManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False

            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è {profile_name} —Å —Ç–∏–ø–æ–º: {invite_type}")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if invite_type == 'classic':
                from .classic_inviter import ClassicInviterProcess
                inviter_process = ClassicInviterProcess(
                    profile_name=profile_name,
                    profile_data=profile,
                    account_manager=_account_manager
                )
            elif invite_type == 'admin':
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä–∞
                admin_validation = self._validate_admin_profile(profile)
                if not admin_validation['valid']:
                    logger.error(f"‚ùå –ê–¥–º–∏–Ω-–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –≥–æ—Ç–æ–≤: {admin_validation['message']}")
                    return False

                from .admin_inviter import AdminInviterProcess
                inviter_process = AdminInviterProcess(
                    profile_name=profile_name,
                    profile_data=profile,
                    account_manager=_account_manager
                )
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω–≤–∞–π—Ç–∞: {invite_type}")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            inviter_process.start()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self.active_processes[profile_name] = inviter_process

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            self.profile_manager.set_profile_running(profile_name, True)
            self._update_stats_cache()

            logger.info(f"üöÄ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—â–µ–Ω: {profile_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return False


    def _validate_admin_inviter_profile(self, profile: Dict) -> Dict[str, any]:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç-–∞–∫–∫–∞—É–Ω—Ç–∞
        bot_account = profile.get('config', {}).get('bot_account')
        if not bot_account:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±–æ—Ç–∞")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
            from paths import BOT_HOLDERS_FOLDER
            account_name = bot_account.get('name')
            if not account_name:
                errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –±–æ—Ç-–∞–∫–∫–∞—É–Ω—Ç–∞")
            else:
                session_path = BOT_HOLDERS_FOLDER / f"{account_name}.session"
                json_path = BOT_HOLDERS_FOLDER / f"{account_name}.json"

                if not session_path.exists():
                    errors.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω session —Ñ–∞–π–ª –¥–ª—è –±–æ—Ç-–∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}")
                if not json_path.exists():
                    errors.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª –¥–ª—è –±–æ—Ç-–∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–æ–≤
        profile_folder = Path(profile['folder_path'])
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
        if not chats_file.exists():
            errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —á–∞—Ç–∞–º–∏")
        else:
            try:
                with open(chats_file, 'r', encoding='utf-8') as f:
                    chats = [line.strip() for line in f if line.strip()]
                if not chats:
                    errors.append("–§–∞–π–ª —á–∞—Ç–æ–≤ –ø—É—Å—Ç–æ–π")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–∞—Ç–æ–≤: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
        if not users_file.exists():
            errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        else:
            try:
                with open(users_file, 'r', encoding='utf-8') as f:
                    users = [line.strip() for line in f if line.strip()]
                if not users:
                    errors.append("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

        if errors:
            return {
                'valid': False,
                'message': '; '.join(errors)
            }

        return {'valid': True, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É'}

    def stop_profile(self, profile_name: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if profile_name not in self.active_processes:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω: {profile_name}")
                return True

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = self.active_processes[profile_name]

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            if hasattr(process, 'stop'):
                process.stop()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
                process.join(timeout=60)

                if process.is_alive():
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {profile_name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥")

            del self.active_processes[profile_name]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            self.profile_manager.set_profile_running(profile_name, False)
            self._update_stats_cache()

            logger.debug(f"‚è∏Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {profile_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return False

    def start_all_profiles(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        results = {}
        profiles = self.profile_manager.get_all_profiles()

        for profile in profiles:
            profile_name = profile['name']
            results[profile_name] = self.start_profile(profile_name)

        success_count = sum(results.values())
        logger.info(f"üöÄ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
        return results

    def stop_all_profiles(self) -> Dict[str, bool]:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        results = {}

        for profile_name in list(self.active_processes.keys()):
            results[profile_name] = self.stop_profile(profile_name)

        success_count = sum(results.values())
        logger.info(f"‚è∏Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
        return results

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def get_inviter_stats(self) -> List[Tuple[str, str, str, str]]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è GUI –∏–Ω–≤–∞–π—Ç–µ—Ä–∞

        Returns:
            List[Tuple[str, str, str, str]]: [(–Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ, —Ü–≤–µ—Ç, –∫–ª—é—á), ...]
        """
        try:
            stats = self.profile_manager.get_profile_stats()

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–≤–∞–π—Ç—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            total_success = sum(
                proc.get('stats', {}).get('success', 0)
                for proc in self.active_processes.values()
            )

            total_errors = sum(
                proc.get('stats', {}).get('errors', 0)
                for proc in self.active_processes.values()
            )

            return [
                ("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π", str(stats['active_profiles']), "#10B981", "active_profiles"),
                ("–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π", str(stats['total_profiles']), "#3B82F6", "total_profiles"),
                ("–£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤", str(total_success), "#059669", "success_invites"),
                ("–û—à–∏–±–æ–∫", str(total_errors), "#EF4444", "errors"),
                ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–∞—Ö", str(stats['total_users']), "#8B5CF6", "total_users"),
                ("–ß–∞—Ç–æ–≤ –≤ –±–∞–∑–∞—Ö", str(stats['total_chats']), "#F59E0B", "total_chats")
            ]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return [("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "0", "#EF4444", "error")]

    def get_detailed_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è"""
        try:
            profile_stats = self.profile_manager.get_profile_stats()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            process_stats = {}
            for profile_name, process in self.active_processes.items():
                process_stats[profile_name] = process.get('stats', {})

            return {
                'profiles': profile_stats,
                'processes': process_stats,
                'module_status': 'active' if self.active_processes else 'idle'
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def get_profile_status(self, profile_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            profile = self.profile_manager.get_profile(profile_name)
            if not profile:
                return {'exists': False}

            is_running = profile_name in self.active_processes
            process_info = self.active_processes.get(profile_name, {})

            return {
                'exists': True,
                'is_running': is_running,
                'process_info': process_info,
                'users_count': len(profile.get('users_list', [])),
                'chats_count': len(profile.get('chats_list', [])),
                'config': profile.get('config', {})
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'exists': False, 'error': str(e)}

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîß –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ (–£–ü–†–û–©–ï–ù–ù–´–ï, –í–ê–õ–ò–î–ê–¶–ò–Ø –í–´–ù–ï–°–ï–ù–ê –í PROFILE_MANAGER)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _validate_config(self, config: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        safe_config = config.copy()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if safe_config.get('threads_per_chat', 0) < 1:
            safe_config['threads_per_chat'] = 1
        elif safe_config.get('threads_per_chat', 0) > 10:
            safe_config['threads_per_chat'] = 10

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        for limit_key in ['success_per_chat', 'success_per_account']:
            if safe_config.get(limit_key, 0) < 0:
                safe_config[limit_key] = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
        for delay_key in ['delay_after_start', 'delay_between']:
            if safe_config.get(delay_key, 0) < 0:
                safe_config[delay_key] = 0

        return safe_config

    def _validate_admin_profile(self, profile: Dict) -> Dict[str, any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø—Ä–æ—Ñ–∏–ª—è - –∏—â–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã"""
        errors = []

        try:
            config = profile.get('config', {})
            profile_folder = Path(profile['folder_path'])

            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –ò–ó –§–ê–ô–õ–ê (–Ω–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞!)
            from .data_loader import InviterDataLoader
            loader = InviterDataLoader(profile_folder)
            bot_token = loader._load_bot_token()

            if not bot_token:
                errors.append("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è {profile['name']}")
            elif ':' not in bot_token:
                errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile['name']}")
            else:
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è {profile['name']}")

            # –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã
            admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"
            main_admin_found = None

            if admins_folder.exists():
                # –ò—â–µ–º .session —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã
                session_files = list(admins_folder.glob("*.session"))
                if session_files:
                    main_admin_found = session_files[0].stem
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã: {main_admin_found}")
                else:
                    errors.append("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã")
            else:
                errors.append("–ü–∞–ø–∫–∞ –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ GUI")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
            if not chats_file.exists() or not chats_file.read_text(encoding='utf-8').strip():
                errors.append("–ë–∞–∑–∞ —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞")

            users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
            if not users_file.exists() or not users_file.read_text(encoding='utf-8').strip():
                errors.append("–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")

        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø—Ä–æ—Ñ–∏–ª—è: {e}")

        if errors:
            error_msg = '; '.join(errors)
            logger.error(f"‚ùå –ê–¥–º–∏–Ω-–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –≥–æ—Ç–æ–≤: {error_msg}")
            return {'valid': False, 'message': error_msg}

        success_msg = f'–ê–¥–º–∏–Ω-–ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: {main_admin_found}, —Ç–æ–∫–µ–Ω: {bot_token}'
        logger.info(f"‚úÖ {success_msg}")
        return {'valid': True, 'message': success_msg}

    def _validate_profile_for_start(self, profile_data: Dict) -> Dict[str, any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = profile_data.get('users_list', [])
        if not users_list:
            errors.append("–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É —á–∞—Ç–æ–≤
        chats_list = profile_data.get('chats_list', [])
        if not chats_list:
            errors.append("–ë–∞–∑–∞ —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = profile_data.get('config', {})
        if not config:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        from src.accounts.manager import _account_manager
        if _account_manager:
            active_accounts = [
                acc for acc in _account_manager.traffic_accounts.values()
                if acc.status == "active"
            ]
            if not active_accounts:
                errors.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
        else:
            errors.append("AccountManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        if errors:
            return {
                'valid': False,
                'message': '; '.join(errors)
            }

        return {'valid': True, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É'}

    def _update_stats_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            self._stats_cache = {
                'updated_at': 'now',
                'profiles': self.profile_manager.get_profile_stats(),
                'processes': len(self.active_processes)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def refresh_all(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è"""
        try:
            logger.info("üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            self.stop_all_profiles()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
            self.profile_manager.load_all_profiles()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            self._update_stats_cache()

            logger.info("‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {e}")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –î–õ–Ø –ú–û–î–£–õ–ï–ô (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

_inviter_module_manager: Optional[InviterModuleManager] = None


async def get_inviter_module_manager() -> InviterModuleManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""
    global _inviter_module_manager
    if _inviter_module_manager is None:
        _inviter_module_manager = InviterModuleManager()
        await _inviter_module_manager.initialize()
    return _inviter_module_manager


async def init_inviter_module() -> InviterModuleManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _inviter_module_manager
    logger.info("üì® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")
    _inviter_module_manager = await get_inviter_module_manager()
    logger.info("‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤!")
    return _inviter_module_manager


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üé® –§–£–ù–ö–¶–ò–ò –î–õ–Ø GUI - –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def get_inviter_stats() -> List[Tuple[str, str, str, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.get_inviter_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444", "error")]


def get_all_profiles_for_gui() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.get_all_profiles_for_gui()
    return []


def create_profile(profile_name: str, initial_settings: Dict = None) -> Dict[str, any]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.create_profile(profile_name, initial_settings)
    return {'success': False, 'message': '–ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}


def delete_profile(profile_name: str) -> Dict[str, any]:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.delete_profile(profile_name)
    return {'success': False, 'message': '–ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}


def start_profile(profile_name: str) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.start_profile(profile_name)
    return False


def stop_profile(profile_name: str) -> bool:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.stop_profile(profile_name)
    return False


def update_profile_users(profile_name: str, users_list: List[str]) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.update_profile_users(profile_name, users_list)
    return False


def update_profile_chats(profile_name: str, chats_list: List[str]) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.update_profile_chats(profile_name, chats_list)
    return False


def update_profile_config(profile_name: str, config: Dict) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.update_profile_config(profile_name, config)
    return False


def start_all_profiles() -> Dict[str, bool]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.start_all_profiles()
    return {}


def stop_all_profiles() -> Dict[str, bool]:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        return _inviter_module_manager.stop_all_profiles()
    return {}


def refresh_inviter_module():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ GUI"""
    global _inviter_module_manager
    if _inviter_module_manager:
        _inviter_module_manager.refresh_all()


def get_profile_progress(profile_name: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–µ–π"""
    global _inviter_module_manager
    if _inviter_module_manager and profile_name in _inviter_module_manager.active_processes:
        process = _inviter_module_manager.active_processes[profile_name]

        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_data = {
            'profile_name': profile_name,
            'is_running': process.is_alive() if hasattr(process, 'is_alive') else False
        }

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if hasattr(process, 'total_processed'):
            progress_data['processed'] = process.total_processed
        else:
            progress_data['processed'] = 0

        if hasattr(process, 'total_success'):
            progress_data['success'] = process.total_success
        else:
            progress_data['success'] = 0

        if hasattr(process, 'total_errors'):
            progress_data['errors'] = process.total_errors
        else:
            progress_data['errors'] = 0

        # –í–ê–ñ–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if hasattr(process, 'config'):
            config = process.config
            chats_count = process.chat_queue.qsize() if hasattr(process, 'chat_queue') else 0

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
            if hasattr(process, 'initial_chats_count'):
                chats_count = process.initial_chats_count

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Ü–µ–ª—å –∏–Ω–≤–∞–π—Ç–æ–≤
            if config.success_per_chat > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —á–∞—Ç - —Ü–µ–ª—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ * –ª–∏–º–∏—Ç –Ω–∞ —á–∞—Ç
                total_goal = chats_count * config.success_per_chat
            elif config.success_per_account > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç - —Ü–µ–ª—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ * –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
                accounts_count = len(process.account_stats) if hasattr(process, 'account_stats') else 1
                total_goal = accounts_count * config.success_per_account
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ - —Ü–µ–ª—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                total_goal = len(process.processed_users) + process.user_queue.qsize() if hasattr(process,
                                                                                                  'user_queue') else 100

            progress_data['total_goal'] = total_goal
            progress_data['total_users'] = total_goal  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        else:
            progress_data['total_goal'] = 100
            progress_data['total_users'] = 100

        # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(process, 'started_at') and process.started_at:
            from datetime import datetime
            elapsed = (datetime.now() - process.started_at).total_seconds()
            if elapsed > 0:
                speed = int((progress_data['success'] / elapsed) * 60)  # —É—Å–ø–µ—à–Ω—ã—Ö –≤ –º–∏–Ω—É—Ç—É
                progress_data['speed'] = speed
            else:
                progress_data['speed'] = 0
        else:
            progress_data['speed'] = 0

        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
        if progress_data['is_running']:
            if hasattr(process, 'chat_threads'):
                active_threads = sum(1 for t in process.chat_threads if t.is_alive())
                if active_threads > 0:
                    progress_data['status'] = f"–†–∞–±–æ—Ç–∞–µ—Ç ({active_threads} –ø–æ—Ç–æ–∫–æ–≤)"
                else:
                    progress_data['status'] = "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."
            else:
                progress_data['status'] = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
            if progress_data['success'] >= progress_data['total_goal'] and progress_data['total_goal'] > 0:
                progress_data['status'] = "‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
        else:
            progress_data['status'] = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        if hasattr(process, 'account_stats'):
            active_accounts = sum(1 for stats in process.account_stats.values()
                                  if hasattr(stats, 'status') and stats.status == 'working')
            finished_accounts = sum(1 for stats in process.account_stats.values()
                                    if hasattr(stats, 'status') and stats.status == 'finished')
            progress_data['active_accounts'] = active_accounts
            progress_data['finished_accounts'] = finished_accounts

        return progress_data

    return None