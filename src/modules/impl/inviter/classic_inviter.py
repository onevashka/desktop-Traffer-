# src/modules/impl/inviter/classic_inviter.py
"""
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import threading
import asyncio
import queue
from typing import Dict, List
from datetime import datetime
from loguru import logger

from .base_inviter import BaseInviterProcess
from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats

# –ò–º–ø–æ—Ä—Ç—ã Telethon
from telethon.tl.functions.channels import InviteToChannelRequest, JoinChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


class ClassicInviterProcess(BaseInviterProcess):
    """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–≤–∞–π—Ç–µ—Ä - –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –Ω–∞ —á–∞—Ç"""

    def __init__(self, profile_name: str, profile_data: Dict, account_manager):
        super().__init__(profile_name, profile_data, account_manager)
        self.chat_threads = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        self.account_stats: Dict[str, AccountStats] = {}

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.total_success = 0
        self.total_errors = 0
        self.total_processed = 0

    def _run_inviting(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–≤–∞–π—Ç–∏–Ω–≥"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if self.config.delay_after_start > 0:
            logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {self.config.delay_after_start} —Å–µ–∫...")
            self.stop_flag.wait(self.config.delay_after_start)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_chats = self.chat_queue.qsize()
        logger.info(f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_chats}")

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê –ê–ö–ö–ê–£–ù–¢–û–í
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
        total_invites_needed = total_chats * self.config.success_per_chat
        logger.info(f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –≤—Å–µ–≥–æ: {total_invites_needed}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –∏—Å—Ö–æ–¥—è –∏–∑ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        if self.config.success_per_account > 0:
            accounts_needed = (
                                          total_invites_needed + self.config.success_per_account - 1) // self.config.success_per_account
            logger.info(
                f"üìä –†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_needed} (–ø–æ {self.config.success_per_account} –∏–Ω–≤–∞–π—Ç–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞)")
        else:
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            accounts_needed = total_chats * self.config.threads_per_chat
            logger.info(f"üìä –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º {accounts_needed} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        available_accounts = self.account_manager.get_free_accounts_count()
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {available_accounts}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        initial_accounts_to_request = min(accounts_needed, available_accounts)

        if initial_accounts_to_request < accounts_needed:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {accounts_needed}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}")
            logger.info(
                f"üìä –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {initial_accounts_to_request} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        module_name = f"inviter_{self.profile_name}"
        allocated_accounts = self.account_manager.get_free_accounts(module_name, initial_accounts_to_request)

        if not allocated_accounts:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            return

        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: {len(allocated_accounts)}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
        chat_index = 0
        account_index = 0

        while self.chat_queue.qsize() > 0 and not self.stop_flag.is_set():
            try:
                chat = self.chat_queue.get_nowait()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                if account_index >= len(allocated_accounts):
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                    additional_accounts = self.account_manager.get_free_accounts(
                        module_name,
                        self.config.threads_per_chat
                    )

                    if additional_accounts:
                        allocated_accounts.extend(additional_accounts)
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {len(additional_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    else:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                        self.chat_queue.put(chat)
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat}, –æ—Ç–ª–æ–∂–µ–Ω")
                        break

                # –í—ã–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                chat_accounts = []
                accounts_to_allocate = min(self.config.threads_per_chat, len(allocated_accounts) - account_index)

                for j in range(accounts_to_allocate):
                    if account_index < len(allocated_accounts):
                        chat_accounts.append(allocated_accounts[account_index])
                        account_index += 1

                if not chat_accounts:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
                    self.chat_queue.put(chat)
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —á–∞—Ç–∞ {chat}")
                    break

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
                thread = ChatWorkerThread(
                    chat_id=chat_index + 1,
                    chat_link=chat,
                    accounts=chat_accounts,
                    parent=self
                )
                thread.start()
                self.chat_threads.append(thread)
                chat_index += 1

                logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞ #{chat_index}: {chat} (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(chat_accounts)})")

            except queue.Empty:
                break

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        self._wait_for_threads()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        if self.chat_queue.qsize() > 0:
            logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {self.chat_queue.qsize()}")

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_final_stats()

    def _wait_for_threads(self):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

        while not self.stop_flag.is_set():
            alive = [t for t in self.chat_threads if t.is_alive()]

            if not alive:
                logger.info("‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.user_queue.empty() and self.total_processed > 0:
                logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                # –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–∞–∑—É, –¥–∞–µ–º –ø–æ—Ç–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                # self.stop()
                # break

            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            free_accounts = self.account_manager.get_free_accounts_count()
            logger.info(
                f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(alive)} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_processed} | –£—Å–ø–µ—à–Ω–æ: {self.total_success} | –°–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {free_accounts}")

            self.stop_flag.wait(10)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.chat_threads:
            if thread.is_alive():
                thread.join(timeout=30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç

    def update_account_stats(self, account_name: str, success: bool = False,
                             spam_block: bool = False, error: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_name not in self.account_stats:
            self.account_stats[account_name] = AccountStats(name=account_name)

        stats = self.account_stats[account_name]

        if success:
            stats.invites += 1
            self.total_success += 1
        if error:
            stats.errors += 1
            self.total_errors += 1
        if spam_block:
            stats.spam_blocks += 1
            stats.consecutive_spam += 1
        else:
            stats.consecutive_spam = 0

        self.total_processed += 1

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_processed}")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.total_success}")
        logger.info(f"   –û—à–∏–±–æ–∫: {self.total_errors}")

        if self.total_processed > 0:
            success_rate = (self.total_success / self.total_processed) * 100
            logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:")
        for account_name, stats in self.account_stats.items():
            logger.info(
                f"   {account_name}: –∏–Ω–≤–∞–π—Ç–æ–≤={stats.invites}, –æ—à–∏–±–æ–∫={stats.errors}, —Å–ø–∞–º–±–ª–æ–∫–æ–≤={stats.spam_blocks}")

        logger.info("=" * 60)


class ChatWorkerThread(threading.Thread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞"""

    def __init__(self, chat_id: int, chat_link: str, accounts: List, parent: ClassicInviterProcess):
        super().__init__(name=f"Chat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.accounts = accounts  # –ê–∫–∫–∞—É–Ω—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        self.parent = parent

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        self.chat_success = 0
        self.chat_errors = 0
        self.chat_processed = 0

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(self._work())

        except Exception as e:
            logger.error(f"‚ùå [Chat-{self.chat_id}] –û—à–∏–±–∫–∞: {e}")
        finally:
            loop.close()

    async def _work(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–¢–û–ö–ê–ú–ò"""
        logger.info(f"üöÄ [Chat-{self.chat_id}] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å {self.chat_link}")
        logger.info(f"üë• [Chat-{self.chat_id}] –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")

        # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —á–∞—Ç–∞
        chat_completed = False

        # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        active_workers = []
        active_workers_lock = threading.Lock()

        # –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º
        while not chat_completed and not self.parent.stop_flag.is_set():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
            worker_threads = []

            for i, account_data in enumerate(self.accounts):
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                worker_thread = threading.Thread(
                    target=self._run_worker_in_thread,
                    args=(i + 1, account_data, active_workers, active_workers_lock),
                    name=f"Chat-{self.chat_id}-Worker-{i + 1}"
                )
                worker_thread.start()
                worker_threads.append(worker_thread)

            logger.info(f"üöÄ [Chat-{self.chat_id}] –ó–∞–ø—É—â–µ–Ω–æ {len(worker_threads)} –ø–æ—Ç–æ–∫–æ–≤ –≤–æ—Ä–∫–µ—Ä–æ–≤")

            # –ù–ï –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö! –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            while not self.parent.stop_flag.is_set():
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await asyncio.sleep(2)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                with active_workers_lock:
                    still_working = len(active_workers)

                if still_working == 0:
                    logger.info(f"‚úÖ [Chat-{self.chat_id}] –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if self.parent.config.success_per_chat > 0 and self.chat_success >= self.parent.config.success_per_chat:
                    logger.success(f"‚úÖ [Chat-{self.chat_id}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.chat_success}")
                    chat_completed = True
                    break

                if self.parent.user_queue.empty():
                    logger.info(f"‚úÖ [Chat-{self.chat_id}] –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞")
                    # –î–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞–º –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    await asyncio.sleep(5)
                    chat_completed = True
                    break

                logger.debug(
                    f"üìä [Chat-{self.chat_id}] –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {still_working}, —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {self.chat_success}")

            # –¢–µ–ø–µ—Ä—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É
            module_name = f"inviter_{self.parent.profile_name}"
            released_count = 0

            for account_data in self.accounts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –µ—â–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
                account_working = False
                with active_workers_lock:
                    account_working = account_data.name in active_workers

                if not account_working:
                    self.parent.account_manager.release_account(account_data.name, module_name)
                    released_count += 1

            logger.info(f"üîì [Chat-{self.chat_id}] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Ä–∞–±–æ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {released_count}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É
            if chat_completed:
                break

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if not self.parent.user_queue.empty():
                logger.info(f"üîÑ [Chat-{self.chat_id}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")

                new_accounts = self.parent.account_manager.get_multiple_free_accounts(
                    module_name,
                    self.parent.config.threads_per_chat
                )

                if not new_accounts:
                    logger.warning(f"‚ö†Ô∏è [Chat-{self.chat_id}] –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —á–∞—Ç–æ–º")
                    chat_completed = True
                    break

                self.accounts = new_accounts
                logger.info(f"‚úÖ [Chat-{self.chat_id}] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(new_accounts)}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –∂–¥–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Ç–æ–∫–∏
        logger.info(f"üßπ [Chat-{self.chat_id}] –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ—Ä–∫–µ—Ä–æ–≤...")

        # –î–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        await asyncio.sleep(5)

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã
        module_name = f"inviter_{self.parent.profile_name}"
        for account_data in self.accounts:
            self.parent.account_manager.release_account(account_data.name, module_name)

        logger.info(f"‚úÖ [Chat-{self.chat_id}] –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info(
            f"üìä [Chat-{self.chat_id}] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={self.chat_processed}, —É—Å–ø–µ—à–Ω–æ={self.chat_success}, –æ—à–∏–±–æ–∫={self.chat_errors}")

    def _run_worker_in_thread(self, worker_id: int, account_data, active_workers: list, lock: threading.Lock):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        with lock:
            active_workers.append(account_data.name)

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            loop.run_until_complete(self._run_worker(worker_id, account_data))

            loop.close()
        except Exception as e:
            logger.error(f"‚ùå [Worker-{worker_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            with lock:
                if account_data.name in active_workers:
                    active_workers.remove(account_data.name)

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            module_name = f"inviter_{self.parent.profile_name}"
            self.parent.account_manager.release_account(account_data.name, module_name)
            logger.info(f"üîì [Worker-{worker_id}] –ê–∫–∫–∞—É–Ω—Ç {account_data.name} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")

    async def _run_worker(self, worker_id: int, account_data):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        account_name = account_data.name
        account = account_data.account

        logger.info(f"üë∑ [Chat-{self.chat_id}][Worker-{worker_id}] –ó–∞–ø—É—Å–∫ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_name}")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
            await account.create_client()

            if not await account.connect():
                logger.error(f"‚ùå [Worker-{worker_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å {account_name}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await account.client.is_user_authorized():
                logger.error(f"‚ùå [Worker-{worker_id}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await account.disconnect()
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                me = await account.client.get_me()
                logger.info(
                    f"‚úÖ [Worker-{worker_id}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {me.first_name} {me.last_name or ''} (@{me.username or 'no_username'})")
            except Exception as e:
                logger.error(f"‚ùå [Worker-{worker_id}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
                await account.disconnect()
                return

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
            join_result = await self._join_chat(account, worker_id)
            if not join_result:
                logger.error(f"‚ùå [Worker-{worker_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É")
                await account.disconnect()
                return

            invites_count = 0
            errors_count = 0

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            while not self.parent.stop_flag.is_set():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞
                if self.parent.config.success_per_chat > 0:
                    if self.chat_success >= self.parent.config.success_per_chat:
                        logger.info(
                            f"üéØ [Chat-{self.chat_id}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞: {self.chat_success}")
                        break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                if self.parent.config.success_per_account > 0:
                    if invites_count >= self.parent.config.success_per_account:
                        logger.info(f"üéØ [Worker-{worker_id}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {invites_count}")
                        break

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user = self.parent.user_queue.get_nowait()
                except queue.Empty:
                    logger.info(f"‚úÖ [Worker-{worker_id}] –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
                    break

                # –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = await self._invite_user(user, account, account_name, worker_id)

                if success:
                    invites_count += 1
                    self.chat_success += 1
                else:
                    errors_count += 1

                self.chat_processed += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                self.parent.update_account_stats(
                    account_name,
                    success=success,
                    spam_block=(user.status == UserStatus.SPAM_BLOCK),
                    error=(not success)
                )

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
                if self.parent.config.delay_between > 0:
                    await asyncio.sleep(self.parent.config.delay_between)

            logger.info(f"üìä [Worker-{worker_id}] –ó–∞–≤–µ—Ä—à–µ–Ω. –ò–Ω–≤–∞–π—Ç–æ–≤: {invites_count}, –æ—à–∏–±–æ–∫: {errors_count}")

        except Exception as e:
            logger.error(f"‚ùå [Worker-{worker_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
            try:
                await account.disconnect()
            except:
                pass

    async def _join_chat(self, account, worker_id: int) -> bool:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É"""
        try:
            await account.client(JoinChannelRequest(self.chat_link))
            logger.info(f"‚úÖ [Worker-{worker_id}] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {self.chat_link}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.parent.config.delay_after_start > 0:
                await asyncio.sleep(self.parent.config.delay_after_start)

            return True

        except Exception as e:
            error_text = str(e)
            if "already a participant" in error_text.lower():
                logger.info(f"‚ÑπÔ∏è [Worker-{worker_id}] –£–∂–µ –≤ —á–∞—Ç–µ {self.chat_link}")
                return True
            elif "wait" in error_text.lower():
                logger.warning(f"‚è≥ [Worker-{worker_id}] –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
                return False
            else:
                logger.error(f"‚ùå [Worker-{worker_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É: {e}")
                return False

    async def _invite_user(self, user: InviteUser, account, account_name: str, worker_id: int) -> bool:
        """–ò–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telethon"""
        client = account.client

        if not client or not client.is_connected():
            logger.error(f"‚ùå [Worker-{worker_id}][{account_name}] –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        username = user.username
        if username.startswith('@'):
            username = username[1:]

        logger.info(f"üì® [Worker-{worker_id}][{account_name}] –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å @{username} –≤ {self.chat_link}")

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤
            try:
                full_user = await client(GetFullUserRequest(username))
                old_common_chats = full_user.full_user.common_chats_count
            except (ValueError, TypeError, UsernameInvalidError, UsernameNotOccupiedError):
                logger.warning(f"‚ùì [Worker-{worker_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                user.status = UserStatus.NOT_FOUND
                user.last_attempt = datetime.now()
                user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                self.parent.processed_users[username] = user
                return False

            # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            result = await client(InviteToChannelRequest(
                channel=self.chat_link,
                users=[username]
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ missing_invitees (–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å)
            if result.missing_invitees:
                logger.warning(f"üîí [Worker-{worker_id}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                user.status = UserStatus.PRIVACY
                user.last_attempt = datetime.now()
                user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
                self.parent.processed_users[username] = user
                return False

            # 3. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏–ª—Å—è
            await asyncio.sleep(20)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

            full_user2 = await client(GetFullUserRequest(username))
            new_common_chats = full_user2.full_user.common_chats_count

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å - —Å–ø–∏—Å–∞–Ω–∏–µ
            if new_common_chats <= old_common_chats:
                logger.warning(f"üí∏ [Worker-{worker_id}] @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å—Ä–∞–∑—É —Å–ø–∏—Å–∞–Ω")
                user.status = UserStatus.ERROR
                user.last_attempt = datetime.now()
                user.error_message = "–°–ø–∏—Å–∞–Ω–∏–µ"
                self.parent.processed_users[username] = user
                return False

            # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
            logger.success(f"‚úÖ [Worker-{worker_id}][{account_name}] @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            user.status = UserStatus.INVITED
            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return True

        except (PeerFloodError, FloodWaitError) as e:
            logger.error(f"üö´ [Worker-{worker_id}][{account_name}] –°–ø–∞–º–±–ª–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ @{username}")
            user.status = UserStatus.SPAM_BLOCK
            user.last_attempt = datetime.now()
            user.error_message = "–°–ø–∞–º–±–ª–æ–∫"
            self.parent.processed_users[username] = user
            return False

        except UserPrivacyRestrictedError:
            logger.warning(f"üîí [Worker-{worker_id}] @{username} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
            user.status = UserStatus.PRIVACY
            user.last_attempt = datetime.now()
            user.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
            self.parent.processed_users[username] = user
            return False

        except (UserDeactivatedBanError, UserDeactivatedError):
            logger.warning(f"üö´ [Worker-{worker_id}] @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram")
            user.status = UserStatus.NOT_FOUND
            user.last_attempt = datetime.now()
            user.error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            self.parent.processed_users[username] = user
            return False

        except (ChatAdminRequiredError, ChatWriteForbiddenError):
            logger.error(f"‚ùå [Worker-{worker_id}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ {self.chat_link}")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ"
            self.parent.processed_users[username] = user
            return False

        except ChannelsTooMuchError:
            logger.warning(f"üìä [Worker-{worker_id}] @{username} —É–∂–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Ç–æ–≤")
            user.status = UserStatus.ERROR
            user.last_attempt = datetime.now()
            user.error_message = "–ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤"
            self.parent.processed_users[username] = user
            return False

        except Exception as e:
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            error_text = str(e)

            if "CHAT_MEMBER_ADD_FAILED" in error_text:
                logger.error(f"‚ùå [Worker-{worker_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å @{username}")
                user.status = UserStatus.ERROR
                user.error_message = "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"

            elif "You're banned from sending messages" in error_text:
                logger.error(f"üö´ [Worker-{worker_id}][{account_name}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤")
                user.status = UserStatus.ERROR
                user.error_message = "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

            elif "user was kicked" in error_text.lower():
                logger.warning(f"üö´ [Worker-{worker_id}] @{username} –±—ã–ª —Ä–∞–Ω–µ–µ –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞")
                user.status = UserStatus.ALREADY_IN
                user.error_message = "–ë—ã–ª –∫–∏–∫–Ω—É—Ç"

            elif "already in too many channels" in error_text.lower():
                logger.warning(f"üìä [Worker-{worker_id}] @{username} –≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö —á–∞—Ç–∞—Ö")
                user.status = UserStatus.ERROR
                user.error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Ç–æ–≤"

            else:
                logger.error(f"‚ùå [Worker-{worker_id}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
                user.status = UserStatus.ERROR
                user.error_message = f"–û—à–∏–±–∫–∞: {error_text[:50]}"

            user.last_attempt = datetime.now()
            self.parent.processed_users[username] = user
            return False