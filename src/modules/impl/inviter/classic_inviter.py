# src/modules/impl/inviter/classic_inviter_simple.py
"""
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import threading
import asyncio
import queue
from typing import Dict, Optional
from datetime import datetime
from loguru import logger

from .base_inviter_simple import BaseInviterProcess
from src.entities.modules.inviter import InviteUser, UserStatus


class ClassicInviterProcess(BaseInviterProcess):
    """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–≤–∞–π—Ç–µ—Ä - –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –Ω–∞ —á–∞—Ç"""

    def __init__(self, profile_name: str, profile_data: Dict, accounts_list: list):
        super().__init__(profile_name, profile_data, accounts_list)
        self.chat_threads = []

    def _run_inviting(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–≤–∞–π—Ç–∏–Ω–≥"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if self.config.delay_after_start > 0:
            logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {self.config.delay_after_start} —Å–µ–∫...")
            self.stop_flag.wait(self.config.delay_after_start)

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        chat_count = self.chat_queue.qsize()
        logger.info(f"üí¨ –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è {chat_count} —á–∞—Ç–æ–≤")

        for i in range(chat_count):
            if self.stop_flag.is_set():
                break

            try:
                chat = self.chat_queue.get_nowait()

                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞
                thread = ChatWorkerThread(
                    chat_id=i + 1,
                    chat_link=chat,
                    parent=self
                )
                thread.start()
                self.chat_threads.append(thread)

                logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞ #{i + 1}: {chat}")

            except queue.Empty:
                break

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        self._wait_for_threads()

    def _wait_for_threads(self):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

        while not self.stop_flag.is_set():
            alive = [t for t in self.chat_threads if t.is_alive()]

            if not alive:
                logger.info("‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.account_pool.get_active_count() == 0:
                logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                self.stop()
                break

            if self.user_queue.empty() and len(self.processed_users) > 0:
                logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                self.stop()
                break

            self.stop_flag.wait(5)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.chat_threads:
            if thread.is_alive():
                thread.join(timeout=10)


class ChatWorkerThread(threading.Thread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞"""

    def __init__(self, chat_id: int, chat_link: str, parent: ClassicInviterProcess):
        super().__init__(name=f"Chat-{chat_id}")
        self.chat_id = chat_id
        self.chat_link = chat_link
        self.parent = parent

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(self._work())

        except Exception as e:
            logger.error(f"‚ùå [Chat-{self.chat_id}] –û—à–∏–±–∫–∞: {e}")
        finally:
            loop.close()

    async def _work(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º"""
        logger.info(f"üöÄ [Chat-{self.chat_id}] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å {self.chat_link}")

        # –°–æ–∑–¥–∞–µ–º worker-—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        workers_count = self.parent.config.threads_per_chat
        logger.info(f"üîß [Chat-{self.chat_id}] –°–æ–∑–¥–∞–µ–º {workers_count} –≤–æ—Ä–∫–µ—Ä–æ–≤")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
        tasks = []
        for i in range(workers_count):
            task = asyncio.create_task(
                self._run_worker(i + 1)
            )
            tasks.append(task)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(*tasks, return_exceptions=True)

        logger.info(f"‚úÖ [Chat-{self.chat_id}] –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _run_worker(self, worker_id: int):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        logger.info(f"üë∑ [Chat-{self.chat_id}][Worker-{worker_id}] –ó–∞–ø—É—Å–∫")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account = self.parent.account_pool.get_account()
        if not account:
            logger.error(f"‚ùå [Worker-{worker_id}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return

        account_name = account.get('name', 'unknown')

        try:
            # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while not self.parent.stop_flag.is_set():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
                if self.parent.pause_flag.is_set():
                    await asyncio.sleep(1)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user = self.parent.user_queue.get_nowait()
                except queue.Empty:
                    logger.info(f"‚úÖ [Worker-{worker_id}] –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
                    break

                # –ò–Ω–≤–∞–π—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = await self._invite_user(user, account_name, worker_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.parent.account_pool.update_stats(
                    account_name,
                    success=success,
                    error_type='spam_block' if not success else None
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                if self.parent.account_pool.should_block_account(
                        account_name,
                        self.parent.config.__dict__
                ):
                    logger.warning(f"üö´ [Worker-{worker_id}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    break

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
                if self.parent.config.delay_between > 0:
                    await asyncio.sleep(self.parent.config.delay_between)

        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            should_block = self.parent.account_pool.should_block_account(
                account_name,
                self.parent.config.__dict__
            )
            self.parent.account_pool.release_account(account, block=should_block)

            logger.info(f"‚èπÔ∏è [Worker-{worker_id}] –ó–∞–≤–µ—Ä—à–µ–Ω")

    async def _invite_user(self, user: InviteUser, account_name: str,
                           worker_id: int) -> bool:
        """–ò–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        logger.info(f"üì® [Worker-{worker_id}][{account_name}] –ò–Ω–≤–∞–π—Ç @{user.username}")

        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–∞–π—Ç —á–µ—Ä–µ–∑ Telethon
        # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º
        await asyncio.sleep(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        user.status = UserStatus.INVITED
        user.last_attempt = datetime.now()
        self.parent.processed_users[user.username] = user

        return True