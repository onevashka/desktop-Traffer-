# src/modules/impl/inviter/bot_creator.py
"""
–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ BotFather
"""

import re
import asyncio
import random
from typing import Optional, Dict
from loguru import logger

from .bot_utils import (
    extract_token_from_text,
    normalize_username,
    generate_unique_username,
    create_bot_name,
    validate_bot_token
)


class BotCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ @BotFather"""

    async def create_bot_via_botfather(
            self,
            account,
            profile_name: str,
            timeout: int = 120
    ) -> Optional[Dict[str, str]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather

        Args:
            account: –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
            profile_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
            timeout: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å token –∏ username –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –¥–ª—è {account.name}")

            if not account.client.is_connected():
                await account.client.connect()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
            bot_name = self._generate_bot_name(profile_name, account.phone)
            base_username = self._generate_base_username(profile_name, account.phone)

            logger.info(f"   üìù –ò–º—è –±–æ—Ç–∞: {bot_name}")
            logger.info(f"   üìù –ë–∞–∑–æ–≤—ã–π username: {base_username}")

            # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å BotFather
            async with account.client.conversation('@BotFather', timeout=timeout) as conv:
                # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /newbot
                await conv.send_message('/newbot')
                await asyncio.sleep(1)

                response = await conv.get_response()
                logger.debug(f"BotFather –æ—Ç–≤–µ—Ç –Ω–∞ /newbot: {response.text[:100]}...")

                # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –±–æ—Ç–∞
                await conv.send_message(bot_name)
                await asyncio.sleep(1)

                response = await conv.get_response()
                logger.debug(f"BotFather –æ—Ç–≤–µ—Ç –Ω–∞ –∏–º—è: {response.text[:100]}...")

                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username –±–æ—Ç–∞ (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)
                username = await self._negotiate_username(conv, base_username, account.phone, timeout)

                if not username:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å username –±–æ—Ç–∞")
                    return None

                # 4. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
                response = await conv.get_response()
                token = extract_token_from_text(response.text)

                if not token:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                    return None

                if not validate_bot_token(token):
                    logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
                    return None

                logger.info(f"‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"   ü§ñ Username: @{username}")
                logger.info(f"   üîë Token: {token[:15]}...")

                return {
                    'token': token,
                    'username': username,
                    'name': bot_name
                }

        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ ({timeout}s)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return None

    async def _negotiate_username(
            self,
            conv,
            base_username: str,
            phone: str,
            timeout: int
    ) -> Optional[str]:
        """
        –°–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç username –±–æ—Ç–∞ —Å BotFather

        Args:
            conv: –û–±—ä–µ–∫—Ç conversation
            base_username: –ë–∞–∑–æ–≤—ã–π username
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            timeout: –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç

        Returns:
            –§–∏–Ω–∞–ª—å–Ω—ã–π username –∏–ª–∏ None
        """
        start_time = asyncio.get_event_loop().time()
        max_attempts = 10
        attempt = 0

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ username
        current_username = normalize_username(base_username)
        if not current_username.lower().endswith('bot'):
            current_username += 'bot'
        current_username = current_username[:32]

        while attempt < max_attempts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            elapsed = asyncio.get_event_loop().time() - start_time
            if elapsed > timeout - 10:  # –û—Å—Ç–∞–≤–ª—è–µ–º 10 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∞—Å–∞
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è username")
                return None

            attempt += 1
            logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º username @{current_username}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username
            await conv.send_message(current_username)
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è BotFather –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = await conv.get_response()
            text = response.text.strip()
            text_lower = text.lower()

            logger.debug(f"BotFather –æ—Ç–≤–µ—Ç: {text[:100]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω (—É—Å–ø–µ—Ö!)
            if 'token' in text_lower and ':' in text:
                logger.info(f"‚úÖ Username —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω: @{current_username}")
                return current_username

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π username
            if 'already taken' in text_lower or '—É–∂–µ –∑–∞–Ω—è—Ç–æ' in text_lower:
                logger.debug("‚ùå Username –∑–∞–Ω—è—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π")
                current_username = generate_unique_username(base_username, phone)

            elif 'must end in' in text_lower or '–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è' in text_lower:
                logger.debug("‚ùå Username –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'bot'")
                if not current_username.lower().endswith('bot'):
                    current_username = current_username.rstrip('Bb').rstrip('oO').rstrip('tT') + 'bot'
                else:
                    # –ï—Å–ª–∏ —É–∂–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ bot, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                    current_username = generate_unique_username(base_username, phone)

            elif 'invalid' in text_lower or '–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º' in text_lower:
                logger.debug("‚ùå Username –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π")
                current_username = generate_unique_username(base_username, phone)

            elif 'too long' in text_lower or '—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω' in text_lower:
                logger.debug("‚ùå Username —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º")
                current_username = current_username[:28] + 'bot'

            elif 'too short' in text_lower or '—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–æ–∫' in text_lower:
                logger.debug("‚ùå Username —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —É–¥–ª–∏–Ω—è–µ–º")
                current_username = current_username[:-3] + '_bot'

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç BotFather: {text[:100]}")
                current_username = generate_unique_username(base_username, phone)

            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            current_username = current_username[:32]

            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å username –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return None

    def _generate_bot_name(self, profile_name: str, phone: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –æ–Ω–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ
        if profile_name and len(profile_name) > 3 and profile_name != "–ü—Ä–æ—Ñ–∏–ª—å":
            base_name = f"{profile_name} Inviter Bot"
        else:
            base_name = "Invite Bot"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if phone:
            phone_digits = re.sub(r'\D', '', phone)
            if len(phone_digits) >= 4:
                base_name += f" {phone_digits[-4:]}"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞)
        if len(base_name) > 60:
            base_name = base_name[:60] + "..."

        return base_name

    def _generate_base_username(self, profile_name: str, phone: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π username –¥–ª—è –±–æ—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
        if profile_name and len(profile_name) > 2:
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è username
            clean_profile = re.sub(r'[^a-zA-Z0-9_]', '', profile_name.lower())
            if clean_profile and len(clean_profile) >= 3:
                base = f"{clean_profile}_inviter"
            else:
                base = "inviter"
        else:
            base = "inviter"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if phone:
            phone_digits = re.sub(r'\D', '', phone)
            if len(phone_digits) >= 4:
                base += f"_{phone_digits[-4:]}"

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        base = normalize_username(base)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è 'bot')
        base = base[:28]

        return base

    async def delete_bot(self, account, bot_username: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)

        Args:
            account: –ê–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
            bot_username: Username –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –±–æ—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ @{bot_username}")

            if not account.client.is_connected():
                await account.client.connect()

            async with account.client.conversation('@BotFather', timeout=60) as conv:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /deletebot
                await conv.send_message('/deletebot')
                await asyncio.sleep(1)

                response = await conv.get_response()

                # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤, BotFather –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
                if 'choose a bot' in response.text.lower():
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username –±–æ—Ç–∞
                    await conv.send_message(f'@{bot_username}')
                    await asyncio.sleep(1)
                    response = await conv.get_response()

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                if 'yes' in response.text.lower() or '–¥–∞' in response.text.lower():
                    await conv.send_message('Yes, I am totally sure.')
                    await asyncio.sleep(1)
                    response = await conv.get_response()

                    if 'done' in response.text.lower() or '–≥–æ—Ç–æ–≤–æ' in response.text.lower():
                        logger.info(f"‚úÖ –ë–æ—Ç @{bot_username} —É–¥–∞–ª–µ–Ω")
                        return True

                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞: {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False

    async def get_bot_info(self, account) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            account: –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–∞—Ö
        """
        try:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö –¥–ª—è {account.name}")

            if not account.client.is_connected():
                await account.client.connect()

            async with account.client.conversation('@BotFather', timeout=30) as conv:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /mybots
                await conv.send_message('/mybots')
                await asyncio.sleep(2)

                response = await conv.get_response()

                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
                bots_info = {
                    'raw_response': response.text,
                    'has_bots': 'choose a bot' in response.text.lower() or '@' in response.text
                }

                logger.info(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–∞—Ö –ø–æ–ª—É—á–µ–Ω–∞")
                return bots_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö: {e}")
            return None

    def validate_bot_name(self, name: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è –±–æ—Ç–∞"""
        if not name or len(name.strip()) < 1:
            return False

        if len(name) > 64:
            return False

        # –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö
        forbidden_chars = ['<', '>', '&', '"']
        for char in forbidden_chars:
            if char in name:
                return False

        return True

    def validate_bot_username(self, username: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç username –±–æ—Ç–∞"""
        if not username:
            return False

        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_username = username.lstrip('@')

        # –î–ª–∏–Ω–∞ –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        if len(clean_username) < 5 or len(clean_username) > 32:
            return False

        # –î–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'bot'
        if not clean_username.lower().endswith('bot'):
            return False

        # –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        if not re.match(r'^[A-Za-z0-9_]+', clean_username):
            return False

        # –ù–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã
        if clean_username[0].isdigit():
            return False

        return True

    def __str__(self):
        return "BotCreator"

    def __repr__(self):
        return self.__str__()