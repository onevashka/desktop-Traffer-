# backend/bot/bot_creator.py

import re
import os
import json
import asyncio
import threading
from typing import Optional, Dict
from loguru import logger
from telethon import TelegramClient

_file_lock = threading.Lock()


def extract_token_from_text(text: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ BotFather —Ç–æ–∫–µ–Ω –≤–∏–¥–∞ 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
    """
    m = re.search(r'(\d+:[A-Za-z0-9_-]+)', text)
    if not m:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {text!r}")
    return m.group(1)


def generate_username(base: str, phone: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_suffix = ''.join(filter(str.isdigit, phone))[-4:]

    # –£–±–∏—Ä–∞–µ–º 'bot' –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ
    clean_base = base.lower()
    if clean_base.endswith('bot'):
        clean_base = clean_base[:-3]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –∏ 'bot'
    new_username = f"{clean_base}{phone_suffix}bot"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    return new_username[:32]


def normalize_username(username: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç username: —É–±–∏—Ä–∞–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
    normalized = re.sub(r'[^a-zA-Z0-9_]', '', username.lower())

    # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ/–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalized = normalized.strip('_')

    # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è
    if not normalized:
        normalized = 'mybot'

    return normalized


async def get_bot_token_from_account(account) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á 'bot_token' –≤ account.account_data
    """
    try:
        account_data = account.account_data
        token = account_data.get('bot_token')

        if token:
            logger.info(f"[{account.name}] ‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞: {token[:10]}...")
            return token
        else:
            logger.info(f"[{account.name}] ‚ÑπÔ∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON")
            return None

    except Exception as e:
        logger.error(f"[{account.name}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ JSON: {e}")
        return None


async def save_bot_token_to_account(account, token: str, username: str) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ JSON —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    try:
        with _file_lock:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            with open(account.json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ username –±–æ—Ç–∞
            data['bot_token'] = token
            data['bot_username'] = username

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(account.json_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ
            account.account_data['bot_token'] = token
            account.account_data['bot_username'] = username

        logger.info(f"[{account.name}] ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON: @{username}")
        return True

    except Exception as e:
        logger.error(f"[{account.name}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ JSON: {e}")
        return False


async def create_bot_via_botfather(
        account,  # –û–±—ä–µ–∫—Ç Account
        name: str,
        username: str,
        botfather: str = 'BotFather',
        timeout: int = 120
) -> Optional[str]:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω.
    –ö–û–ü–ò–Ø –¢–í–û–ï–ì–û –ö–û–î–ê —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è–º–∏.
    """
    client: TelegramClient = account.client
    phone = account.account_data.get('phone', '')

    try:
        logger.info(f"[{account.name}] ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @{botfather}")

        async with client.conversation(botfather, timeout=timeout) as conv:
            # 1) /newbot
            logger.info(f"[{account.name}] üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /newbot")
            await conv.send_message('/newbot')

            # 2) ask for name
            resp = await conv.get_response()
            logger.info(f"[{account.name}] üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è: {name}")
            await conv.send_message(name)

            # 3) ask for username
            resp = await conv.get_response()

            # –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π clean username (—Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è bot)
            clean = normalize_username(username)
            if not clean.lower().endswith('bot'):
                clean += 'bot'
            clean = clean[:32]

            start = asyncio.get_event_loop().time()
            attempt = 0

            while True:
                attempt += 1
                elapsed = asyncio.get_event_loop().time() - start
                if elapsed > timeout:
                    logger.error(f"[{account.name}] ‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
                    raise TimeoutError("–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç BotFather")

                logger.info(f"[{account.name}] üìù –ü–æ–ø—ã—Ç–∫–∞ {attempt}: username {clean}")
                await conv.send_message(clean)
                resp = await conv.get_response()
                text = resp.text.strip()
                lower = text.lower()

                # 4) –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if 'token' in lower and ':' in text:
                    logger.info(f"[{account.name}] üéâ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
                    break

                # –∏–Ω–∞—á–µ ‚Äî –æ—à–∏–±–∫–∞ username, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                if 'already taken' in lower:
                    logger.warning(f"[{account.name}] ‚ö†Ô∏è Username –∑–∞–Ω—è—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π")
                    clean = generate_username(clean, phone)
                elif 'must end in' in lower:
                    logger.warning(f"[{account.name}] ‚ö†Ô∏è –î–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ bot")
                    core = normalize_username(clean)
                    clean = (core + 'bot')[:32]
                else:
                    logger.warning(f"[{account.name}] ‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π")
                    clean = generate_username(clean, phone)

                clean = clean[:32]

                # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if attempt > 10:
                    logger.error(f"[{account.name}] ‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫")
                    return None

            # 5) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
            token = extract_token_from_text(text)
            final_username = clean  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π username

            logger.info(f"[{account.name}] ‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: @{final_username}")
            logger.info(f"[{account.name}] üîë –¢–æ–∫–µ–Ω: {token[:10]}...")

            # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ JSON –∞–∫–∫–∞—É–Ω—Ç–∞
            await save_bot_token_to_account(account, token, final_username)

            return token

    except Exception as e:
        logger.error(f"[{account.name}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return None


async def get_or_create_bot_for_account(account) -> Optional[Dict[str, str]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ.

    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JSON –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ bot_token
    2. –ï—Å–ª–∏ –µ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
    3. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather

    Returns:
        {'token': str, 'username': str} –∏–ª–∏ None
    """
    try:
        logger.info(f"[{account.name}] ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –≤ JSON
        existing_token = await get_bot_token_from_account(account)
        if existing_token:
            username = account.account_data.get('bot_username', f"{account.name}_bot")
            logger.info(f"[{account.name}] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞: @{username}")
            return {
                'token': existing_token,
                'username': username
            }

        # 2. –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        logger.info(f"[{account.name}] üî® –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        # –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ = –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ + "_bot" –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª
        bot_name = f"Admin Inviter {account.name}"
        bot_username = f"{account.name}_bot"

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather
        token = await create_bot_via_botfather(
            account=account,
            name=bot_name,
            username=bot_username
        )

        if token:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π username –∏–∑ JSON (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
            final_username = account.account_data.get('bot_username', bot_username)

            logger.info(f"[{account.name}] üéâ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: @{final_username}")
            return {
                'token': token,
                'username': final_username
            }
        else:
            logger.error(f"[{account.name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
            return None

    except Exception as e:
        logger.error(f"[{account.name}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return None