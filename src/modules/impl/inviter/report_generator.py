# src/modules/impl/inviter/report_generator.py
"""
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥—É
- –û—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ –û—Ç—á–µ—Ç—ã/
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""
from datetime import datetime
from loguru import logger
from pathlib import Path
from typing import Dict, Set
from collections import defaultdict
from src.entities.moduls.inviter import *


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥—É"""

    def __init__(self, parent_process):
        self.parent = parent_process

    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –≤ –ø–∞–ø–∫–µ –û—Ç—á–µ—Ç—ã/"""
        try:
            profile_folder = Path(self.parent.profile_data['folder_path'])

            # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –û—Ç—á–µ—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É–¥–∞
            reports_folder = profile_folder / "–û—Ç—á–µ—Ç—ã"
            reports_folder.mkdir(exist_ok=True)
            report_file = reports_folder / f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = len(self.parent.processed_users)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = self._calculate_status_statistics()

            # –£—Å–ø–µ—à–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã
            successful_invites = status_counts.get('INVITED', 0)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Ç–∞–º (—Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö)
            chat_user_mapping = self._group_users_by_chats()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_lines = self._generate_report_lines(
                total_users,
                successful_invites,
                status_counts,
                chat_user_mapping
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(report_lines))

            logger.success(f"[{self.parent.profile_name}] üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

            # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥
            success_rate = (successful_invites / total_users * 100) if total_users > 0 else 0

        except Exception as e:
            logger.error(f"[{self.parent.profile_name}] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    def _calculate_status_statistics(self) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        status_counts = {}
        for user in self.parent.processed_users.values():
            status = user.status.value if hasattr(user.status, 'value') else str(user.status)
            status_counts[status] = status_counts.get(status, 0) + 1
        return status_counts

    def _group_users_by_chats(self) -> Dict[str, Set[str]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: chat_link -> set(—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        """
        chat_user_mapping = defaultdict(set)

        # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —á–∞—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
        # –º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        # –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —É—Å–ø–µ—Ö–æ–≤ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

        successful_users = [
            username for username, user in self.parent.processed_users.items()
            if user.status == UserStatus.INVITED
        ]

        if not successful_users:
            return chat_user_mapping

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        total_chat_successes = sum(stats.get('success', 0) for stats in self.parent.chat_stats.values())

        if total_chat_successes == 0:
            return chat_user_mapping

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É—Å–ø–µ—Ö–∞–º –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        user_index = 0
        for chat_link, stats in self.parent.chat_stats.items():
            chat_successes = stats.get('success', 0)
            if chat_successes > 0:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                users_for_chat = int((chat_successes / total_chat_successes) * len(successful_users))

                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç, –±–µ—Ä–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if chat_link == list(self.parent.chat_stats.keys())[-1]:
                    users_for_chat = len(successful_users) - user_index

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ—Ç —á–∞—Ç
                for i in range(min(users_for_chat, len(successful_users) - user_index)):
                    if user_index < len(successful_users):
                        chat_user_mapping[chat_link].add(successful_users[user_index])
                        user_index += 1

        return chat_user_mapping

    def _generate_report_lines(self, total_users: int, successful_invites: int,
                               status_counts: Dict, chat_user_mapping: Dict) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞"""
        report_lines = [
            f"üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ê–î–ú–ò–ù-–ò–ù–í–ê–ô–¢–ò–ù–ì–£",
            f"=" * 60,
            f"üìã –ü—Ä–æ—Ñ–∏–ª—å: {self.parent.profile_name}",
            f"üïê –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"",
            f"üí° –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—Ö–æ–≤ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ '–£—Å–ø–µ—à–Ω—ã–µ_–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è_*.txt'",
            f"",
            f"üìä –ö–†–ê–¢–ö–ò–ô –ò–¢–û–ì:",
            f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {status_counts.get('INVITED', 0)} —á–µ–ª.",
            f"   ‚ùå –û—à–∏–±–∫–∏/—Å–ø–∏—Å–∞–Ω–∏—è: {status_counts.get('ERROR', 0)} —á–µ–ª.",
            f"   üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {status_counts.get('PRIVACY', 0)} —á–µ–ª.",
            f"   üö´ –°–ø–∞–º-–±–ª–æ–∫–∏: {status_counts.get('SPAM_BLOCK', 0)} —á–µ–ª.",
            f"   üë• –£–∂–µ –≤ —á–∞—Ç–∞—Ö: {status_counts.get('ALREADY_IN', 0)} —á–µ–ª.",
            f"   üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {status_counts.get('NOT_FOUND', 0)} —á–µ–ª.",
            f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_invites / total_users * 100):.1f}%" if total_users > 0 else "   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: 0.00%",
            f"",
            f"=" * 60,
            f""
        ]

        # –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–ñ–î–û–ú–£ –ß–ê–¢–£
        if self.parent.chat_stats:
            report_lines.extend([
                f"üì± –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ß–ê–¢–ê–ú:",
                f""
            ])

            for chat_link, stats in self.parent.chat_stats.items():
                chat_success = stats.get('success', 0)
                chat_total = stats.get('total', 0)
                success_rate = (chat_success / chat_total * 100) if chat_total > 0 else 0
                admin_name = self.parent.chat_admins.get(chat_link, type('', (), {'name': "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"})).name

                report_lines.extend([
                    f"üîó –ß–ê–¢: {chat_link}",
                    f"üë§ –ê–¥–º–∏–Ω: {admin_name}",
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {chat_success}/{chat_total} ({success_rate:.1f}%)",
                    f""
                ])

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ—Ç —á–∞—Ç
                users_in_chat = chat_user_mapping.get(chat_link, set())
                if users_in_chat:
                    report_lines.append(f"‚úÖ –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ({len(users_in_chat)} —á–µ–ª.):")
                    for username in sorted(users_in_chat):
                        report_lines.append(f"   @{username}")
                else:
                    report_lines.append("‚ùå –ù–∏–∫–æ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç")

                report_lines.extend([
                    f"",
                    f"-" * 40,
                    f""
                ])

        # –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú
        report_lines.extend([
            f"üíº –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:",
            f"   –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(self.parent.account_stats)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
            f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(self.parent.finished_successfully_accounts)}",
            f"   üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö: {len(self.parent.frozen_accounts)}",
            f"   ‚ö†Ô∏è  –°–ø–∏—Å–∞–Ω–Ω—ã—Ö: {len(self.parent.writeoff_accounts)}",
            f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∏–Ω–≤–∞–π—Ç—ã: {len(self.parent.block_invite_accounts)}",
            f"   üìµ –°–ø–∞–º-–±–ª–æ–∫: {len(self.parent.spam_block_accounts)}",
            f"",
            f"üî• –ò–¢–û–ì–û –§–ê–ô–õ–û–í –í –ü–ê–ü–ö–ï –û–¢–ß–ï–¢–´:",
            f"   üìÑ –≠—Ç–æ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π",
            f"   üìù –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π",
            f"   üìä –ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏",
            f"",
            f"=" * 60
        ])

        return report_lines