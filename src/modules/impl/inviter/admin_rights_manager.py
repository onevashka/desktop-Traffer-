# src/modules/impl/inviter/admin_rights_manager.py

import asyncio
from typing import Optional
from loguru import logger

from .bot_manager import BotManager


class AdminRightsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞.
    """

    def __init__(self, bot_manager: BotManager, profile_name: str):
        self.bot_manager = bot_manager
        self.profile_name = profile_name

    async def grant_admin_rights(
            self,
            account,  # –û–±—ä–µ–∫—Ç Account –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
            chat_link: str,
            max_retries: int = 3,
            retry_delay: int = 2
    ) -> bool:
        """
        –í—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        for attempt in range(1, max_retries + 1):
            try:
                logger.info(
                    f"[{self.profile_name}] üîß –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}: –≤—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {account.name} –≤ {chat_link}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if not self.bot_manager.is_initialized:
                    logger.error(f"[{self.profile_name}] ‚ùå –ë–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ
                if not await self.bot_manager.check_admin_rights(chat_link):
                    logger.error(f"[{self.profile_name}] ‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {chat_link}")
                    logger.info(
                        f"[{self.profile_name}] üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç @{self.bot_manager.bot_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω")
                    return False

                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
                if not account.client:
                    await account.create_client()

                if not await account.connect():
                    logger.error(f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.name}")
                    return False

                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                result = await self.bot_manager.grant_admin_rights(account, chat_link)

                if result:
                    logger.info(f"[{self.profile_name}] ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã: {account.name}")
                    return True
                else:
                    logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account.name}")

                    if attempt < max_retries:
                        logger.info(f"[{self.profile_name}] ‚è≥ –ñ–¥–µ–º {retry_delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(retry_delay)

            except Exception as e:
                logger.error(
                    f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {account.name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

                if attempt < max_retries:
                    logger.info(f"[{self.profile_name}] ‚è≥ –ñ–¥–µ–º {retry_delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(retry_delay)

        logger.error(
            f"[{self.profile_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ {account.name} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def revoke_admin_rights(
            self,
            account,  # –û–±—ä–µ–∫—Ç Account –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
            chat_link: str,
            max_retries: int = 2,
            retry_delay: int = 1
    ) -> bool:
        """
        –û—Ç–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        for attempt in range(1, max_retries + 1):
            try:
                logger.info(
                    f"[{self.profile_name}] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}: –æ—Ç–∑—ã–≤ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {account.name} –≤ {chat_link}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if not self.bot_manager.is_initialized:
                    logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ë–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∑—ã–≤ –ø—Ä–∞–≤")
                    return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∞–≤–∞ –∏ —Ç–∞–∫ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã

                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
                if not account.client:
                    await account.create_client()

                if not await account.connect():
                    logger.warning(
                        f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.name} –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞

                # –û—Ç–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                result = await self.bot_manager.revoke_admin_rights(account, chat_link)

                if result:
                    logger.info(f"[{self.profile_name}] ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã: {account.name}")
                    return True
                else:
                    logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {account.name}")

                    if attempt < max_retries:
                        logger.info(f"[{self.profile_name}] ‚è≥ –ñ–¥–µ–º {retry_delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(retry_delay)

            except Exception as e:
                logger.error(
                    f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {account.name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

                if attempt < max_retries:
                    logger.info(f"[{self.profile_name}] ‚è≥ –ñ–¥–µ–º {retry_delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(retry_delay)

        # –î–ª—è –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        logger.warning(
            f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ {account.name} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def verify_admin_status(self, account, chat_link: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ
        """
        try:
            if not account.client:
                await account.create_client()

            if not await account.connect():
                logger.warning(
                    f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.name} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_entity = await account.client.get_input_entity(chat_link)
            chat = await account.client.get_entity(chat_entity)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await account.client.get_me()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ
            from telethon.tl.functions.channels import GetParticipantRequest
            try:
                participant = await account.client(GetParticipantRequest(
                    channel=chat,
                    participant=me.id
                ))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞
                from telethon.tl.types import ChannelParticipantAdmin, ChannelParticipantCreator
                is_admin = isinstance(participant.participant, (ChannelParticipantAdmin, ChannelParticipantCreator))

                if is_admin:
                    logger.info(f"[{self.profile_name}] ‚úÖ {account.name} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {chat_link}")
                else:
                    logger.info(f"[{self.profile_name}] ‚ÑπÔ∏è {account.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {chat_link}")

                return is_admin

            except Exception as e:
                logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ {account.name}: {e}")
                return False

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ {account.name}: {e}")
            return False

    async def ensure_bot_admin_rights(self, chat_links: list) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤–æ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
        """
        try:
            all_good = True

            for chat_link in chat_links:
                has_rights = await self.bot_manager.check_admin_rights(chat_link)
                if not has_rights:
                    logger.error(
                        f"[{self.profile_name}] ‚ùå –ë–æ—Ç @{self.bot_manager.bot_username} –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {chat_link}")
                    all_good = False

            if all_good:
                logger.info(
                    f"[{self.profile_name}] ‚úÖ –ë–æ—Ç @{self.bot_manager.bot_username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö")
            else:
                logger.error(
                    f"[{self.profile_name}] ‚ùå –ë–æ—Ç @{self.bot_manager.bot_username} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–∞—Ö")

            return all_good

        except Exception as e:
            logger.error(f"[{self.profile_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö: {e}")
            return False