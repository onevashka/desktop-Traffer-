# src/modules/impl/inviter/admin_rights_manager.py
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
–ë–æ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–µ—Ç/–∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
"""

import asyncio
from typing import Dict, Set, Optional, List
from datetime import datetime, timedelta
from loguru import logger

from .bot_manager import BotManager

# –ò–º–ø–æ—Ä—Ç—ã Telethon –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏
from telethon.tl.functions.channels import EditAdminRequest
from telethon.tl.types import ChatAdminRights


class AdminRightsManager:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä - —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –≤–æ—Ä–∫–µ—Ä—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é"""

    def __init__(self, bot_manager: BotManager):
        self.bot_manager = bot_manager

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        # Format: {chat_link: {'user_id': int, 'account_name': str, 'granted_at': datetime}}
        self.main_admins: Dict[str, Dict] = {}

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self._locks: Dict[str, asyncio.Lock] = {}

    def _get_lock(self, chat_link: str) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∞–µ—Ç lock –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if chat_link not in self._locks:
            self._locks[chat_link] = asyncio.Lock()
        return self._locks[chat_link]

    async def grant_main_admin_rights(self, chat_link: str, user_id: int, account_name: str) -> bool:
        """
        –¢–û–õ–¨–ö–û –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
            user_id: ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        async with self._get_lock(chat_link):
            try:

                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                success = await self.bot_manager.grant_admin_rights(chat_link, user_id)

                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∞–¥–º–∏–Ω–µ
                    self.main_admins[chat_link] = {
                        'user_id': user_id,
                        'account_name': account_name,
                        'granted_at': datetime.now()
                    }

                    logger.success(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {account_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –≤ {chat_link} —á–µ—Ä–µ–∑ –ë–û–¢–ê")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {account_name} —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    return False

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {account_name}: {e}")
                return False

    async def revoke_main_admin_rights(self, chat_link: str, user_id: int, account_name: str) -> bool:
        """
        üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–û–õ–¨–ö–û –∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ grant_main_admin_rights —Ç–æ–ª—å–∫–æ –Ω–∞–æ–±–æ—Ä–æ—Ç)

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
            user_id: ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –∑–∞–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        async with self._get_lock(chat_link):
            try:

                # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                success = await self.bot_manager.revoke_admin_rights(chat_link, user_id)

                if success:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    if chat_link in self.main_admins:
                        del self.main_admins[chat_link]

                    logger.debug(f"‚úÖ –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {account_name} –≤ {chat_link} —á–µ—Ä–µ–∑ –ë–û–¢–ê")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {account_name} —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    return False

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {account_name}: {e}")
                return False

    def get_main_admin(self, chat_link: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∞–¥–º–∏–Ω–µ –≤ —á–∞—Ç–µ"""
        return self.main_admins.get(chat_link)

    def is_main_admin_active(self, chat_link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ"""
        return chat_link in self.main_admins

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∞–º"""
        return {
            'main_admins_count': len(self.main_admins),
            'active_chats': len(self.main_admins)
        }


# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –ü—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
async def grant_worker_rights_directly(main_admin, chat_entity, worker_user_id: int, worker_user_access_hash: int,
                                       worker_name: str, worker_username: str, chat_link) -> bool | str:
    """
    –ù–∞–ø—Ä—è–º—É—é –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ—Ç–æ–∫—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    max_retries = 3
    retry_delay = 10  # —Å–µ–∫—É–Ω–¥

    for attempt in range(max_retries):
        try:
            from telethon.tl.functions.channels import EditAdminRequest, GetParticipantRequest
            from telethon.tl.types import ChatAdminRights, InputUser, InputPeerUser
            from telethon.errors import UserNotParticipantError, UsernameNotOccupiedError

            # --- –¢–æ—á–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ username (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞) ---
            uname = (worker_username or "").lstrip("@").strip()
            if not uname:
                logger.error("‚ùå –ü—É—Å—Ç–æ–π username")
                return False

            try:
                # –ø–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ –ø–æ username
                user = await main_admin.client.get_entity(uname)  # tl.types.User
            except (UsernameNotOccupiedError, ValueError):
                logger.error(f"‚ùå @{uname} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False

            # –≤—ã–¥–∞—ë–º –ø—Ä–∞–≤–∞ (–ù–ï –º–µ–Ω—è—é –Ω–∞–±–æ—Ä –ø—Ä–∞–≤)
            worker_input = InputUser(user_id=user.id, access_hash=user.access_hash)
            rights = ChatAdminRights(invite_users=True, add_admins=True, anonymous=True)

            await main_admin.client(EditAdminRequest(
                channel=chat_entity,
                user_id=worker_input,
                admin_rights=rights,
                rank="–∞–¥–º–∏–Ω"
            ))

            return True

        except Exception as e:
            error_message = str(e).lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—à–∏–±–∫–∞ –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç
            if "chat admin privileges are required to do that in the specified chat" in error_message:
                if attempt < max_retries - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {worker_name}: {e}")
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_delay)
                    continue
                else:
                    logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {worker_name}: {e}")
                    return False
            elif "Too many admins" in error_message:
                logger.error(f"‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω  {main_admin.name} —Å–æ–æ–±—â–∞–µ—Ç: –í —á–∞—Ç–µ {chat_link} –º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–æ–≤")
                return "TOO_MANY_ADMINS"
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {worker_name}: {e}")
                return False

    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return False



async def revoke_worker_rights_directly(main_admin_client, chat_entity, worker_user_id: int, worker_name: str, worker_username: str) -> bool:
    """
    –ó–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ —É –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    """
    try:
        from telethon.tl.functions.channels import EditAdminRequest, GetParticipantRequest
        from telethon.tl.types import ChatAdminRights, InputUser, InputPeerUser
        from telethon.errors import UserNotParticipantError, UsernameNotOccupiedError

        # --- –¢–æ—á–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ username ---
        uname = (worker_username or "").lstrip("@").strip()
        if not uname:
            logger.error("‚ùå –ü—É—Å—Ç–æ–π username")
            return False

        try:
            user = await main_admin_client.get_entity(uname)  # tl.types.User
        except (UsernameNotOccupiedError, ValueError):
            logger.error(f"‚ùå @{uname} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ get_entity()")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ
        '''try:
            worker_peer = InputPeerUser(user_id=user.id, access_hash=user.access_hash)
            await main_admin_client(GetParticipantRequest(channel=chat_entity, participant=worker_peer))
        except UserNotParticipantError:
            logger.error(f"‚ùå {worker_name} (@{uname}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞")
            return False'''

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ (–æ—Å—Ç–∞–≤–ª—è—é –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ)
        no_rights = ChatAdminRights(
            invite_users=False,
            add_admins=False,
            anonymous=False
        )

        # –ê–¥—Ä–µ—Å–Ω–æ —Å–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞
        input_user = InputUser(user_id=user.id, access_hash=user.access_hash)
        await main_admin_client(EditAdminRequest(
            channel=chat_entity,
            user_id=input_user,
            admin_rights=no_rights,
            rank=""  # —É–±—Ä–∞—Ç—å –∑–≤–∞–Ω–∏–µ
        ))

        logger.debug(f"‚úÖ –ü—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã —Å {worker_name} (@{uname})")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ —É –≤–æ—Ä–∫–µ—Ä–∞ {worker_name}: {e}")
        return False