# src/modules/impl/inviter/admin_rights_manager.py
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
–ë–æ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–µ—Ç/–∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
"""

import asyncio
from typing import Dict, Set, Optional, List
from datetime import datetime, timedelta
from loguru import logger

from .bot_manager import BotManager

# –ò–º–ø–æ—Ä—Ç—ã Telethon –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏
from telethon.tl.functions.channels import EditAdminRequest
from telethon.tl.types import ChatAdminRights


class AdminRightsManager:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä - —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –≤–æ—Ä–∫–µ—Ä—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é"""

    def __init__(self, bot_manager: BotManager):
        self.bot_manager = bot_manager

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        # Format: {chat_link: {'user_id': int, 'account_name': str, 'granted_at': datetime}}
        self.main_admins: Dict[str, Dict] = {}

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self._locks: Dict[str, asyncio.Lock] = {}

    def _get_lock(self, chat_link: str) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∞–µ—Ç lock –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if chat_link not in self._locks:
            self._locks[chat_link] = asyncio.Lock()
        return self._locks[chat_link]

    async def grant_main_admin_rights(self, chat_link: str, user_id: int, account_name: str) -> bool:
        """
        –¢–û–õ–¨–ö–û –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
            user_id: ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        async with self._get_lock(chat_link):
            try:

                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                success = await self.bot_manager.grant_admin_rights(chat_link, user_id)

                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∞–¥–º–∏–Ω–µ
                    self.main_admins[chat_link] = {
                        'user_id': user_id,
                        'account_name': account_name,
                        'granted_at': datetime.now()
                    }

                    logger.success(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {account_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –≤ {chat_link} —á–µ—Ä–µ–∑ –ë–û–¢–ê")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {account_name} —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    return False

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {account_name}: {e}")
                return False

    async def revoke_main_admin_rights(self, chat_link: str) -> bool:
        """
        –¢–û–õ–¨–ö–û –∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –∑–∞–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        async with self._get_lock(chat_link):
            try:
                main_admin = self.main_admins.get(chat_link)
                if not main_admin:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ –≤ {chat_link}")
                    return True

                user_id = main_admin['user_id']
                account_name = main_admin['account_name']

                logger.info(f"üëëüîí –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –ë–û–¢–ê: {account_name} (ID: {user_id}) –≤ {chat_link}")

                # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                success = await self.bot_manager.revoke_admin_rights(chat_link, user_id)

                if success:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    del self.main_admins[chat_link]
                    logger.success(f"‚úÖ –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {account_name} –≤ {chat_link} —á–µ—Ä–µ–∑ –ë–û–¢–ê")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {account_name} —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    return False

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {chat_link}: {e}")
                return False

    def get_main_admin(self, chat_link: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∞–¥–º–∏–Ω–µ –≤ —á–∞—Ç–µ"""
        return self.main_admins.get(chat_link)

    def is_main_admin_active(self, chat_link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ"""
        return chat_link in self.main_admins

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∞–º"""
        return {
            'main_admins_count': len(self.main_admins),
            'active_chats': len(self.main_admins)
        }


# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –ü—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
async def grant_worker_rights_directly(main_admin, chat_entity, worker_user_id: int, worker_user_access_hash: int,
                                       worker_name: str) -> bool:
    """
    –ù–∞–ø—Ä—è–º—É—é –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ—Ç–æ–∫—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
    """
    try:
        from telethon.tl.functions.channels import EditAdminRequest, GetParticipantRequest
        from telethon.tl.types import ChatAdminRights, InputUser, InputPeerUser
        from telethon.errors import UserNotParticipantError, UserIdInvalidError

        participants_checked = 0

        # –ë–ï–ó –õ–ò–ú–ò–¢–ê - –ø–æ–ª—É—á–∞–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        async for participant in main_admin.client.iter_participants(chat_entity):
            participants_checked += 1

            if participant.id == worker_user_id:
                logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù {worker_name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {participants_checked}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π access_hash –∏–∑ –≥—Ä—É–ø–ø—ã
                actual_access_hash = participant.access_hash

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ —á–µ—Ä–µ–∑ GetParticipantRequest
                worker_peer = InputPeerUser(user_id=worker_user_id, access_hash=actual_access_hash)
                await main_admin.client(GetParticipantRequest(channel=chat_entity, participant=worker_peer))

                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞
                worker_input = InputUser(user_id=worker_user_id, access_hash=actual_access_hash)
                rights = ChatAdminRights(invite_users=True, add_admins=True, anonymous=True)

                await main_admin.client(EditAdminRequest(
                    channel=chat_entity,
                    user_id=worker_input,
                    admin_rights=rights,
                    rank="–∞–¥–º–∏–Ω"
                ))

                return True

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        logger.error(f"‚ùå {worker_name} –ù–ï –ù–ê–ô–î–ï–ù —Å—Ä–µ–¥–∏ {participants_checked} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {worker_name}: {e}")
        return False


async def revoke_worker_rights_directly(main_admin_client, chat_entity, worker_user_id: int, worker_name: str) -> bool:
    """
    –ó–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ —É –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

    Args:
        main_admin_client: –ö–ª–∏–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (Telethon)
        chat_entity: Entity —á–∞—Ç–∞
        worker_user_id: ID –≤–æ—Ä–∫–µ—Ä–∞
        worker_name: –ò–º—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤

    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –∑–∞–±—Ä–∞–Ω—ã
    """
    try:

        input_user = await main_admin_client.get_input_entity(worker_user_id)

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ (ChatAdminRights —Å False –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º)
        no_rights = ChatAdminRights(
            invite_users=False,
            add_admins=False,
            ban_users=False,
            delete_messages=False,
            edit_messages=False,
            post_messages=False,
            pin_messages=False,
            manage_call=False,
            other=False,
            anonymous=False
        )

        # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        await main_admin_client(EditAdminRequest(
            channel=chat_entity,
            user_id=input_user,
            admin_rights=no_rights,
            rank=""  # –£–±–∏—Ä–∞–µ–º –∑–≤–∞–Ω–∏–µ
        ))

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ —É –≤–æ—Ä–∫–µ—Ä–∞ {worker_name} –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º: {e}")
        return False