# backend/bot/bot_base.py

import asyncio
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner
from aiogram import Bot
from loguru import logger


class BotBase:
    """
    –¢–û–õ–¨–ö–û aiogram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
    –ë–û–¢ –ù–ï –ò–ù–í–ê–ô–¢–ò–¢! –¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏!
    """

    def __init__(
            self,
            bot_username: str,
            bot_token: str,
            proxy_config=None
    ):
        self.bot_username = bot_username
        self.bot_token = bot_token
        self.logger = logger

        # –¢–û–õ–¨–ö–û aiogram Bot API client
        proxy_url = None
        if proxy_config:
            proxy_url = self._build_proxy_url(proxy_config)

        if proxy_url:
            self.api = Bot(token=self.bot_token, proxy=proxy_url)
        else:
            self.api = Bot(token=self.bot_token)

    def _build_proxy_url(self, proxy_config):
        """–°—Ç—Ä–æ–∏—Ç URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è aiogram"""
        if not proxy_config:
            return None

        auth = ""
        if proxy_config.get('username'):
            auth = f"{proxy_config['username']}:{proxy_config['password']}@"

        proxy_type = proxy_config.get('proxy_type', 'socks5')
        return f"{proxy_type}://{auth}{proxy_config['addr']}:{proxy_config['port']}"

    async def connect(self):
        """–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = await self.api.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {me.first_name} (@{me.username})")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ @{self.bot_username}: {e}")
            return False

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            await self.api.session.close()
            logger.info(f"üîå –ë–æ—Ç @{self.bot_username} –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: {e}")

    async def grant_admin(
            self,
            acc,  # –û–±—ä–µ–∫—Ç Account - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ Telethon –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            link: str,
            can_change_info: bool = True,
            can_delete_messages: bool = False,
            can_invite_users: bool = True,
            can_pin_messages: bool = True,
            can_promote_members: bool = False,
            can_manage_video_chats: bool = True,
            can_restrict_members: bool = False,
            can_post_messages: bool = True,
            can_edit_messages: bool = False,
            rank: str = ""
    ) -> bool:
        """
        –í—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—É –≤ —á–∞—Ç–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º Telethon –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, aiogram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        max_retries = 3
        for attempt in range(1, max_retries + 1):
            try:
                logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –≤—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {acc.name} –≤ {link}")

                # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telethon –∞–∫–∫–∞—É–Ω—Ç–∞
                chat_entity = await acc.client.get_input_entity(link)
                chat = await acc.client.get_entity(chat_entity)
                chat_id = getattr(chat, 'id', None)
                if not chat_id:
                    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id –¥–ª—è {link!r}")

                # –ü–æ–ª—É—á–∞–µ–º user_id –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telethon
                user_entity = await acc.client.get_entity('me')
                user_id = user_entity.id

                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ aiogram Bot API
                await self.api.promote_chat_member(
                    chat_id=int(f'-100{chat_id}'),
                    user_id=user_id,
                    can_change_info=can_change_info,
                    can_delete_messages=can_delete_messages,
                    can_invite_users=can_invite_users,
                    can_pin_messages=can_pin_messages,
                    can_promote_members=can_promote_members,
                    can_manage_video_chats=can_manage_video_chats,
                    can_restrict_members=can_restrict_members,
                    can_post_messages=can_post_messages,
                    can_edit_messages=can_edit_messages,
                )

                logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤—ã–¥–∞–Ω—ã {acc.name} –≤ {link}")
                return True

            except Exception as e:
                msg = str(e).lower()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

                # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if 'chat not found' in msg and attempt < max_retries:
                    logger.info(f"‚è≥ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º 1—Å –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    await asyncio.sleep(1)
                    continue

                # –ò–Ω–∞—á–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                if attempt == max_retries:
                    raise

        return False

    async def revoke_admin(
            self,
            acc,  # –û–±—ä–µ–∫—Ç Account - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ Telethon –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            link: str
    ) -> bool:
        """
        –°–Ω–∏–º–∞–µ—Ç —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º Telethon –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, aiogram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            logger.info(f"üîÑ –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ —É {acc.name} –≤ {link}")

            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telethon –∞–∫–∫–∞—É–Ω—Ç–∞
            chat_entity = await acc.client.get_input_entity(link)
            chat = await acc.client.get_entity(chat_entity)
            chat_id = getattr(chat, 'id', None)
            if not chat_id:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id –¥–ª—è {link!r}")

            # –ü–æ–ª—É—á–∞–µ–º user_id –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telethon
            user = await acc.client.get_entity('me')
            user_id = user.id

            # –û—Ç–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ aiogram Bot API (–≤—Å–µ —Ñ–ª–∞–≥–∏ –≤ False)
            await self.api.promote_chat_member(
                chat_id=int(f'-100{chat_id}'),
                user_id=user_id,
                can_change_info=False,
                can_delete_messages=False,
                can_invite_users=False,
                can_pin_messages=False,
                can_promote_members=False,
                can_manage_video_chats=False,
                can_restrict_members=False,
                can_post_messages=False,
                can_edit_messages=False,
            )

            logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É {acc.name} –≤ {link}")
            return True

        except Exception as e:
            # –ï—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            if "CHAT_ADMIN_REQUIRED" in str(e):
                logger.warning(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∫–∏: {e}")
                return False

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ —É {acc.name}: {e}")
            return False

    async def has_self_admin(self, link: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
        –¢–û–õ–¨–ö–û aiogram, –±–µ–∑ Telethon.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —á–µ—Ä–µ–∑ aiogram
            chat = await self.api.get_chat(link)
            chat_id = chat.id

            # –£–∑–Ω–∞—ë–º —Å–≤–æ–π user_id
            me = await self.api.get_me()
            my_id = me.id

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ–±–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            member = await self.api.get_chat_member(chat_id=chat_id, user_id=my_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –º—ã (–∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü)
            is_admin = isinstance(member, (ChatMemberAdministrator, ChatMemberOwner))

            if is_admin:
                logger.info(f"‚úÖ –ë–æ—Ç @{self.bot_username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {link}")
            else:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç @{self.bot_username} –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {link}")

            return is_admin

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω—Å—Ç–≤–æ –±–æ—Ç–∞ @{self.bot_username} –≤ {link}: {e}")
            return False