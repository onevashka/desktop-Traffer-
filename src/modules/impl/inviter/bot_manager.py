# src/modules/impl/inviter/bot_manager.py
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏ —á–µ—Ä–µ–∑ aiogram
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import asyncio
from typing import Optional
from loguru import logger

from aiogram import Bot
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner
from aiogram.exceptions import TelegramAPIError


class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏"""

    def __init__(self, bot_token: str, proxy_url: str = None):
        self.bot_token = bot_token
        self.proxy_url = proxy_url
        self.bot: Optional[Bot] = None
        self.connected = False
        self.bot_username = None

    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
        try:

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            if self.proxy_url:
                self.bot = Bot(token=self.bot_token, proxy=self.proxy_url)
            else:
                self.bot = Bot(token=self.bot_token)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            me = await self.bot.get_me()
            self.bot_username = me.username
            self.connected = True

            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{self.bot_username} (ID: {me.id})")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
            self.connected = False
            return False

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–æ—Ç–∞"""
        try:
            if self.bot and self.connected:
                await self.bot.session.close()
                self.connected = False
                logger.info("ü§ñ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: {e}")

    def _convert_chat_link_to_username(self, chat_link: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É —á–∞—Ç–∞ –≤ username –¥–ª—è Bot API

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç (https://t.me/channel, @channel, channel)

        Returns:
            str: Username –±–µ–∑ @ –¥–ª—è Bot API
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            chat_link = chat_link.strip()

            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ username —Å @
            if chat_link.startswith('@'):
                return chat_link[1:]  # –£–±–∏—Ä–∞–µ–º @

            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ https://t.me/username
            if chat_link.startswith('https://t.me/'):
                username = chat_link.replace('https://t.me/', '')
                # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if '?' in username:
                    username = username.split('?')[0]
                return username

            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me/username
            if chat_link.startswith('t.me/'):
                username = chat_link.replace('t.me/', '')
                if '?' in username:
                    username = username.split('?')[0]
                return username

            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ (joinchat)
            if '/joinchat/' in chat_link or chat_link.startswith('https://t.me/+'):
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return chat_link

            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
            return chat_link

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ {chat_link}: {e}")
            return chat_link

    # –¢–µ–ø–µ—Ä—å –ò–ó–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ check_bot_admin_status:

    async def check_bot_admin_status(self, chat_link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        return True
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ: {chat_link}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ username
            username = self._convert_chat_link_to_username(chat_link)
            logger.debug(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {chat_link} -> {username}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            try:
                chat = await self.bot.get_chat(username)
                chat_id = chat.id
                logger.debug(f"‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {chat.title if hasattr(chat, 'title') else chat_id}")
            except Exception as chat_error:
                error_msg = str(chat_error).lower()

                if "chat not found" in error_msg:
                    logger.warning(f"‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {chat_link}")
                    logger.warning(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    logger.warning(f"   - –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç")
                    logger.warning(f"   - –ß–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –±–æ—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω")
                    logger.warning(f"   - –ß–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return False
                elif "forbidden" in error_msg or "unauthorized" in error_msg:
                    logger.warning(f"üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: {chat_link}")
                    logger.warning(f"üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                    return False
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ {chat_link}: {chat_error}")
                    return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç–µ
            try:
                me = await self.bot.get_me()
                member = await self.bot.get_chat_member(chat_id=chat_id, user_id=me.id)

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è aiogram
                is_admin = isinstance(member, (ChatMemberAdministrator, ChatMemberOwner))

                if is_admin:
                    logger.info(f"‚úÖ –ë–æ—Ç @{self.bot_username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {chat_link}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ (–¥–ª—è aiogram)
                    if isinstance(member, ChatMemberAdministrator):
                        rights = []
                        if member.can_invite_users:
                            rights.append("–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        if member.can_promote_members:
                            rights.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
                        if member.can_restrict_members:
                            rights.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")

                        logger.info(f"   –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {', '.join(rights) if rights else '–±–∞–∑–æ–≤—ã–µ'}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ë–æ—Ç @{self.bot_username} –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {chat_link}")
                    logger.warning(f"üí° –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ")

                return is_admin

            except Exception as member_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ {chat_link}: {member_error}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ {chat_link}: {e}")
            return False

    async def grant_admin_rights(self, chat_link: str, user_id: int, max_retries: int = 3) -> bool:
        """
        –í—ã–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        for attempt in range(1, max_retries + 1):
            try:
                logger.debug(f"üîë –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –≤—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {chat_link}")

                # –ü–æ–ª—É—á–∞–µ–º chat_id
                #chat = await self.bot.get_chat(chat_link)
                #chat_id = chat.id

                # –í—ã–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
                await self.bot.promote_chat_member(
                    chat_id=int(f'-100{chat_link}'),
                    user_id=user_id,
                    can_change_info=True,
                    can_delete_messages=True,
                    can_invite_users=True,
                    can_pin_messages=True,
                    can_promote_members=True,
                    can_manage_video_chats=True,
                    can_restrict_members=True,
                    can_post_messages=True,
                    can_edit_messages=True,
                    is_anonymous=True,

                )

                return True

            except TelegramAPIError as e:
                error_msg = str(e).lower()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                if 'chat not found' in error_msg and attempt < max_retries:
                    logger.warning(f"‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫...")
                    await asyncio.sleep(1)
                    continue
                elif 'user not found' in error_msg:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    break
                elif 'chat_admin_required' in error_msg:
                    logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {chat_link}")
                    break
                elif 'user_already_admin' in error_msg:
                    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                    if attempt < max_retries:
                        await asyncio.sleep(2)
                        continue

            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                if attempt < max_retries:
                    await asyncio.sleep(2)
                    continue

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def revoke_admin_rights(self, chat_link: str, user_id: int, max_retries: int = 3) -> bool:
        """
        –ó–∞–±–∏—Ä–∞–µ—Ç –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –∑–∞–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        for attempt in range(1, max_retries + 1):
            try:
                logger.debug(f"üîí –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –æ—Ç–∑—ã–≤ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {chat_link}")

                # –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ False)
                await self.bot.promote_chat_member(
                    chat_id=int(f'-100{chat_link}'),
                    user_id=user_id,
                    can_change_info=False,
                    can_delete_messages=False,
                    can_invite_users=False,
                    can_pin_messages=False,
                    can_promote_members=False,
                    can_manage_video_chats=False,
                    can_restrict_members=False,
                    can_post_messages=False,
                    can_edit_messages=False,
                    is_anonymous=False,
                )

                logger.debug(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {chat_link}")
                return True

            except TelegramAPIError as e:
                error_msg = str(e).lower()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                if 'chat not found' in error_msg and attempt < max_retries:
                    logger.warning(f"‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫...")
                    await asyncio.sleep(1)
                    continue
                elif 'user not found' in error_msg:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç)")
                    return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
                elif 'chat_admin_required' in error_msg:
                    logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {chat_link}")
                    break
                elif 'user_not_admin' in error_msg:
                    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                    if attempt < max_retries:
                        await asyncio.sleep(2)
                        continue

            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                if attempt < max_retries:
                    await asyncio.sleep(2)
                    continue

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def get_chat_info(self, chat_link: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        try:
            chat = await self.bot.get_chat(chat_link)
            return {
                'id': chat.id,
                'title': chat.title,
                'username': chat.username,
                'type': chat.type,
                'members_count': getattr(chat, 'members_count', None)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_link}: {e}")
            return None