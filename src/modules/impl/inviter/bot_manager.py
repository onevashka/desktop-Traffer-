# src/modules/impl/inviter/bot_manager.py
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

import json
import asyncio
from typing import Optional, Dict
from pathlib import Path
from loguru import logger

from .bot_creator import BotCreator
from .enhanced_bot_base import InviterBot
from paths import BOT_HOLDERS_FOLDER


class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""

    def __init__(self, account_name: str, profile_name: str):
        self.account_name = account_name
        self.profile_name = profile_name
        self.account_path = BOT_HOLDERS_FOLDER / f"{account_name}.json"
        self.session_path = BOT_HOLDERS_FOLDER / f"{account_name}.session"

        # –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
        self.bot_token: Optional[str] = None
        self.bot_username: Optional[str] = None

        # –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.bot_creator: Optional[BotCreator] = None
        self.inviter_bot: Optional[InviterBot] = None
        self.account = None  # –ê–∫–∫–∞—É–Ω—Ç-–¥–µ—Ä–∂–∞—Ç–µ–ª—å –±–æ—Ç–∞

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è {self.account_name}")

            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç-–¥–µ—Ä–∂–∞—Ç–µ–ª—å
            if not await self._load_bot_account():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–¥–µ—Ä–∂–∞—Ç–µ–ª—å")
                return False

            # 2. –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
            if not await self._setup_bot():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
                return False

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º InviterBot
            if not await self._initialize_inviter_bot():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å InviterBot")
                return False

            logger.info(f"‚úÖ –ë–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            return False

    async def _load_bot_account(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç-–¥–µ—Ä–∂–∞—Ç–µ–ª—å –±–æ—Ç–∞"""
        try:
            if not self.session_path.exists() or not self.account_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤")
                return False

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
            from src.accounts.impl.account import Account
            self.account = Account(self.account_name, str(self.session_path))

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if not await self.account.connect():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {self.account_name}")
                return False

            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç-–¥–µ—Ä–∂–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞-–¥–µ—Ä–∂–∞—Ç–µ–ª—è: {e}")
            return False

    async def _setup_bot(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –≤ JSON —Ñ–∞–π–ª–µ
            bot_data = self._load_bot_data()

            if bot_data and bot_data.get('bot_token') and bot_data.get('bot_username'):
                # –ë–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self.bot_token = bot_data['bot_token']
                self.bot_username = bot_data['bot_username']
                logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç: @{self.bot_username}")
                return True

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
            logger.info(f"ü§ñ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account_name}")

            self.bot_creator = BotCreator()
            bot_data = await self.bot_creator.create_bot_via_botfather(
                account=self.account,
                profile_name=self.profile_name
            )

            if not bot_data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
                return False

            self.bot_token = bot_data['token']
            self.bot_username = bot_data['username']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            self._save_bot_data(self.bot_token, self.bot_username)

            logger.info(f"‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: @{self.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            return False

    async def _initialize_inviter_bot(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç InviterBot –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
        try:
            if not self.bot_token or not self.bot_username:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return False

            # –°–æ–∑–¥–∞–µ–º InviterBot
            self.inviter_bot = InviterBot(
                bot_token=self.bot_token,
                bot_username=self.bot_username
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if not await self.inviter_bot.initialize():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å InviterBot")
                return False

            logger.info(f"‚úÖ InviterBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ InviterBot: {e}")
            return False

    def _load_bot_data(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if self.account_path.exists():
                with open(self.account_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {e}")
        return None

    def _save_bot_data(self, token: str, username: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if self.account_path.exists():
                with open(self.account_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            data.update({
                'bot_token': token,
                'bot_username': username,
                'bot_created_at': asyncio.get_event_loop().time()
            })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.account_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: @{username}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {e}")

    async def promote_account_to_admin(self, account, chat_link: str) -> bool:
        """–í—ã–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.inviter_bot:
            logger.error("‚ùå InviterBot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        return await self.inviter_bot.promote_user_to_admin(account, chat_link)

    async def revoke_admin_rights(self, account, chat_link: str) -> bool:
        """–û—Ç–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.inviter_bot:
            logger.error("‚ùå InviterBot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        return await self.inviter_bot.revoke_admin_rights(account, chat_link)

    async def check_bot_permissions(self, chat_link: str) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
        if not self.inviter_bot:
            logger.error("‚ùå InviterBot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {}

        return await self.inviter_bot.test_bot_permissions(chat_link)

    async def send_test_message(self, chat_link: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        if not self.inviter_bot:
            logger.error("‚ùå InviterBot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        return await self.inviter_bot.send_test_message(chat_link)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.inviter_bot:
                await self.inviter_bot.close()

            if self.account and self.account.client:
                await self.account.client.disconnect()

            logger.debug(f"üîå BotManager –∑–∞–∫—Ä—ã—Ç: {self.account_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è BotManager: {e}")

    def __str__(self):
        return f"BotManager({self.account_name}, @{self.bot_username})"

    def __repr__(self):
        return self.__str__()