# src/modules/impl/inviter/realtime_logger.py
import threading
from datetime import datetime
from pathlib import Path
from loguru import logger
from src.entities.moduls.inviter import InviteUser, UserStatus


class RealtimeLogger:
    """–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self, profile_name: str, profile_folder: Path):
        self.profile_name = profile_name
        self.profile_folder = profile_folder
        self.lock = threading.Lock()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self.reports_folder = profile_folder / "–û—Ç—á–µ—Ç—ã"
        self.reports_folder.mkdir(exist_ok=True)

        # –§–∞–π–ª—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.success_report_file = self.reports_folder / f"–£—Å–ø–µ—à–Ω—ã–µ_–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è_{timestamp}.txt"
        self.users_status_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"  # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô —Ñ–∞–π–ª!

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        self._init_success_report()

        logger.success(f"[{self.profile_name}] –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∞")
        logger.info(f"[{self.profile_name}] –û—Ç—á–µ—Ç —É—Å–ø–µ—Ö–æ–≤: {self.success_report_file}")
        logger.info(f"[{self.profile_name}] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤: {self.users_status_file}")

    def _init_success_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        try:
            with open(self.success_report_file, 'w', encoding='utf-8') as f:
                f.write(f"üéØ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–´–• –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô\n")
                f.write(f"=" * 70 + "\n")
                f.write(f"üìã –ü—Ä–æ—Ñ–∏–ª—å: {self.profile_name}\n")
                f.write(f"üïê –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"=" * 70 + "\n\n")
                f.write(f"–§–û–†–ú–ê–¢: [–í–†–ï–ú–Ø] –ß–ê–¢ -> @username (–∞–∫–∫–∞—É–Ω—Ç)\n")
                f.write(f"-" * 70 + "\n\n")
                f.flush()
        except Exception as e:
            logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

    def log_successful_invite(self, username: str, chat_link: str, account_name: str):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ù–ï–ú–ï–î–õ–ï–ù–ù–û"""
        with self.lock:
            try:
                timestamp = datetime.now().strftime('%H:%M:%S')
                chat_display = chat_link.replace('https://t.me/', '').replace('http://t.me/', '')

                log_line = f"[{timestamp}] {chat_display} -> @{username} ({account_name})\n"

                # –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                with open(self.success_report_file, 'a', encoding='utf-8') as f:
                    f.write(log_line)
                    f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫

            except Exception as e:
                logger.error(f"[{self.profile_name}] –û–®–ò–ë–ö–ê –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—Ö–∞: {e}")

    def update_user_status_immediately(self, user: InviteUser):
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–†–Ø–ú–û –í –°–£–©–ï–°–¢–í–£–Æ–©–ï–ú –§–ê–ô–õ–ï
        """
        with self.lock:
            try:
                username = user.username.lstrip('@')
                status_text = self._get_status_text(user.status)

                if not self.users_status_file.exists():
                    logger.warning(f"[{self.profile_name}] –§–∞–π–ª '–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return

                # –ß–ò–¢–ê–ï–ú –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
                with open(self.users_status_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()

                # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä–æ—Ç–∏–≤ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                updated = False
                for i, line in enumerate(lines):
                    line_stripped = line.strip()

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    if not line_stripped or line_stripped.startswith('#'):
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
                    first_word = line_stripped.split()[0].lstrip('@')

                    if first_word == username:
                        # –ù–ê–ô–î–ï–ù! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å
                        if '|' in line_stripped:
                            # –£–∂–µ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å, –∑–∞–º–µ–Ω—è–µ–º
                            parts = line_stripped.split('|')
                            parts[1] = status_text  # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                            lines[i] = '|'.join(parts) + '\n'
                        else:
                            # –ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º
                            lines[i] = f"{line_stripped}|{status_text}\n"

                        updated = True
                        break

                if updated:
                    # –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú –≤–µ—Å—å —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                    with open(self.users_status_file, 'w', encoding='utf-8') as f:
                        f.writelines(lines)
                        f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

                else:
                    logger.warning(f"[{self.profile_name}] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")

            except Exception as e:
                logger.error(f"[{self.profile_name}] –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def _get_status_text(self, status: UserStatus) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—Å—Ç"""
        status_mapping = {
            UserStatus.INVITED: "–£–°–ü–ï–®–ù–û_–î–û–ë–ê–í–õ–ï–ù",
            UserStatus.ERROR: "–°–ü–ò–°–ê–ù–ò–ï",  # –î–ª—è –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫/—Å–ø–∏—Å–∞–Ω–∏–π
            UserStatus.PRIVACY: "–ü–†–ò–í–ê–¢–ù–´–ï_–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø",
            UserStatus.SPAM_BLOCK: "–°–ü–ê–ú_–ë–õ–û–ö",
            UserStatus.ALREADY_IN: "–£–ñ–ï_–í_–ß–ê–¢–ï",
            UserStatus.NOT_FOUND: "–ù–ï_–ù–ê–ô–î–ï–ù"
        }
        return status_mapping.get(status, "–ë–õ–û–ö_–ò–ù–í–ê–ô–¢–ê")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫

    def finalize_report(self, total_processed: int, total_successful: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        with self.lock:
            try:
                with open(self.success_report_file, 'a', encoding='utf-8') as f:
                    f.write(f"\n" + "=" * 70 + "\n")
                    f.write(f"üèÅ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
                    f.write(f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}\n")
                    f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_successful}\n")
                    success_rate = (total_successful / total_processed * 100) if total_processed > 0 else 0
                    f.write(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n")
                    f.write(f"=" * 70 + "\n")
                    f.flush()

                logger.success(f"[{self.profile_name}] üìÑ –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù!")

            except Exception as e:
                logger.error(f"[{self.profile_name}] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")