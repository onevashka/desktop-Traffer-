# src/modules/impl/inviter/data_loader.py - –ü–†–û–°–¢–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
"""

import re
import queue
import datetime
from pathlib import Path
from typing import List, Tuple, Dict
from loguru import logger

from src.entities.moduls.inviter import InviteUser, UserStatus, InviterConfig


class InviterDataLoader:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""

    def __init__(self, profile_folder: Path):
        self.profile_folder = profile_folder

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.dirty_patterns = [
            (r'@(\w+):\s*(.+)', ':'),  # @user: –°—Ç–∞—Ç—É—Å
            (r'@(\w+)\s+(.+)', ' '),  # @user –°—Ç–∞—Ç—É—Å
            (r'@(\w+)\s*-\s*(.+)', '-')  # @user - –°—Ç–∞—Ç—É—Å
        ]

    def load_config(self, config_dict: dict) -> InviterConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
        logger.debug("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        config = InviterConfig.from_dict(config_dict)

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if config.is_admin_inviter():
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            if not config.bot_token:
                config.bot_token = self._load_bot_token()

            logger.debug(
                f"ü§ñ –ê–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä: —Ç–æ–∫–µ–Ω={'–µ—Å—Ç—å' if config.bot_token else '–Ω–µ—Ç'}, –∞–¥–º–∏–Ω={config.main_admin_account}")

        return config

    def _load_bot_token(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–¢–û–õ–¨–ö–û –ò–ó –§–ê–ô–õ–û–í, –ù–ï –ò–ó –ö–û–ù–§–ò–ì–ê!)"""
        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º bot_tokens.txt (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
            tokens_file = self.profile_folder / "bot_tokens.txt"
            if tokens_file.exists():
                content = tokens_file.read_text(encoding='utf-8').strip()
                tokens = [line.strip() for line in content.split('\n') if line.strip()]
                if tokens:
                    logger.debug("ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ bot_tokens.txt")
                    return tokens[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω

            # 2. –ü—Ä–æ–±—É–µ–º bot_token.txt (legacy —Ñ–æ—Ä–º–∞—Ç)
            token_file = self.profile_folder / "bot_token.txt"
            if token_file.exists():
                token = token_file.read_text(encoding='utf-8').strip()
                if token:
                    logger.debug("ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ bot_token.txt")
                    return token

            logger.debug("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ")
            return ""

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {e}")
            return ""

    def save_bot_token(self, token: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            token_file = self.profile_folder / "bot_token.txt"
            token_file.write_text(token.strip(), encoding='utf-8')
            logger.info("üíæ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    def load_chats(self) -> Tuple[List[str], int]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞

        Returns:
            Tuple[—Å–ø–∏—Å–æ–∫_—á–∞—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
        """
        chats_file = self.profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        if not chats_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {chats_file}")
            return [], 0

        try:
            content = chats_file.read_text(encoding='utf-8').strip()
            if not content:
                logger.error("‚ùå –§–∞–π–ª —á–∞—Ç–æ–≤ –ø—É—Å—Ç–æ–π")
                return [], 0

            chats = [line.strip() for line in content.split('\n') if line.strip() and not line.startswith('#')]
            logger.info(f"üí¨ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")

            return chats, len(chats)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
            return [], 0

    def load_users(self) -> Tuple[queue.Queue, Dict[str, InviteUser], int, int]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            Tuple[–æ—á–µ—Ä–µ–¥—å_—á–∏—Å—Ç—ã—Ö, —Å–ª–æ–≤–∞—Ä—å_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, –∫–æ–ª-–≤–æ_—á–∏—Å—Ç—ã—Ö, –∫–æ–ª-–≤–æ_–≥—Ä—è–∑–Ω—ã—Ö]
        """
        users_file = self.profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

        if not users_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {users_file}")
            return queue.Queue(), {}, 0, 0

        try:
            content = users_file.read_text(encoding='utf-8').strip()
            if not content:
                logger.error("‚ùå –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π")
                return queue.Queue(), {}, 0, 0

            user_queue = queue.Queue()
            processed_users = {}
            clean_count = 0
            dirty_count = 0

            for line in content.split('\n'):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥—Ä—è–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                user, is_dirty = self._parse_user_line(line)

                if user:
                    if is_dirty:
                        processed_users[user.username] = user
                        dirty_count += 1
                        logger.debug(f"üö´ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {line}")
                    else:
                        user_queue.put(user)
                        clean_count += 1

            logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {clean_count} —á–∏—Å—Ç—ã—Ö, {dirty_count} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö")

            return user_queue, processed_users, clean_count, dirty_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return queue.Queue(), {}, 0, 0

    def _parse_user_line(self, line: str) -> Tuple[InviteUser, bool]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Tuple[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≥—Ä—è–∑–Ω—ã–π_–ª–∏]
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥—Ä—è–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
            for pattern, separator in self.dirty_patterns:
                match = re.match(pattern, line, re.IGNORECASE)
                if match:
                    username = match.group(1)
                    status_text = match.group(2).strip()

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status = UserStatus.ERROR  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if "–ø—Ä–∏–≥–ª–∞—à–µ–Ω" in status_text.lower() or "‚úÖ" in status_text:
                        status = UserStatus.INVITED
                    elif "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å" in status_text.lower() or "üîí" in status_text:
                        status = UserStatus.PRIVACY
                    elif "—É–∂–µ –≤ —á–∞—Ç–µ" in status_text.lower() or "üë•" in status_text:
                        status = UserStatus.ALREADY_IN
                    elif "—Å–ø–∞–º–±–ª–æ–∫" in status_text.lower() or "üö´" in status_text:
                        status = UserStatus.SPAM_BLOCK
                    elif "–Ω–µ –Ω–∞–π–¥–µ–Ω" in status_text.lower() or "‚ùì" in status_text:
                        status = UserStatus.NOT_FOUND

                    user = InviteUser(username=username, status=status, error_message=status_text)
                    return user, True  # –ì—Ä—è–∑–Ω—ã–π

            # –ß–∏—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º username
            if line.startswith('@'):
                username = line[1:].strip()
            else:
                username = line.strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è username
            if re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
                user = InviteUser(username=username, status=UserStatus.CLEAN)
                return user, False  # –ß–∏—Å—Ç—ã–π
            else:
                return None, False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {line}, –æ—à–∏–±–∫–∞: {e}")
            return None, False

    def save_users_progress(self, processed_users: Dict[str, InviteUser], remaining_queue: queue.Queue):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users_file = self.profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
            backup_file = self.profile_folder / f"–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤_backup_{int(datetime.datetime.now().timestamp())}.txt"

            # –î–µ–ª–∞–µ–º –±—ç–∫–∞–ø
            if users_file.exists():
                import shutil
                shutil.copy2(users_file, backup_file)

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_lines = []

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            for user in processed_users.values():
                all_lines.append(user.to_file_format())

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∏—Å—Ç—ã—Ö
            while not remaining_queue.empty():
                try:
                    user = remaining_queue.get_nowait()
                    all_lines.append(user.to_file_format())
                except queue.Empty:
                    break

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            users_file.write_text('\n'.join(all_lines), encoding='utf-8')
            logger.info(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(all_lines)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def validate_admin_profile(self, config: InviterConfig) -> Tuple[bool, List[str]]:
        """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø—Ä–æ—Ñ–∏–ª—è"""
        if not config.is_admin_inviter():
            return True, []

        errors = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_valid, config_errors = config.validate_admin_config()
        errors.extend(config_errors)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        chats, chats_count = self.load_chats()
        if chats_count == 0:
            errors.append("–ë–∞–∑–∞ —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞")

        users_queue, processed_users, clean_count, dirty_count = self.load_users()
        if clean_count == 0:
            errors.append("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞")

        return len(errors) == 0, errors