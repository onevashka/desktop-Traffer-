# src/modules/impl/inviter/data_loader.py
"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
"""

import re
import queue
from pathlib import Path
from typing import List, Tuple, Dict
from loguru import logger

from src.entities.modules.inviter import InviteUser, UserStatus, InviterConfig


class InviterDataLoader:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""

    def __init__(self, profile_folder: Path):
        self.profile_folder = profile_folder

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.dirty_patterns = [
            (r'@(\w+):\s*(.+)', ':'),  # @user: –°—Ç–∞—Ç—É—Å
            (r'@(\w+)\s+(.+)', ' '),  # @user –°—Ç–∞—Ç—É—Å
            (r'@(\w+)\s*-\s*(.+)', '-')  # @user - –°—Ç–∞—Ç—É—Å
        ]

    def load_config(self, config_dict: dict) -> InviterConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        logger.debug("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return InviterConfig.from_dict(config_dict)

    def load_chats(self) -> Tuple[List[str], int]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞

        Returns:
            Tuple[—Å–ø–∏—Å–æ–∫_—á–∞—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
        """
        chats_file = self.profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        if not chats_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {chats_file}")
            return [], 0

        try:
            content = chats_file.read_text(encoding='utf-8').strip()
            if not content:
                logger.error("‚ùå –§–∞–π–ª —á–∞—Ç–æ–≤ –ø—É—Å—Ç–æ–π")
                return [], 0

            chats = [line.strip() for line in content.split('\n') if line.strip()]
            logger.info(f"üí¨ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")

            return chats, len(chats)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
            return [], 0

    def load_users(self) -> Tuple[queue.Queue, Dict[str, InviteUser], int, int]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            Tuple[–æ—á–µ—Ä–µ–¥—å_—á–∏—Å—Ç—ã—Ö, —Å–ª–æ–≤–∞—Ä—å_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, –∫–æ–ª-–≤–æ_—á–∏—Å—Ç—ã—Ö, –∫–æ–ª-–≤–æ_–≥—Ä—è–∑–Ω—ã—Ö]
        """
        users_file = self.profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

        if not users_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {users_file}")
            return queue.Queue(), {}, 0, 0

        try:
            content = users_file.read_text(encoding='utf-8').strip()
            if not content:
                logger.error("‚ùå –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π")
                return queue.Queue(), {}, 0, 0

            user_queue = queue.Queue()
            processed_users = {}
            clean_count = 0
            dirty_count = 0

            for line in content.split('\n'):
                line = line.strip()
                if not line:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥—Ä—è–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                user, is_dirty = self._parse_user_line(line)

                if user:
                    if is_dirty:
                        processed_users[user.username] = user
                        dirty_count += 1
                        logger.debug(f"üö´ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {line}")
                    else:
                        user_queue.put(user)
                        clean_count += 1

            logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {clean_count} —á–∏—Å—Ç—ã—Ö, {dirty_count} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö")

            return user_queue, processed_users, clean_count, dirty_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return queue.Queue(), {}, 0, 0

    def _parse_user_line(self, line: str) -> Tuple[InviteUser, bool]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        Returns:
            Tuple[InviteUser, is_dirty]
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—è–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern, separator in self.dirty_patterns:
            match = re.match(pattern, line)
            if match:
                username = match.group(1)
                status_text = match.group(2)

                user = InviteUser(
                    username=username,
                    status=self._parse_status(status_text),
                    error_message=status_text if separator in line else None
                )
                return user, True

        # –ß–∏—Å—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        username = line.strip()
        if username.startswith('@'):
            username = username[1:]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è username
        if username and self._is_valid_username(username):
            return InviteUser(username=username), False

        return None, False

    def _is_valid_username(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username"""
        # Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5-32 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã
        return bool(re.match(r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$', username))

    def _parse_status(self, status_text: str) -> UserStatus:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        status_lower = status_text.lower()

        status_map = {
            '–ø—Ä–∏–≥–ª–∞—à–µ–Ω': UserStatus.INVITED,
            '‚úÖ': UserStatus.INVITED,
            '–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å': UserStatus.PRIVACY,
            'üîí': UserStatus.PRIVACY,
            '—É–∂–µ –≤ —á–∞—Ç–µ': UserStatus.ALREADY_IN,
            'üë•': UserStatus.ALREADY_IN,
            '—Å–ø–∞–º–±–ª–æ–∫': UserStatus.SPAM_BLOCK,
            'üö´': UserStatus.SPAM_BLOCK,
            '–Ω–µ –Ω–∞–π–¥–µ–Ω': UserStatus.NOT_FOUND,
            '‚ùì': UserStatus.NOT_FOUND,
            '—Ñ–ª—É–¥': UserStatus.FLOOD_WAIT,
            '‚è≥': UserStatus.FLOOD_WAIT,
        }

        for key, status in status_map.items():
            if key in status_lower:
                return status

        return UserStatus.ERROR

    def save_users_progress(self, processed_users: Dict[str, InviteUser],
                            user_queue: queue.Queue):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users_file = self.profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_lines = []

            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            for user in processed_users.values():
                all_lines.append(user.to_file_format())

            # –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            temp_users = []
            while not user_queue.empty():
                try:
                    user = user_queue.get_nowait()
                    temp_users.append(user)
                    all_lines.append(user.to_file_format())
                except queue.Empty:
                    break

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            for user in temp_users:
                user_queue.put(user)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            content = '\n'.join(all_lines)
            users_file.write_text(content, encoding='utf-8')

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(processed_users)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {len(temp_users)} –≤ –æ—á–µ—Ä–µ–¥–∏")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")