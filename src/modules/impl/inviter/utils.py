# src/modules/impl/inviter/utils.py
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä–∞
"""

import asyncio
import queue
import threading
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger
from pathlib import Path

from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats
from .account_mover import AccountMover

# –ò–º–ø–æ—Ä—Ç—ã Telethon
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


def get_fresh_accounts(parent_process, module_name: str, count: int) -> List:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ (–Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –Ω–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ) –∞–∫–∫–∞—É–Ω—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Å—Ç–µ–∫—à–µ–π 24-—á–∞—Å–æ–≤–æ–π –º–µ—Ç–∫–æ–π
    clean_expired_accounts(parent_process)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    all_accounts = parent_process.account_manager.get_free_accounts(module_name, count * 3)  # –ë–µ—Ä–µ–º —Å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º

    if not all_accounts:
        logger.warning(f"[{parent_process.profile_name}] AccountManager –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∞–∫–∫–∞—É–Ω—Ç—ã")
        return []

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    fresh_accounts = []
    filtered_out = []

    for account in all_accounts:
        account_name = account.name
        should_skip = False
        skip_reason = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if hasattr(parent_process, 'account_mover') and parent_process.account_mover.is_account_moved(account_name):
            should_skip = True
            skip_reason = "–ø–µ—Ä–µ–º–µ—â–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        elif account_name in parent_process.finished_accounts:
            should_skip = True
            skip_reason = "–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        elif account_name in parent_process.frozen_accounts:
            should_skip = True
            skip_reason = "–∑–∞–º–æ—Ä–æ–∂–µ–Ω"

        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        elif hasattr(parent_process, 'blocked_accounts') and account_name in parent_process.blocked_accounts:
            should_skip = True
            skip_reason = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ"

        if should_skip:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ
            parent_process.account_manager.release_account(account_name, module_name)
            filtered_out.append(f"{account_name} ({skip_reason})")
            logger.debug(f"[{parent_process.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} {skip_reason}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

        # –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
        fresh_accounts.append(account)
        if len(fresh_accounts) >= count:
            break

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏—à–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    for account in all_accounts[len(fresh_accounts):]:
        if account not in fresh_accounts:
            parent_process.account_manager.release_account(account.name, module_name)

    if filtered_out:
        logger.info(f"[{parent_process.profile_name}] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(filtered_out)}")
        logger.debug(f"   –î–µ—Ç–∞–ª–∏: {', '.join(filtered_out[:5])}" + ("..." if len(filtered_out) > 5 else ""))

    logger.info(
        f"[{parent_process.profile_name}] –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ–∂–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(fresh_accounts)} –∏–∑ {len(all_accounts)} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö")
    return fresh_accounts


def clean_expired_accounts(parent_process):
    """–û—á–∏—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Å—Ç–µ–∫—à–µ–π 24-—á–∞—Å–æ–≤–æ–π –º–µ—Ç–∫–æ–π"""
    now = datetime.now()
    expired = []

    for account_name, finish_time in parent_process.account_finish_times.items():
        if now - finish_time >= timedelta(hours=24):
            expired.append(account_name)

    for account_name in expired:
        parent_process.finished_accounts.discard(account_name)
        del parent_process.account_finish_times[account_name]
        logger.info(f"[{parent_process.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)")


def load_main_admin_account(parent_process):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç Account –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–∞–ø–∫–∏ –ê–¥–º–∏–Ω—ã"""
    try:
        profile_folder = Path(parent_process.profile_data['folder_path'])
        admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"

        # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        session_file = admins_folder / f"{parent_process.main_admin_account_name}.session"
        json_file = admins_folder / f"{parent_process.main_admin_account_name}.json"

        if not session_file.exists():
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω session —Ñ–∞–π–ª: {session_file}")
            return None

        if not json_file.exists():
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª: {json_file}")
            return None

        # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
        from src.accounts.impl.account import Account
        account = Account(
            session_path=session_file,
            json_path=json_file
        )

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∏–∑ –ø–∞–ø–∫–∏ –ê–¥–º–∏–Ω—ã: {parent_process.main_admin_account_name}")
        return account

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
        return None


def determine_account_problem(error: Exception) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –æ—à–∏–±–∫–µ"""
    error_text = str(error).lower()

    # –ó–∞–º–æ—Ä–æ–∑–∫–∞/—Å–ø–∞–º
    if any(keyword in error_text for keyword in ['flood', 'spam', 'rate limit', 'peer_flood']):
        return 'frozen'

    # –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    elif any(keyword in error_text for keyword in ['connection', 'connect', 'timeout', 'network']):
        return 'connection_failed'

    # –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    elif any(keyword in error_text for keyword in ['unauthorized', 'not authorized', 'auth', 'session']):
        return 'unauthorized'

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–µ—Ä—Ç–≤—ã–π
    else:
        return 'dead'


async def initialize_worker_clients(worker_accounts: List, parent_process):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {len(worker_accounts)} –≤–æ—Ä–∫–µ—Ä–æ–≤...")

    for account_data in worker_accounts:
        try:
            await account_data.account.create_client()
            logger.debug(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {account_data.name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ {account_data.name}: {e}")


def check_chat_limits(parent_process, chat_success: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è —á–∞—Ç–∞"""
    # –õ–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞
    if parent_process.config.success_per_chat > 0:
        if chat_success >= parent_process.config.success_per_chat:
            return False
    return True


def check_account_limits(parent_process, account_name: str, invites_count: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    account_stats = parent_process.account_stats.get(account_name)
    if account_stats:
        if account_stats.status == 'finished':
            return False
        if account_stats.status == 'spam_blocked':
            return False

    # –õ–∏–º–∏—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    if parent_process.config.success_per_account > 0:
        if invites_count >= parent_process.config.success_per_account:
            return False

    return True


def mark_account_as_finished(parent_process, account_name: str):
    """–ü–æ–º–µ—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ 24 —á–∞—Å–∞"""
    try:
        finish_time = datetime.now()
        parent_process.account_finish_times[account_name] = finish_time
        next_available = finish_time + timedelta(hours=24)
        logger.info(f"üìå [{parent_process.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
        logger.info(f"   ‚è∞ –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {next_available.strftime('%Y-%m-%d %H:%M:%S')}")
    except Exception as e:
        logger.error(f"‚ùå [{parent_process.profile_name}] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")


def print_final_stats(parent_process):
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logger.info("=" * 60)
    logger.info(f"[{parent_process.profile_name}] üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info(f"[{parent_process.profile_name}] –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {parent_process.total_processed}")
    logger.info(f"[{parent_process.profile_name}] –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {parent_process.total_success}")
    logger.info(f"[{parent_process.profile_name}] –û—à–∏–±–æ–∫: {parent_process.total_errors}")

    if parent_process.total_processed > 0:
        success_rate = (parent_process.total_success / parent_process.total_processed) * 100
        logger.info(f"[{parent_process.profile_name}] –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:")
    for account_name, stats in parent_process.account_stats.items():
        status_icon = "‚úÖ" if stats.status == 'finished' else "‚ö°" if stats.status == 'working' else "‚ùå"
        logger.info(
            f"   {status_icon} {account_name}: –∏–Ω–≤–∞–π—Ç–æ–≤={stats.invites}, –æ—à–∏–±–æ–∫={stats.errors}, —Å–ø–∞–º–±–ª–æ–∫–æ–≤={stats.spam_blocks}, —Å—Ç–∞—Ç—É—Å={stats.status}")

    if parent_process.finished_accounts:
        logger.info(f"\nüèÅ –û–¢–†–ê–ë–û–¢–ê–í–®–ò–ï –ê–ö–ö–ê–£–ù–¢–´: {len(parent_process.finished_accounts)}")
        for account_name in parent_process.finished_accounts:
            if account_name in parent_process.account_finish_times:
                finish_time = parent_process.account_finish_times[account_name]
                next_available = finish_time + timedelta(hours=24)
                logger.info(f"   - {account_name} (–¥–æ—Å—Ç—É–ø–µ–Ω —Å {next_available.strftime('%H:%M:%S')})")

    if parent_process.frozen_accounts:
        logger.warning(f"\n–ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´: {len(parent_process.frozen_accounts)}")
        for frozen_account in parent_process.frozen_accounts:
            logger.warning(f"   - {frozen_account}")

    logger.info("=" * 60)


def release_worker_accounts(worker_accounts: List, module_name: str, account_manager):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    released_count = 0

    for account_data in worker_accounts:
        try:
            account_manager.release_account(account_data.name, module_name)
            released_count += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ {account_data.name}: {e}")

    logger.info(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {released_count} –∏–∑ {len(worker_accounts)}")
    return released_count