# src/modules/impl/inviter/utils.py
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–∏–Ω–≤–∞–π—Ç–µ—Ä–∞
–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
"""

import asyncio
import queue
import threading
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from loguru import logger
from pathlib import Path

from src.entities.moduls.inviter import InviteUser, UserStatus, AccountStats
from .account_mover import AccountMover

# –ò–º–ø–æ—Ä—Ç—ã Telethon
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.errors import (
    UsernameInvalidError, UsernameNotOccupiedError,
    PeerFloodError, FloodWaitError,
    UserPrivacyRestrictedError, UserNotMutualContactError,
    ChatAdminRequiredError, ChatWriteForbiddenError,
    UsersTooMuchError, ChannelsTooMuchError,
    UserDeactivatedBanError, UserDeactivatedError,
    AuthKeyUnregisteredError, SessionRevokedError,
    ChannelPrivateError, ChannelInvalidError
)


def get_fresh_accounts(parent_process, module_name: str, count: int) -> List:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    clean_expired_accounts(parent_process)

    all_accounts = parent_process.account_manager.get_free_accounts(module_name, count * 2)
    if not all_accounts:
        logger.warning(f"‚ö†Ô∏è AccountManager –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∞–∫–∫–∞—É–Ω—Ç—ã")
        return []

    fresh_accounts = []
    filtered_count = 0

    for account in all_accounts:
        account_name = account.name

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        if (account_name in parent_process.finished_accounts or
                account_name in parent_process.frozen_accounts or
                account_name in parent_process.blocked_accounts or
                parent_process.account_mover.is_account_moved(account_name)):
            parent_process.account_manager.release_account(account_name, module_name)
            filtered_count += 1
            continue

        fresh_accounts.append(account)
        if len(fresh_accounts) >= count:
            break

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏—à–Ω–∏–µ
    for account in all_accounts[len(fresh_accounts):]:
        parent_process.account_manager.release_account(account.name, module_name)

    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ–∂–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(fresh_accounts)} (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_count})")
    return fresh_accounts


def clean_expired_accounts(parent_process):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (24 —á–∞—Å–∞)"""
    now = datetime.now()
    expired = []

    for account_name, finish_time in parent_process.account_finish_times.items():
        if now - finish_time >= timedelta(hours=24):
            expired.append(account_name)

    for account_name in expired:
        parent_process.finished_accounts.discard(account_name)
        del parent_process.account_finish_times[account_name]
        logger.info(f"‚ôªÔ∏è –ê–∫–∫–∞—É–Ω—Ç {account_name} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")


def load_main_admin_account(parent_process):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        profile_folder = Path(parent_process.profile_data['folder_path'])
        admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"

        session_file = admins_folder / f"{parent_process.main_admin_account_name}.session"
        json_file = admins_folder / f"{parent_process.main_admin_account_name}.json"

        if not session_file.exists() or not json_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª—ã –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None

        from src.accounts.impl.account import Account
        account = Account(session_path=session_file, json_path=json_file)

        logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {parent_process.main_admin_account_name}")
        return account

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
        return None


def determine_account_problem(error: Exception) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
    error_text = str(error).lower()

    if any(keyword in error_text for keyword in ['flood', 'spam', 'rate limit']):
        return 'frozen'
    elif any(keyword in error_text for keyword in ['connection', 'timeout', 'network']):
        return 'connection_failed'
    elif any(keyword in error_text for keyword in ['unauthorized', 'auth', 'session']):
        return 'unauthorized'
    else:
        return 'dead'


async def initialize_worker_clients(worker_accounts: List, parent_process):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {len(worker_accounts)} –≤–æ—Ä–∫–µ—Ä–æ–≤...")

    for account_data in worker_accounts:
        try:
            await account_data.account.create_client()
            logger.debug(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {account_data.name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ {account_data.name}: {e}")


def check_chat_limits(parent_process, chat_success: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —á–∞—Ç–∞"""
    if parent_process.config.success_per_chat > 0:
        return chat_success < parent_process.config.success_per_chat
    return True


def check_account_limits(parent_process, account_name: str, invites_count: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    account_stats = parent_process.account_stats.get(account_name)
    if account_stats and account_stats.status in ['finished', 'spam_blocked']:
        return False

    # –õ–∏–º–∏—Ç –∏–Ω–≤–∞–π—Ç–æ–≤
    if parent_process.config.success_per_account > 0:
        return invites_count < parent_process.config.success_per_account

    return True


def mark_account_as_finished(parent_process, account_name: str):
    """–ü–æ–º–µ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ"""
    finish_time = datetime.now()
    parent_process.account_finish_times[account_name] = finish_time
    parent_process.finished_accounts.add(account_name)

    next_available = finish_time + timedelta(hours=24)

def print_final_stats(parent_process):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    logger.info("=" * 50)
    logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {parent_process.profile_name}")
    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {parent_process.total_processed}")
    logger.info(f"   –£—Å–ø–µ—à–Ω–æ: {parent_process.total_success}")
    logger.info(f"   –û—à–∏–±–æ–∫: {parent_process.total_errors}")

    if parent_process.total_processed > 0:
        success_rate = (parent_process.total_success / parent_process.total_processed) * 100
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

    logger.info(f"   –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(parent_process.finished_accounts)}")
    logger.info(f"   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(parent_process.frozen_accounts)}")
    logger.info(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(parent_process.blocked_accounts)}")
    logger.info("=" * 50)


def release_worker_accounts(worker_accounts: List, module_name: str, account_manager):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    released_count = 0

    for account_data in worker_accounts:
        try:
            account_manager.release_account(account_data.name, module_name)
            released_count += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ {account_data.name}: {e}")

    logger.info(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {released_count} –∏–∑ {len(worker_accounts)}")
    return released_count


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async def safe_disconnect_account(account, account_name: str, loop=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        await account.disconnect()
        logger.debug(f"üîå –ê–∫–∫–∞—É–Ω—Ç {account_name} –æ—Ç–∫–ª—é—á–µ–Ω")
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
        return False


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
def get_replacement_account(parent_process, module_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—â–∞—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ"""
    try:
        replacement_accounts = get_fresh_accounts(parent_process, module_name, 1)
        if replacement_accounts:
            return replacement_accounts[0]
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∑–∞–º–µ–Ω–æ–π
async def handle_and_replace_account(parent_process, account_name: str, account_data, error: Exception,
                                     module_name: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–µ—â–∞—é—â–∏–π

    Returns:
        tuple: (replacement_account, success)
    """
    try:
        logger.error(f"üö® [{parent_process.profile_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}")
        logger.error(f"   –û—à–∏–±–∫–∞: {error}")

        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
        problem_type = determine_account_problem(error)

        # 2. –û—Ç–∫–ª—é—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if account_data and hasattr(account_data, 'account'):
            await safe_disconnect_account(account_data.account, account_name, parent_process.main_loop)

        # 3. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        parent_process.account_manager.release_account(account_name, module_name)
        logger.info(f"üîì [{parent_process.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")

        # 4. –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ AccountMover
        success = parent_process.account_mover.move_account(account_name, problem_type)

        if success:
            logger.success(
                f"‚úÖ [{parent_process.profile_name}] –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É '{problem_type}'")
        else:
            logger.error(f"‚ùå [{parent_process.profile_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account_name}")

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        if problem_type == 'frozen':
            parent_process.frozen_accounts.add(account_name)
        else:
            parent_process.blocked_accounts.add(account_name)

        # 6. –ö–õ–Æ–ß–ï–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—â–∞—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        replacement_account = get_replacement_account(parent_process, module_name)

        if replacement_account:
            logger.success(f"üîÑ [{parent_process.profile_name}] –ü–æ–ª—É—á–µ–Ω –∑–∞–º–µ—â–∞—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç: {replacement_account.name}")
            return replacement_account, True
        else:
            logger.warning(f"‚ö†Ô∏è [{parent_process.profile_name}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—â–∞—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return None, True  # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏, –Ω–æ –∑–∞–º–µ–Ω—ã –Ω–µ—Ç

    except Exception as e:
        logger.error(f"‚ùå [{parent_process.profile_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
        return None, False


# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –î–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

async def verify_main_admin_rights(main_admin_client, chat_link: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ

    Args:
        main_admin_client: –ö–ª–∏–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç

    Returns:
        bool: True –µ—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
    """
    try:
        from telethon.tl.functions.channels import GetParticipantRequest

        chat_entity = await main_admin_client.get_entity(chat_link)
        me = await main_admin_client.get_me()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –ø—Ä–∞–≤–∞—Ö –≤ —á–∞—Ç–µ
        participant = await main_admin_client(GetParticipantRequest(
            channel=chat_entity,
            participant=me
        ))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if hasattr(participant.participant, 'admin_rights'):
            admin_rights = participant.participant.admin_rights
            if admin_rights and admin_rights.add_admins:
                return True

        logger.warning(f"‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ù–ï –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ {chat_link}")
        return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {chat_link}: {e}")
        return False


async def wait_for_main_admin_rights(main_admin_client, chat_link: str, timeout_seconds: int = 60) -> bool:
    """
    –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ

    Args:
        main_admin_client: –ö–ª–∏–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        timeout_seconds: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ timeout
    """
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {chat_link} (–º–∞–∫—Å. {timeout_seconds} —Å–µ–∫)")

    start_time = datetime.now()
    check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    while (datetime.now() - start_time).total_seconds() < timeout_seconds:
        if await verify_main_admin_rights(main_admin_client, chat_link):
            logger.success(f"‚úÖ –ü—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤ {chat_link}")
            return True

        logger.info(
            f"‚è≥ –ñ–¥–µ–º –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {chat_link}... (–æ—Å—Ç–∞–ª–æ—Å—å {timeout_seconds - int((datetime.now() - start_time).total_seconds())} —Å–µ–∫)")
        await asyncio.sleep(check_interval)

    logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {chat_link}")
    return False


async def ensure_main_admin_ready_in_chat(main_admin_account, admin_rights_manager, chat_link: str) -> bool:
    """
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ

    1. –ó–∞—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø—É
    2. –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç –±–æ—Ç–∞
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞

    Args:
        main_admin_account: –ê–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        admin_rights_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–≤
        chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç

    Returns:
        bool: True –µ—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤
    """
    try:

        # –®–∞–≥ 1: –ó–∞—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É
        join_result = await main_admin_account.join(chat_link)

        if join_result == "FROZEN_ACCOUNT":
            logger.error(f"‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –∑–∞–º–æ—Ä–æ–∂–µ–Ω!")
            return False
        elif join_result not in ["SUCCESS", "ALREADY_PARTICIPANT"]:
            logger.error(f"‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ —Å–º–æ–≥ –∑–∞–π—Ç–∏ –≤ {chat_link}: {join_result}")
            return False

        # –®–∞–≥ 2: –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(3)

        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        me = await main_admin_account.client.get_me()
        main_admin_user_id = me.id
        main_admin_name = main_admin_account.session_path.stem

        chat_entity = await main_admin_account.client.get_input_entity(chat_link)
        chat = await main_admin_account.client.get_entity(chat_entity)
        chat_id = getattr(chat, 'id', None)

        # –®–∞–≥ 4: –ë–æ—Ç –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞
        rights_granted = await admin_rights_manager.grant_main_admin_rights(
            chat_link=chat_id,
            user_id=main_admin_user_id,
            account_name=main_admin_name
        )

        if not rights_granted:
            logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –≤—ã–¥–∞–ª –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –≤ {chat_link}")
            return False

        # –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        rights_confirmed = await wait_for_main_admin_rights(
            main_admin_client=main_admin_account.client,
            chat_link=chat_link,
            timeout_seconds=60
        )

        if not rights_confirmed:
            logger.error(f"‚ùå –ü—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤ {chat_link}")
            return False
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {chat_link}: {e}")
        return False


def is_chat_ready_for_workers(parent_process, chat_link: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤

    Args:
        parent_process: –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        chat_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç

    Returns:
        bool: True –µ—Å–ª–∏ —á–∞—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    """
    return chat_link in parent_process.ready_chats


def get_ready_chats_count(parent_process) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤"""
    return len(parent_process.ready_chats)


def log_main_admin_preparation_summary(parent_process):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    total_chats = 0
    while not parent_process.chat_queue.empty():
        parent_process.chat_queue.get_nowait()
        total_chats += 1

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
    for _ in range(total_chats):
        parent_process.chat_queue.put(f"chat_{_}")  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞

    ready_count = len(parent_process.ready_chats)

    logger.info("=" * 60)
    logger.info("üìã –°–í–û–î–ö–ê –ü–û–î–ì–û–¢–û–í–ö–ò –ì–õ–ê–í–ù–û–ì–û –ê–î–ú–ò–ù–ê")
    logger.info("=" * 60)
    logger.info(f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}")
    logger.info(f"–ì–æ—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤: {ready_count}")
    logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {(ready_count / total_chats * 100):.1f}%" if total_chats > 0 else "0%")

    if ready_count > 0:
        logger.info("–ì–æ—Ç–æ–≤—ã–µ —á–∞—Ç—ã:")
        for i, chat in enumerate(parent_process.ready_chats, 1):
            logger.info(f"  {i}. {chat}")

    logger.info("=" * 60)


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
def validate_system_readiness(parent_process) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É –≤–æ—Ä–∫–µ—Ä–æ–≤

    Returns:
        bool: True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
    """
    checks = {
        "–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω": parent_process.bot_manager is not None,
        "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω": parent_process.main_admin_account is not None,
        "–ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —á–∞—Ç—ã": len(parent_process.ready_chats) > 0,
        "–ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": not parent_process.user_queue.empty(),
        "–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω": parent_process.admin_background_thread is not None
    }

    logger.info("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
    logger.info("-" * 40)

    all_ready = True
    for check_name, status in checks.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        logger.info(f"{status_icon} {check_name}")
        if not status:
            all_ready = False

    logger.info("-" * 40)

    if all_ready:
        logger.success("üéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ –í–û–†–ö–ï–†–û–í!")
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ.")

    return all_ready


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
async def check_main_admin_health(main_admin_client, chat_links: List[str]) -> Dict[str, bool]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç "–∑–¥–æ—Ä–æ–≤—å–µ" –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö

    Args:
        main_admin_client: –ö–ª–∏–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        chat_links: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        Dict: {chat_link: is_healthy}
    """
    results = {}

    logger.info(f"ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ {len(chat_links)} —á–∞—Ç–∞—Ö")

    for chat_link in chat_links:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞
            is_healthy = await verify_main_admin_rights(main_admin_client, chat_link)
            results[chat_link] = is_healthy

            status_icon = "‚úÖ" if is_healthy else "‚ùå"
            logger.info(f"{status_icon} {chat_link}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {chat_link}: {e}")
            results[chat_link] = False

    healthy_count = sum(results.values())
    logger.info(f"ü©∫ –†–µ–∑—É–ª—å—Ç–∞—Ç: {healthy_count}/{len(chat_links)} —á–∞—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤—ã")

    return results