# src/modules/impl/inviter/bot_account_manager.py
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤-–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
"""

import shutil
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from loguru import logger

from paths import WORK_ACCOUNTS_TRAFFER_FOLDER, BOT_HOLDERS_FOLDER


class BotAccountManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –±–æ—Ç–æ–≤"""

    def __init__(self):
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        BOT_HOLDERS_FOLDER.mkdir(parents=True, exist_ok=True)
        logger.debug("ü§ñ BotAccountManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def assign_bot_account(self, account_name: str) -> Tuple[bool, str]:
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ (–ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É)

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            Tuple[—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ]
        """
        try:
            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
            source_session = WORK_ACCOUNTS_TRAFFER_FOLDER / f"{account_name}.session"
            source_json = WORK_ACCOUNTS_TRAFFER_FOLDER / f"{account_name}.json"

            dest_session = BOT_HOLDERS_FOLDER / f"{account_name}.session"
            dest_json = BOT_HOLDERS_FOLDER / f"{account_name}.json"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not source_session.exists() or not source_json.exists():
                return False, f"–§–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –¥–µ—Ä–∂–∞—Ç–µ–ª—å –±–æ—Ç–∞
            if dest_session.exists():
                return False, f"–ê–∫–∫–∞—É–Ω—Ç {account_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞"

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
            logger.info(f"ü§ñ –ù–∞–∑–Ω–∞—á–∞–µ–º {account_name} –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞...")

            shutil.move(str(source_session), str(dest_session))
            shutil.move(str(source_json), str(dest_json))

            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –±–æ—Ç–æ–≤")

            # –û–±–Ω–æ–≤–ª—è–µ–º AccountManager
            self._update_account_manager(account_name, 'assign')

            return True, f"–ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è {account_name}: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    def release_bot_account(self, account_name: str) -> Tuple[bool, str]:
        """
        –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –±–æ—Ç–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É)

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            Tuple[—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ]
        """
        try:
            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
            source_session = BOT_HOLDERS_FOLDER / f"{account_name}.session"
            source_json = BOT_HOLDERS_FOLDER / f"{account_name}.json"

            dest_session = WORK_ACCOUNTS_TRAFFER_FOLDER / f"{account_name}.session"
            dest_json = WORK_ACCOUNTS_TRAFFER_FOLDER / f"{account_name}.json"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not source_session.exists() or not source_json.exists():
                return False, f"–ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞"

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
            logger.info(f"üîÑ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º {account_name} –æ—Ç –±–æ—Ç–∞...")

            shutil.move(str(source_session), str(dest_session))
            shutil.move(str(source_json), str(dest_json))

            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É")

            # –û–±–Ω–æ–≤–ª—è–µ–º AccountManager
            self._update_account_manager(account_name, 'release')

            return True, f"–ê–∫–∫–∞—É–Ω—Ç {account_name} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –±–æ—Ç–∞"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è {account_name}: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    def get_bot_holders(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        """
        holders = []

        try:
            for session_file in BOT_HOLDERS_FOLDER.glob("*.session"):
                json_file = session_file.with_suffix(".json")

                if json_file.exists():
                    import json
                    try:
                        with open(json_file, 'r', encoding='utf-8') as f:
                            data = json.load(f)

                        holders.append({
                            'name': session_file.stem,
                            'phone': data.get('phone', ''),
                            'full_name': f"{data.get('first_name', '')} {data.get('last_name', '')}".strip(),
                            'session_path': str(session_file),
                            'json_path': str(json_file)
                        })
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {json_file}: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤: {e}")

        return holders

    def is_bot_holder(self, account_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª—å –±–æ—Ç–∞
        """
        session_file = BOT_HOLDERS_FOLDER / f"{account_name}.session"
        return session_file.exists()

    def get_bot_holder_info(self, account_name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ –±–æ—Ç–∞

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            Dict –∏–ª–∏ None
        """
        session_file = BOT_HOLDERS_FOLDER / f"{account_name}.session"
        json_file = BOT_HOLDERS_FOLDER / f"{account_name}.json"

        if not session_file.exists() or not json_file.exists():
            return None

        try:
            import json
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            return {
                'name': account_name,
                'phone': data.get('phone', ''),
                'full_name': f"{data.get('first_name', '')} {data.get('last_name', '')}".strip(),
                'session_path': str(session_file),
                'json_path': str(json_file),
                'app_id': data.get('app_id'),
                'app_hash': data.get('app_hash')
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {account_name}: {e}")
            return None

    def _update_account_manager(self, account_name: str, action: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç AccountManager –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            from src.accounts.manager import _account_manager

            if _account_manager:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(_account_manager.refresh_category("traffic"))
                loop.close()

                logger.info(f"üìä AccountManager –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {action} –¥–ª—è {account_name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AccountManager: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_bot_account_manager: Optional[BotAccountManager] = None


def get_bot_account_manager() -> BotAccountManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–æ–≤"""
    global _bot_account_manager
    if _bot_account_manager is None:
        _bot_account_manager = BotAccountManager()
    return _bot_account_manager


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def assign_bot_account(account_name: str) -> Tuple[bool, str]:
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞"""
    manager = get_bot_account_manager()
    return manager.assign_bot_account(account_name)


def release_bot_account(account_name: str) -> Tuple[bool, str]:
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –±–æ—Ç–∞"""
    manager = get_bot_account_manager()
    return manager.release_bot_account(account_name)


def get_bot_holders() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤"""
    manager = get_bot_account_manager()
    return manager.get_bot_holders()


def is_bot_holder(account_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞"""
    manager = get_bot_account_manager()
    return manager.is_bot_holder(account_name)