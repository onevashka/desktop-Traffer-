# src/modules/impl/inviter/profile_manager.py - –í–ï–†–°–ò–Ø –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª—ã —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Optional, Set, Tuple
from loguru import logger
from datetime import datetime

from paths import WORK_INVITER_FOLDER


class InviterProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""

    def __init__(self):
        self.base_folder = WORK_INVITER_FOLDER

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É
        logger.info(f"üìÅ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {self.base_folder}")
        logger.info(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {self.base_folder.resolve()}")

        self.base_folder.mkdir(parents=True, exist_ok=True)
        self.profiles: Dict[str, Dict] = {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å
        if self.base_folder.exists():
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –∏–Ω–≤–∞–π—Ç–µ—Ä–∞!")

        logger.debug("üì® InviterProfileManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def update_users_database(self, profile_name: str, users_list: List[str]) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º update_users_database")
            logger.info(f"   üìù –ü—Ä–æ—Ñ–∏–ª—å: '{profile_name}'")
            logger.info(f"   üì• –í—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(users_list)}")

            if profile_name not in self.profiles:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏: {profile_name}")
                logger.error(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {list(self.profiles.keys())}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder_str = profile_data['folder_path']
            profile_folder = Path(profile_folder_str)

            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder}")
            logger.info(f"   üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {profile_folder.resolve()}")
            logger.info(f"   ‚úÖ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {profile_folder.exists()}")

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if users_list:
                sample_users = users_list[:5]  # –ü–µ—Ä–≤—ã–µ 5
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û–±—Ä–∞–∑–µ—Ü –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sample_users}")

            # –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–ß–ò–°–¢–ö–ê
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...")
            validated_users, stats = self._validate_and_clean_users(users_list)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            logger.info(f"   üì• –í—Ö–æ–¥—è—â–∏—Ö: {stats['input_count']}")
            logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {stats['valid_count']}")
            logger.info(f"   üîÑ –î—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: {stats['duplicates_removed']}")
            logger.info(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {stats['invalid_count']}")

            if validated_users:
                sample_validated = validated_users[:3]
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û–±—Ä–∞–∑–µ—Ü –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {sample_validated}")

            # –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨ - –°–û–•–†–ê–ù–ï–ù–ò–ï
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª...")
            success = self._save_users_database_with_debug(profile_folder, validated_users)

            if not success:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª")
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['users_list'] = validated_users
            logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏")

            logger.info(f"üéâ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(validated_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return True

        except Exception as e:
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ update_users_database: {e}")
            import traceback
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return False

    def update_chats_database(self, profile_name: str, chats_list: List[str]) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º update_chats_database")
            logger.info(f"   üí¨ –ü—Ä–æ—Ñ–∏–ª—å: '{profile_name}'")
            logger.info(f"   üì• –í—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(chats_list)}")

            if profile_name not in self.profiles:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏: {profile_name}")
                logger.error(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {list(self.profiles.keys())}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder_str = profile_data['folder_path']
            profile_folder = Path(profile_folder_str)

            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder}")
            logger.info(f"   üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {profile_folder.resolve()}")
            logger.info(f"   ‚úÖ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {profile_folder.exists()}")

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if chats_list:
                sample_chats = chats_list[:5]  # –ü–µ—Ä–≤—ã–µ 5
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û–±—Ä–∞–∑–µ—Ü –≤—Ö–æ–¥—è—â–∏—Ö —á–∞—Ç–æ–≤: {sample_chats}")

            # –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–ß–ò–°–¢–ö–ê
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–∞—Ç–æ–≤...")
            validated_chats, stats = self._validate_and_clean_chats(chats_list)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞—Ç–æ–≤:")
            logger.info(f"   üì• –í—Ö–æ–¥—è—â–∏—Ö: {stats['input_count']}")
            logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {stats['valid_count']}")
            logger.info(f"   üîÑ –î—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: {stats['duplicates_removed']}")
            logger.info(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {stats['invalid_count']}")

            if validated_chats:
                sample_validated = validated_chats[:3]
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û–±—Ä–∞–∑–µ—Ü –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {sample_validated}")

            # –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨ - –°–û–•–†–ê–ù–ï–ù–ò–ï
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª...")
            success = self._save_chats_database_with_debug(profile_folder, validated_chats)

            if not success:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª")
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['chats_list'] = validated_chats
            logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –î–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏")

            logger.info(f"üéâ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(validated_chats)} —á–∞—Ç–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ update_chats_database: {e}")
            import traceback
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return False

    def _save_users_database_with_debug(self, profile_folder: Path, users_list: List[str]) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            logger.info(f"   üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder}")
            logger.info(f"   üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞: {profile_folder.exists()}")
            logger.info(f"   üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {users_file}")
            logger.info(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏: {len(users_list)}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not profile_folder.exists():
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è...")
                profile_folder.mkdir(parents=True, exist_ok=True)

                if profile_folder.exists():
                    logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É!")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
            try:
                test_file = profile_folder / "test_write.tmp"
                test_file.write_text("test", encoding='utf-8')
                test_file.unlink()  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –µ—Å—Ç—å")
            except Exception as e:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É: {e}")
                return False

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if users_list:
                content = '\n'.join(users_list)
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: '{content[:100]}'")
            else:
                content = ""
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")

            # –ö–õ–Æ–ß–ï–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø - –ó–ê–ü–ò–°–¨
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª...")
            users_file.write_text(content, encoding='utf-8')
            logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫")

            # –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏...")

            if not users_file.exists():
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: {users_file}")
                return False

            file_size = users_file.stat().st_size
            logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")

            # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                saved_content = users_file.read_text(encoding='utf-8')
                saved_lines = [line.strip() for line in saved_content.split('\n') if line.strip()]

                logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è:")
                logger.info(f"   üìä –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(saved_lines)}")
                logger.info(f"   üìä –û–∂–∏–¥–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(users_list)}")

                if saved_lines:
                    logger.info(f"   üìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏: {saved_lines[:3]}")

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if len(saved_lines) == len(users_list):
                    logger.info(f"üéâ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                    return True
                else:
                    logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                    logger.error(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(saved_lines)}")
                    logger.error(f"   üìù –û–∂–∏–¥–∞–ª–æ—Å—å: {len(users_list)}")
                    return False

            except Exception as e:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                return False

        except Exception as e:
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            import traceback
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return False

    def _save_chats_database_with_debug(self, profile_folder: Path, chats_list: List[str]) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤:")
            logger.info(f"   üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder}")
            logger.info(f"   üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞: {profile_folder.exists()}")
            logger.info(f"   üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {chats_file}")
            logger.info(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏: {len(chats_list)}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not profile_folder.exists():
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è...")
                profile_folder.mkdir(parents=True, exist_ok=True)

                if profile_folder.exists():
                    logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É!")
                    return False

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if chats_list:
                content = '\n'.join(chats_list)
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: '{content[:100]}'")
            else:
                content = ""
                logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")

            # –ö–õ–Æ–ß–ï–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø - –ó–ê–ü–ò–°–¨
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —á–∞—Ç–æ–≤...")
            chats_file.write_text(content, encoding='utf-8')
            logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø–∏—Å—å —á–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫")

            # –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏ —á–∞—Ç–æ–≤...")

            if not chats_file.exists():
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –§–∞–π–ª —á–∞—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: {chats_file}")
                return False

            file_size = chats_file.stat().st_size
            logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –§–∞–π–ª —á–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")

            # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                saved_content = chats_file.read_text(encoding='utf-8')
                saved_lines = [line.strip() for line in saved_content.split('\n') if line.strip()]

                logger.info(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è —á–∞—Ç–æ–≤:")
                logger.info(f"   üìä –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(saved_lines)}")
                logger.info(f"   üìä –û–∂–∏–¥–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(chats_list)}")

                if saved_lines:
                    logger.info(f"   üí¨ –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏: {saved_lines[:3]}")

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if len(saved_lines) == len(chats_list):
                    logger.info(f"üéâ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —á–∞—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                    return True
                else:
                    logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —á–∞—Ç–æ–≤ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                    logger.error(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(saved_lines)}")
                    logger.error(f"   üí¨ –û–∂–∏–¥–∞–ª–æ—Å—å: {len(chats_list)}")
                    return False

            except Exception as e:
                logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ —á–∞—Ç–æ–≤: {e}")
                return False

        except Exception as e:
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            import traceback
            logger.error(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return False

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –ø—Ä–∏–≤–µ–¥—É —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ)

    def create_profile(self, profile_name: str, initial_settings: Dict = None) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not profile_name or not profile_name.strip():
                return {'success': False, 'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_name = self._sanitize_folder_name(profile_name.strip())
            if not clean_name:
                return {'success': False, 'message': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            profile_folder = self.base_folder / clean_name
            if profile_folder.exists():
                return {'success': False, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{clean_name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}

            logger.info(f"üì® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {clean_name}")

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            self._create_profile_structure(profile_folder)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self._create_default_config(clean_name, initial_settings)
            self._save_config(profile_folder, config)

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self._create_empty_databases(profile_folder)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            profile_data = {
                'name': clean_name,
                'folder_path': str(profile_folder),
                'config': config,
                'users_list': [],
                'chats_list': [],
                'is_running': False,
                'created_at': datetime.now().isoformat()
            }

            self.profiles[clean_name] = profile_data

            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {clean_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            return {
                'success': True,
                'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{clean_name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'profile_name': clean_name,
                'profile_path': str(profile_folder),
                'profile_data': profile_data
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'}

    def load_all_profiles(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        try:
            self.profiles.clear()

            if not self.base_folder.exists():
                logger.info("üì® –ü–∞–ø–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
                self.base_folder.mkdir(parents=True, exist_ok=True)
                return {}

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
            for profile_folder in self.base_folder.iterdir():
                if profile_folder.is_dir() and self._is_valid_profile(profile_folder):
                    profile_data = self._load_profile(profile_folder)
                    if profile_data:
                        self.profiles[profile_data['name']] = profile_data
                        logger.debug(f"üì® –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {profile_data['name']}")

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.profiles)}")
            return self.profiles

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return {}

    def get_profile(self, profile_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        return self.profiles.get(profile_name)

    def get_all_profiles(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è GUI"""
        return list(self.profiles.values())

    def delete_profile(self, profile_name: str) -> Dict[str, any]:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            if profile_name not in self.profiles:
                return {'success': False, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{profile_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            import shutil
            if profile_folder.exists():
                shutil.rmtree(profile_folder)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            del self.profiles[profile_name]

            logger.info(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: {profile_name}")
            return {'success': True, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{profile_name}" —É–¥–∞–ª–µ–Ω'}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}

    # –ú–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def _validate_and_clean_users(self, users_list: List[str]) -> Tuple[List[str], Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –¥—É–±–ª–µ–π –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        input_count = len(users_list)
        validated_users = []
        seen_users: Set[str] = set()
        invalid_count = 0
        duplicates_removed = 0

        for user in users_list:
            if not user or not isinstance(user, str):
                invalid_count += 1
                continue

            # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            user = user.strip()
            if not user:
                invalid_count += 1
                continue

            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            normalized_user = self._normalize_username(user)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º username
            if not self._is_valid_username(normalized_user):
                invalid_count += 1
                logger.debug(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π username: '{user}' -> '{normalized_user}'")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏)
            if normalized_user.lower() in seen_users:
                duplicates_removed += 1
                logger.debug(f"üîÑ –î—É–±–ª—å —É–¥–∞–ª–µ–Ω: '{normalized_user}'")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –° @ –≤ –Ω–∞—á–∞–ª–µ
            final_username = f"@{normalized_user}"
            validated_users.append(final_username)
            seen_users.add(normalized_user.lower())

        stats = {
            'input_count': input_count,
            'valid_count': len(validated_users),
            'duplicates_removed': duplicates_removed,
            'invalid_count': invalid_count
        }

        return validated_users, stats

    def _validate_and_clean_chats(self, chats_list: List[str]) -> Tuple[List[str], Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—Ç –¥—É–±–ª–µ–π –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        input_count = len(chats_list)
        validated_chats = []
        seen_chats: Set[str] = set()
        invalid_count = 0
        duplicates_removed = 0

        for chat in chats_list:
            if not chat or not isinstance(chat, str):
                invalid_count += 1
                continue

            # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            chat = chat.strip()
            if not chat:
                invalid_count += 1
                continue

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É
            normalized_chat = self._normalize_chat_link(chat)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            if not self._is_valid_chat_link(normalized_chat):
                invalid_count += 1
                logger.debug(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ —á–∞—Ç–∞: '{chat}' -> '{normalized_chat}'")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å
            chat_key = self._get_chat_key(normalized_chat)
            if chat_key in seen_chats:
                duplicates_removed += 1
                logger.debug(f"üîÑ –î—É–±–ª—å —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω: '{normalized_chat}' (–∫–ª—é—á: {chat_key})")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            validated_chats.append(normalized_chat)
            seen_chats.add(chat_key)

        stats = {
            'input_count': input_count,
            'valid_count': len(validated_chats),
            'duplicates_removed': duplicates_removed,
            'invalid_count': invalid_count
        }

        return validated_chats, stats

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
    def _normalize_username(self, username: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç username (—É–±–∏—Ä–∞–µ—Ç @, –æ—á–∏—â–∞–µ—Ç)"""
        if username.startswith('@'):
            username = username[1:]
        return username.strip()

    def _is_valid_username(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Telegram"""
        return True

    def _normalize_chat_link(self, chat_link: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç"""
        chat_link = chat_link.strip()
        if not chat_link.startswith(('@', 'http', 't.me')):
            if self._looks_like_username(chat_link):
                return f"@{chat_link}"
        if chat_link.startswith('t.me/') and not chat_link.startswith('https://'):
            chat_link = f"https://{chat_link}"
        return chat_link

    def _is_valid_chat_link(self, chat_link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç"""
        if not chat_link:
            return False
        if chat_link.startswith('@'):
            username = chat_link[1:]
            return self._is_valid_username(username)
        if chat_link.startswith('https://t.me/'):
            path = chat_link[15:]
            return self._is_valid_chat_path(path)
        if chat_link.startswith('t.me/'):
            path = chat_link[5:]
            return self._is_valid_chat_path(path)
        if 'joinchat/' in chat_link or '+' in chat_link:
            return len(chat_link) > 20
        return False

    def _is_valid_chat_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—É—Ç–∏ —á–∞—Ç–∞"""
        if not path:
            return False
        if '?' in path:
            path = path.split('?')[0]
        if path.startswith('joinchat/') or path.startswith('+'):
            return len(path) > 10
        return self._is_valid_username(path)

    def _looks_like_username(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ username"""
        return True

    def _get_chat_key(self, chat_link: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π —á–∞—Ç–æ–≤"""
        if chat_link.startswith('@'):
            return chat_link.lower()
        if 't.me/' in chat_link:
            path = chat_link.split('t.me/')[-1]
            if '?' in path:
                path = path.split('?')[0]
            return path.lower()
        return chat_link.lower()

    # –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ)
    def _create_profile_structure(self, profile_folder: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        profile_folder.mkdir(parents=True, exist_ok=True)
        reports_folder = profile_folder / "–û—Ç—á–µ—Ç—ã"
        reports_folder.mkdir(exist_ok=True)
        logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder.name}")

    def _create_default_config(self, profile_name: str, initial_settings: Dict = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            "profile_name": profile_name,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "version": "1.0",
            "invite_type": "classic",
            "threads_per_chat": 2,
            "success_per_chat": 0,
            "success_per_account": 0,
            "delay_after_start": 0,
            "delay_between": 0,
            "acc_spam_limit": 3,
            "acc_writeoff_limit": 2,
            "acc_block_invite_limit": 5,
            "chat_spam_accounts": 3,
            "chat_writeoff_accounts": 2,
            "chat_unknown_error_accounts": 1,
            "chat_freeze_accounts": 1
        }
        if initial_settings:
            default_config.update(initial_settings)
        return default_config

    def _save_config(self, profile_folder: Path, config: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = profile_folder / "config.json"
        config["updated_at"] = datetime.now().isoformat()
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

    def _load_config(self, profile_folder: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = profile_folder / "config.json"
        if not config_file.exists():
            return None
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}: {e}")
            return None

    def _create_empty_databases(self, profile_folder: Path):
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
        users_file.write_text("", encoding='utf-8')
        chats_file.write_text("", encoding='utf-8')

    def _load_profile(self, profile_folder: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ø–∞–ø–∫–∏"""
        try:
            profile_name = profile_folder.name
            config = self._load_config(profile_folder)
            if not config:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {profile_name}")
                return None
            users_list = self._load_users_database(profile_folder)
            chats_list = self._load_chats_database(profile_folder)
            return {
                'name': profile_name,
                'folder_path': str(profile_folder),
                'config': config,
                'users_list': users_list,
                'chats_list': chats_list,
                'is_running': False
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_folder.name}: {e}")
            return None

    def _load_users_database(self, profile_folder: Path) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
        if not users_file.exists():
            return []
        try:
            content = users_file.read_text(encoding='utf-8')
            users = [line.strip() for line in content.split('\n') if line.strip()]
            cleaned_users = []
            for user in users:
                if user and not user.startswith('@'):
                    user = f"@{user}"
                if user:
                    cleaned_users.append(user)
            return cleaned_users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _load_chats_database(self, profile_folder: Path) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤"""
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
        if not chats_file.exists():
            return []
        try:
            content = chats_file.read_text(encoding='utf-8')
            chats = [line.strip() for line in content.split('\n') if line.strip()]
            return chats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —á–∞—Ç–æ–≤: {e}")
            return []

    def _is_valid_profile(self, profile_folder: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        required_files = ["config.json", "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt", "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"]
        for file_name in required_files:
            if not (profile_folder / file_name).exists():
                return False
        return True

    def _sanitize_folder_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        clean_name = re.sub(r'[<>:"/\\|?*]', '', name)
        clean_name = clean_name.strip('. ')
        if len(clean_name) > 100:
            clean_name = clean_name[:100]
        return clean_name

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def update_profile_config(self, profile_name: str, config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            current_config = profile_data.get('config', {})

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            updated_config = current_config.copy()
            updated_config.update(config)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_config(profile_folder, updated_config)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['config'] = updated_config

            logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {profile_name}: {e}")
            return False

    def set_profile_running(self, profile_name: str, is_running: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_name in self.profiles:
            self.profiles[profile_name]['is_running'] = is_running
            status = "–∑–∞–ø—É—â–µ–Ω" if is_running else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.debug(f"üì® –ü—Ä–æ—Ñ–∏–ª—å {profile_name} {status}")

    def get_profile_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º"""
        total = len(self.profiles)
        active = sum(1 for p in self.profiles.values() if p.get('is_running', False))
        total_users = sum(len(p.get('users_list', [])) for p in self.profiles.values())
        total_chats = sum(len(p.get('chats_list', [])) for p in self.profiles.values())
        return {
            'total_profiles': total,
            'active_profiles': active,
            'inactive_profiles': total - active,
            'total_users': total_users,
            'total_chats': total_chats
        }