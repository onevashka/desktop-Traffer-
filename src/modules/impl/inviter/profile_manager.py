# src/modules/impl/inviter/profile_manager.py
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

import json
from pathlib import Path
from typing import Dict, List, Optional
from loguru import logger
from datetime import datetime

from paths import WORK_INVITER_FOLDER


class InviterProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""

    def __init__(self):
        self.base_folder = WORK_INVITER_FOLDER
        self.base_folder.mkdir(parents=True, exist_ok=True)
        self.profiles: Dict[str, Dict] = {}
        logger.debug("üì® InviterProfileManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_profile(self, profile_name: str, initial_settings: Dict = None) -> Dict[str, any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

        Args:
            profile_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            initial_settings: –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not profile_name or not profile_name.strip():
                return {'success': False, 'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_name = self._sanitize_folder_name(profile_name.strip())
            if not clean_name:
                return {'success': False, 'message': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            profile_folder = self.base_folder / clean_name
            if profile_folder.exists():
                return {'success': False, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{clean_name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}

            logger.info(f"üì® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {clean_name}")

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            self._create_profile_structure(profile_folder)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self._create_default_config(clean_name, initial_settings)
            self._save_config(profile_folder, config)

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self._create_empty_databases(profile_folder)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            profile_data = {
                'name': clean_name,
                'folder_path': str(profile_folder),
                'config': config,
                'users_list': [],
                'chats_list': [],
                'is_running': False,
                'created_at': datetime.now().isoformat()
            }

            self.profiles[clean_name] = profile_data

            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {clean_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            return {
                'success': True,
                'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{clean_name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'profile_name': clean_name,
                'profile_path': str(profile_folder),
                'profile_data': profile_data
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'}

    def load_all_profiles(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        try:
            self.profiles.clear()

            if not self.base_folder.exists():
                logger.info("üì® –ü–∞–ø–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
                self.base_folder.mkdir(parents=True, exist_ok=True)
                return {}

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
            for profile_folder in self.base_folder.iterdir():
                if profile_folder.is_dir() and self._is_valid_profile(profile_folder):
                    profile_data = self._load_profile(profile_folder)
                    if profile_data:
                        self.profiles[profile_data['name']] = profile_data
                        logger.debug(f"üì® –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {profile_data['name']}")

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.profiles)}")
            return self.profiles

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return {}

    def get_profile(self, profile_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        return self.profiles.get(profile_name)

    def get_all_profiles(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è GUI"""
        return list(self.profiles.values())

    def delete_profile(self, profile_name: str) -> Dict[str, any]:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            if profile_name not in self.profiles:
                return {'success': False, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{profile_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            import shutil
            if profile_folder.exists():
                shutil.rmtree(profile_folder)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            del self.profiles[profile_name]

            logger.info(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: {profile_name}")
            return {'success': True, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{profile_name}" —É–¥–∞–ª–µ–Ω'}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}

    def update_users_database(self, profile_name: str, users_list: List[str]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_users_database(profile_folder, users_list)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['users_list'] = users_list

            logger.info(f"üìù –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}: {len(users_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {profile_name}: {e}")
            return False

    def update_chats_database(self, profile_name: str, chats_list: List[str]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_chats_database(profile_folder, chats_list)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['chats_list'] = chats_list

            logger.info(f"üí¨ –ë–∞–∑–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}: {len(chats_list)} —á–∞—Ç–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã —á–∞—Ç–æ–≤ {profile_name}: {e}")
            return False

    def update_profile_config(self, profile_name: str, config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_config(profile_folder, config)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['config'] = config

            logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {profile_name}: {e}")
            return False

    def set_profile_running(self, profile_name: str, is_running: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_name in self.profiles:
            self.profiles[profile_name]['is_running'] = is_running
            status = "–∑–∞–ø—É—â–µ–Ω" if is_running else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.debug(f"üì® –ü—Ä–æ—Ñ–∏–ª—å {profile_name} {status}")

    def get_profile_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º"""
        total = len(self.profiles)
        active = sum(1 for p in self.profiles.values() if p.get('is_running', False))

        total_users = sum(len(p.get('users_list', [])) for p in self.profiles.values())
        total_chats = sum(len(p.get('chats_list', [])) for p in self.profiles.values())

        return {
            'total_profiles': total,
            'active_profiles': active,
            'inactive_profiles': total - active,
            'total_users': total_users,
            'total_chats': total_chats
        }

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîß –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _create_profile_structure(self, profile_folder: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_folder.mkdir(parents=True, exist_ok=True)

        # –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        reports_folder = profile_folder / "–û—Ç—á–µ—Ç—ã"
        reports_folder.mkdir(exist_ok=True)

        logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder.name}")

    def _create_default_config(self, profile_name: str, initial_settings: Dict = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "profile_name": profile_name,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "version": "1.0",

            # –¢–∏–ø –∏–Ω–≤–∞–π—Ç–∞
            "invite_type": "classic",  # classic –∏–ª–∏ admin

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã
            "threads_per_chat": 2,
            "success_per_chat": 0,  # 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            "success_per_account": 0,
            "delay_after_start": 0,
            "delay_between": 0,

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
            "acc_spam_limit": 3,
            "acc_writeoff_limit": 2,
            "acc_block_invite_limit": 5,

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            "chat_spam_accounts": 3,
            "chat_writeoff_accounts": 2,
            "chat_unknown_error_accounts": 1,
            "chat_freeze_accounts": 1
        }

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if initial_settings:
            default_config.update(initial_settings)

        return default_config

    def _save_config(self, profile_folder: Path, config: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = profile_folder / "config.json"
        config["updated_at"] = datetime.now().isoformat()

        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

    def _load_config(self, profile_folder: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = profile_folder / "config.json"

        if not config_file.exists():
            return None

        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}: {e}")
            return None

    def _create_empty_databases(self, profile_folder: Path):
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        users_file.write_text("", encoding='utf-8')
        chats_file.write_text("", encoding='utf-8')

    def _save_users_database(self, profile_folder: Path, users_list: List[str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

        # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        clean_users = []
        for user in users_list:
            user = user.strip()
            if user:
                if user.startswith('@'):
                    user = user[1:]
                if user:
                    clean_users.append(user)

        users_file.write_text('\n'.join(clean_users), encoding='utf-8')

    def _load_users_database(self, profile_folder: Path) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

        if not users_file.exists():
            return []

        try:
            content = users_file.read_text(encoding='utf-8')
            return [line.strip() for line in content.split('\n') if line.strip()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _save_chats_database(self, profile_folder: Path, chats_list: List[str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤"""
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        clean_chats = [chat.strip() for chat in chats_list if chat.strip()]
        chats_file.write_text('\n'.join(clean_chats), encoding='utf-8')

    def _load_chats_database(self, profile_folder: Path) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤"""
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        if not chats_file.exists():
            return []

        try:
            content = chats_file.read_text(encoding='utf-8')
            return [line.strip() for line in content.split('\n') if line.strip()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —á–∞—Ç–æ–≤: {e}")
            return []

    def _load_profile(self, profile_folder: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ø–∞–ø–∫–∏"""
        try:
            profile_name = profile_folder.name

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self._load_config(profile_folder)
            if not config:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {profile_name}")
                return None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            users_list = self._load_users_database(profile_folder)
            chats_list = self._load_chats_database(profile_folder)

            return {
                'name': profile_name,
                'folder_path': str(profile_folder),
                'config': config,
                'users_list': users_list,
                'chats_list': chats_list,
                'is_running': False
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_folder.name}: {e}")
            return None

    def _is_valid_profile(self, profile_folder: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        required_files = ["config.json", "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt", "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"]

        for file_name in required_files:
            if not (profile_folder / file_name).exists():
                return False

        return True

    def _sanitize_folder_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        import re

        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_name = re.sub(r'[<>:"/\\|?*]', '', name)
        clean_name = clean_name.strip('. ')

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(clean_name) > 100:
            clean_name = clean_name[:100]

        return clean_name