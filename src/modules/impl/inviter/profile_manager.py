# src/modules/impl/inviter/profile_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–û –°–û–•–†–ê–ù–ï–ù–ò–ï –í –§–ê–ô–õ–´
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Optional, Set, Tuple
from loguru import logger
from datetime import datetime

from paths import WORK_INVITER_FOLDER


class InviterProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""

    def __init__(self):
        self.base_folder = WORK_INVITER_FOLDER
        self.base_folder.mkdir(parents=True, exist_ok=True)
        self.profiles: Dict[str, Dict] = {}
        logger.debug("üì® InviterProfileManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_profile(self, profile_name: str, initial_settings: Dict = None) -> Dict[str, any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

        Args:
            profile_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            initial_settings: –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not profile_name or not profile_name.strip():
                return {'success': False, 'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_name = self._sanitize_folder_name(profile_name.strip())
            if not clean_name:
                return {'success': False, 'message': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            profile_folder = self.base_folder / clean_name
            if profile_folder.exists():
                return {'success': False, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{clean_name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}

            logger.info(f"üì® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {clean_name}")

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            self._create_profile_structure(profile_folder)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self._create_default_config(clean_name, initial_settings)
            self._save_config(profile_folder, config)

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self._create_empty_databases(profile_folder)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            profile_data = {
                'name': clean_name,
                'folder_path': str(profile_folder),
                'config': config,
                'users_list': [],
                'chats_list': [],
                'is_running': False,
                'created_at': datetime.now().isoformat()
            }

            self.profiles[clean_name] = profile_data

            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {clean_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            return {
                'success': True,
                'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{clean_name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'profile_name': clean_name,
                'profile_path': str(profile_folder),
                'profile_data': profile_data
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'}

    def load_all_profiles(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        try:
            self.profiles.clear()

            if not self.base_folder.exists():
                logger.info("üì® –ü–∞–ø–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
                self.base_folder.mkdir(parents=True, exist_ok=True)
                return {}

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
            for profile_folder in self.base_folder.iterdir():
                if profile_folder.is_dir() and self._is_valid_profile(profile_folder):
                    profile_data = self._load_profile(profile_folder)
                    if profile_data:
                        self.profiles[profile_data['name']] = profile_data
                        logger.debug(f"üì® –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {profile_data['name']}")

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.profiles)}")
            return self.profiles

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return {}

    def get_profile(self, profile_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        return self.profiles.get(profile_name)

    def get_all_profiles(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è GUI"""
        return list(self.profiles.values())

    def delete_profile(self, profile_name: str) -> Dict[str, any]:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            if profile_name not in self.profiles:
                return {'success': False, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{profile_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            import shutil
            if profile_folder.exists():
                shutil.rmtree(profile_folder)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            del self.profiles[profile_name]

            logger.info(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: {profile_name}")
            return {'success': True, 'message': f'–ü—Ä–æ—Ñ–∏–ª—å "{profile_name}" —É–¥–∞–ª–µ–Ω'}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}

    def update_users_database(self, profile_name: str, users_list: List[str]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {profile_name}")
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(users_list)}")

            # –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–ß–ò–°–¢–ö–ê
            validated_users, stats = self._validate_and_clean_users(users_list)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            logger.info(f"üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {profile_name}:")
            logger.info(f"   –í—Ö–æ–¥—è—â–∏—Ö: {stats['input_count']}")
            logger.info(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {stats['valid_count']}")
            logger.info(f"   –î—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: {stats['duplicates_removed']}")
            logger.info(f"   –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {stats['invalid_count']}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            success = self._save_users_database(profile_folder, validated_users)
            if not success:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª")
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['users_list'] = validated_users

            logger.info(f"‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}: {len(validated_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {profile_name}: {e}")
            return False

    def update_chats_database(self, profile_name: str, chats_list: List[str]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            logger.info(f"üí¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —á–∞—Ç–æ–≤ –¥–ª—è {profile_name}")
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(chats_list)}")

            # –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–ß–ò–°–¢–ö–ê
            validated_chats, stats = self._validate_and_clean_chats(chats_list)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            logger.info(f"üí¨ –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Ç–æ–≤ –¥–ª—è {profile_name}:")
            logger.info(f"   –í—Ö–æ–¥—è—â–∏—Ö: {stats['input_count']}")
            logger.info(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {stats['valid_count']}")
            logger.info(f"   –î—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: {stats['duplicates_removed']}")
            logger.info(f"   –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {stats['invalid_count']}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            success = self._save_chats_database(profile_folder, validated_chats)
            if not success:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª")
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['chats_list'] = validated_chats

            logger.info(f"‚úÖ –ë–∞–∑–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}: {len(validated_chats)} —á–∞—Ç–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã —á–∞—Ç–æ–≤ {profile_name}: {e}")
            return False

    def update_profile_config(self, profile_name: str, config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if profile_name not in self.profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_name}")
                return False

            profile_data = self.profiles[profile_name]
            profile_folder = Path(profile_data['folder_path'])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_config(profile_folder, config)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            profile_data['config'] = config

            logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {profile_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {profile_name}: {e}")
            return False

    def set_profile_running(self, profile_name: str, is_running: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_name in self.profiles:
            self.profiles[profile_name]['is_running'] = is_running
            status = "–∑–∞–ø—É—â–µ–Ω" if is_running else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.debug(f"üì® –ü—Ä–æ—Ñ–∏–ª—å {profile_name} {status}")

    def get_profile_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º"""
        total = len(self.profiles)
        active = sum(1 for p in self.profiles.values() if p.get('is_running', False))

        total_users = sum(len(p.get('users_list', [])) for p in self.profiles.values())
        total_chats = sum(len(p.get('chats_list', [])) for p in self.profiles.values())

        return {
            'total_profiles': total,
            'active_profiles': active,
            'inactive_profiles': total - active,
            'total_users': total_users,
            'total_chats': total_chats
        }

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üõ°Ô∏è –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _validate_and_clean_users(self, users_list: List[str]) -> Tuple[List[str], Dict]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –¥—É–±–ª–µ–π –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

        Args:
            users_list: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            Tuple[List[str], Dict]: (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Å–ø–∏—Å–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        input_count = len(users_list)
        validated_users = []
        seen_users: Set[str] = set()
        invalid_count = 0
        duplicates_removed = 0

        for user in users_list:
            if not user or not isinstance(user, str):
                invalid_count += 1
                continue

            # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            user = user.strip()
            if not user:
                invalid_count += 1
                continue

            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            normalized_user = self._normalize_username(user)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º username
            if not self._is_valid_username(normalized_user):
                invalid_count += 1
                logger.debug(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π username: '{user}' -> '{normalized_user}'")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏)
            if normalized_user.lower() in seen_users:
                duplicates_removed += 1
                logger.debug(f"üîÑ –î—É–±–ª—å —É–¥–∞–ª–µ–Ω: '{normalized_user}'")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –° @ –≤ –Ω–∞—á–∞–ª–µ
            final_username = f"@{normalized_user}"
            validated_users.append(final_username)
            seen_users.add(normalized_user.lower())

        stats = {
            'input_count': input_count,
            'valid_count': len(validated_users),
            'duplicates_removed': duplicates_removed,
            'invalid_count': invalid_count
        }

        return validated_users, stats

    def _validate_and_clean_chats(self, chats_list: List[str]) -> Tuple[List[str], Dict]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—Ç –¥—É–±–ª–µ–π –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

        Args:
            chats_list: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤

        Returns:
            Tuple[List[str], Dict]: (–æ—á–∏—â–µ–Ω–Ω—ã–π_—Å–ø–∏—Å–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        input_count = len(chats_list)
        validated_chats = []
        seen_chats: Set[str] = set()
        invalid_count = 0
        duplicates_removed = 0

        for chat in chats_list:
            if not chat or not isinstance(chat, str):
                invalid_count += 1
                continue

            # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            chat = chat.strip()
            if not chat:
                invalid_count += 1
                continue

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É
            normalized_chat = self._normalize_chat_link(chat)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            if not self._is_valid_chat_link(normalized_chat):
                invalid_count += 1
                logger.debug(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ —á–∞—Ç–∞: '{chat}' -> '{normalized_chat}'")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å
            chat_key = self._get_chat_key(normalized_chat)
            if chat_key in seen_chats:
                duplicates_removed += 1
                logger.debug(f"üîÑ –î—É–±–ª—å —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω: '{normalized_chat}' (–∫–ª—é—á: {chat_key})")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            validated_chats.append(normalized_chat)
            seen_chats.add(chat_key)

        stats = {
            'input_count': input_count,
            'valid_count': len(validated_chats),
            'duplicates_removed': duplicates_removed,
            'invalid_count': invalid_count
        }

        return validated_chats, stats

    def _normalize_username(self, username: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç username (—É–±–∏—Ä–∞–µ—Ç @, –æ—á–∏—â–∞–µ—Ç)"""
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if username.startswith('@'):
            username = username[1:]

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        username = username.strip()

        return username

    def _is_valid_username(self, username: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Telegram

        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó @

        Returns:
            bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if not username:
            return False

        # –î–ª–∏–Ω–∞ –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        if len(username) < 5 or len(username) > 32:
            return False

        # –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        if not re.match(r'^[a-zA-Z0-9_]+$', username):
            return False

        # –ù–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã
        if username[0].isdigit():
            return False

        # –ù–µ –º–æ–∂–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        if username.endswith('_'):
            return False

        # –ù–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥
        if '__' in username:
            return False

        return True

    def _normalize_chat_link(self, chat_link: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç"""
        chat_link = chat_link.strip()

        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ username, –¥–æ–±–∞–≤–ª—è–µ–º @
        if not chat_link.startswith(('@', 'http', 't.me')):
            if self._looks_like_username(chat_link):
                return f"@{chat_link}"

        # –ü—Ä–∏–≤–æ–¥–∏–º —Å—Å—ã–ª–∫–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
        if chat_link.startswith('t.me/') and not chat_link.startswith('https://'):
            chat_link = f"https://{chat_link}"

        return chat_link

    def _is_valid_chat_link(self, chat_link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç"""
        if not chat_link:
            return False

        # Username —Ñ–æ—Ä–º–∞—Ç @chatname
        if chat_link.startswith('@'):
            username = chat_link[1:]
            return self._is_valid_username(username)

        # –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ https://t.me/chatname
        if chat_link.startswith('https://t.me/'):
            path = chat_link[15:]  # —É–±–∏—Ä–∞–µ–º https://t.me/
            return self._is_valid_chat_path(path)

        # –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ t.me/chatname
        if chat_link.startswith('t.me/'):
            path = chat_link[5:]  # —É–±–∏—Ä–∞–µ–º t.me/
            return self._is_valid_chat_path(path)

        # Invite —Å—Å—ã–ª–∫–∏ https://t.me/joinchat/...
        if 'joinchat/' in chat_link or '+' in chat_link:
            return len(chat_link) > 20  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã

        return False

    def _is_valid_chat_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—É—Ç–∏ —á–∞—Ç–∞"""
        if not path:
            return False

        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if '?' in path:
            path = path.split('?')[0]

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if path.startswith('joinchat/') or path.startswith('+'):
            return len(path) > 10

        # –û–±—ã—á–Ω—ã–π username
        return self._is_valid_username(path)

    def _looks_like_username(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ username"""
        return (len(text) >= 5 and
                re.match(r'^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$', text))

    def _get_chat_key(self, chat_link: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π —á–∞—Ç–æ–≤"""
        # –î–ª—è @username
        if chat_link.startswith('@'):
            return chat_link.lower()

        # –î–ª—è —Å—Å—ã–ª–æ–∫ –∏–∑–≤–ª–µ–∫–∞–µ–º username/path
        if 't.me/' in chat_link:
            path = chat_link.split('t.me/')[-1]
            if '?' in path:
                path = path.split('?')[0]
            return path.lower()

        return chat_link.lower()

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üíæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _save_users_database(self, profile_folder: Path, users_list: List[str]) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–∂–µ —Å @ –≤ –Ω–∞—á–∞–ª–µ)"""
        try:
            users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {users_file}")
            logger.info(f"üíæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(users_list)}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            profile_folder.mkdir(parents=True, exist_ok=True)

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç @, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            content = '\n'.join(users_list)
            users_file.write_text(content, encoding='utf-8')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è –∏ –∑–∞–ø–∏—Å–∞–ª—Å—è
            if users_file.exists():
                saved_content = users_file.read_text(encoding='utf-8')
                saved_lines = [line.strip() for line in saved_content.split('\n') if line.strip()]
                logger.info(f"‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(saved_lines)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if saved_lines:
                    sample = saved_lines[:3]
                    logger.info(f"üìù –û–±—Ä–∞–∑–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sample}")

                return True
            else:
                logger.error(f"‚ùå –§–∞–π–ª {users_file} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    def _load_users_database(self, profile_folder: Path) -> List[str]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"

        if not users_file.exists():
            logger.debug(f"üìù –§–∞–π–ª {users_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []

        try:
            content = users_file.read_text(encoding='utf-8')
            users = [line.strip() for line in content.split('\n') if line.strip()]

            logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {len(users)}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            cleaned_users = []
            for user in users:
                if user and not user.startswith('@'):
                    user = f"@{user}"
                if user:
                    cleaned_users.append(user)

            if len(cleaned_users) != len(users):
                logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω—ã @ –∫ {len(users) - len(cleaned_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

            return cleaned_users

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _save_chats_database(self, profile_folder: Path, chats_list: List[str]) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤"""
        try:
            chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É —á–∞—Ç–æ–≤ –≤ {chats_file}")
            logger.info(f"üíæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(chats_list)}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            profile_folder.mkdir(parents=True, exist_ok=True)

            # –ß–∞—Ç—ã —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
            content = '\n'.join(chats_list)
            chats_file.write_text(content, encoding='utf-8')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è –∏ –∑–∞–ø–∏—Å–∞–ª—Å—è
            if chats_file.exists():
                saved_content = chats_file.read_text(encoding='utf-8')
                saved_lines = [line.strip() for line in saved_content.split('\n') if line.strip()]
                logger.info(f"‚úÖ –ë–∞–∑–∞ —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(saved_lines)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if saved_lines:
                    sample = saved_lines[:3]
                    logger.info(f"üí¨ –û–±—Ä–∞–∑–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {sample}")

                return True
            else:
                logger.error(f"‚ùå –§–∞–π–ª {chats_file} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã —á–∞—Ç–æ–≤: {e}")
            return False

    def _load_chats_database(self, profile_folder: Path) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É —á–∞—Ç–æ–≤"""
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        if not chats_file.exists():
            logger.debug(f"üí¨ –§–∞–π–ª {chats_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []

        try:
            content = chats_file.read_text(encoding='utf-8')
            chats = [line.strip() for line in content.split('\n') if line.strip()]
            logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {len(chats)}")
            return chats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —á–∞—Ç–æ–≤: {e}")
            return []

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîß –û–°–¢–ê–õ–¨–ù–´–ï –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _create_profile_structure(self, profile_folder: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_folder.mkdir(parents=True, exist_ok=True)

        # –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        reports_folder = profile_folder / "–û—Ç—á–µ—Ç—ã"
        reports_folder.mkdir(exist_ok=True)

        logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder.name}")

    def _create_default_config(self, profile_name: str, initial_settings: Dict = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "profile_name": profile_name,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "version": "1.0",

            # –¢–∏–ø –∏–Ω–≤–∞–π—Ç–∞
            "invite_type": "classic",  # classic –∏–ª–∏ admin

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã
            "threads_per_chat": 2,
            "success_per_chat": 0,  # 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            "success_per_account": 0,
            "delay_after_start": 0,
            "delay_between": 0,

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
            "acc_spam_limit": 3,
            "acc_writeoff_limit": 2,
            "acc_block_invite_limit": 5,

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            "chat_spam_accounts": 3,
            "chat_writeoff_accounts": 2,
            "chat_unknown_error_accounts": 1,
            "chat_freeze_accounts": 1
        }

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if initial_settings:
            default_config.update(initial_settings)

        return default_config

    def _save_config(self, profile_folder: Path, config: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = profile_folder / "config.json"
        config["updated_at"] = datetime.now().isoformat()

        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

    def _load_config(self, profile_folder: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = profile_folder / "config.json"

        if not config_file.exists():
            return None

        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}: {e}")
            return None

    def _create_empty_databases(self, profile_folder: Path):
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"

        users_file.write_text("", encoding='utf-8')
        chats_file.write_text("", encoding='utf-8')

    def _load_profile(self, profile_folder: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ø–∞–ø–∫–∏"""
        try:
            profile_name = profile_folder.name

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self._load_config(profile_folder)
            if not config:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {profile_name}")
                return None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            users_list = self._load_users_database(profile_folder)
            chats_list = self._load_chats_database(profile_folder)

            return {
                'name': profile_name,
                'folder_path': str(profile_folder),
                'config': config,
                'users_list': users_list,
                'chats_list': chats_list,
                'is_running': False
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_folder.name}: {e}")
            return None

    def _is_valid_profile(self, profile_folder: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        required_files = ["config.json", "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt", "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"]

        for file_name in required_files:
            if not (profile_folder / file_name).exists():
                return False

        return True

    def _sanitize_folder_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_name = re.sub(r'[<>:"/\\|?*]', '', name)
        clean_name = clean_name.strip('. ')

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(clean_name) > 100:
            clean_name = clean_name[:100]

        return clean_name