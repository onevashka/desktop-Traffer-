"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ ‚Üí –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ‚Üí –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
–î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
"""

import shutil
from pathlib import Path
from loguru import logger
from typing import List


class AccountMover:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–∞–ø–∫–∞–º–∏"""

    def __init__(self, profile_folder: Path):
        self.profile_folder = Path(profile_folder)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        from paths import WORK_ACCOUNTS_TRAFFER_FOLDER, WORK_TRAFFER_FOLDER

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞
        self.main_accounts_folder = WORK_ACCOUNTS_TRAFFER_FOLDER

        # –ü–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.folders = {
            'frozen': WORK_TRAFFER_FOLDER / "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ",
            'dead': WORK_TRAFFER_FOLDER / "–ú–µ—Ä—Ç–≤—ã–µ",
            'connection_failed': WORK_TRAFFER_FOLDER / "–ù–µ_—É–¥–∞–ª–æ—Å—å_–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            'unauthorized': WORK_TRAFFER_FOLDER / "–ù–µ_–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã",
            # –ù–û–í–´–ï –ü–ê–ü–ö–ò –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            'writeoff': WORK_TRAFFER_FOLDER / "–°–ø–∏—Å–∞–Ω–Ω—ã–µ",
            'spam_block': WORK_TRAFFER_FOLDER / "–°–ø–∞–º_–±–ª–æ–∫",
            'block_invite': WORK_TRAFFER_FOLDER / "–ë–ª–æ–∫_–∏–Ω–≤–∞–π—Ç–æ–≤",
            "finished" : WORK_TRAFFER_FOLDER / "–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"
        }

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.moved_accounts = set()

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ)
        self._create_folders()

        logger.debug(f"üìÅ AccountMover –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {profile_folder.name}")

    def _create_folders(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        created_folders = []

        for folder_type, folder_path in self.folders.items():
            try:
                if not folder_path.exists():
                    folder_path.mkdir(parents=True, exist_ok=True)
                    created_folders.append(folder_type)
                    logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_type}: {e}")

        if created_folders:
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {', '.join(created_folders)}")

    def move_account(self, account_name: str, folder_type: str) -> bool:
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞!
        """
        try:
            if folder_type not in self.folders:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∞–ø–∫–∏: {folder_type}")
                logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(self.folders.keys())}")
                return False

            target_folder = self.folders[folder_type]

            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not target_folder.exists():
                try:
                    target_folder.mkdir(parents=True, exist_ok=True)
                    logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_folder}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {target_folder}: {e}")
                    return False

            # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
            files_to_move = self._find_account_files(account_name)

            if not files_to_move:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–π
                self.moved_accounts.add(account_name)
                return False

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
            moved_count = 0
            for file_path in files_to_move:
                try:
                    target_path = target_folder / file_path.name

                    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                    if target_path.exists():
                        target_path.unlink()
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {target_path.name}")

                    shutil.move(str(file_path), str(target_path))
                    moved_count += 1
                    logger.debug(f"üìÅ {file_path.name} ‚Üí {self._get_folder_display_name(folder_type)}")

                except Exception as move_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {file_path.name}: {move_error}")

            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–π
            self.moved_accounts.add(account_name)

            if moved_count > 0:
                folder_display = self._get_folder_display_name(folder_type)
                logger.success(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ '{folder_display}' ({moved_count} —Ñ–∞–π–ª–æ–≤)")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è {account_name}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.moved_accounts.add(account_name)
            return False

    def _get_folder_display_name(self, folder_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤"""
        display_names = {
            'frozen': '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ',
            'dead': '–ú–µ—Ä—Ç–≤—ã–µ',
            'connection_failed': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
            'unauthorized': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã',
            'writeoff': '–°–ø–∏—Å–∞–Ω–Ω—ã–µ',
            'spam_block': '–°–ø–∞–º-–±–ª–æ–∫',
            'block_invite': '–ë–ª–æ–∫ –∏–Ω–≤–∞–π—Ç–æ–≤'
        }
        return display_names.get(folder_type, folder_type)

    def _find_account_files(self, account_name: str) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö"""
        files = []

        # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ
        work_session = self.main_accounts_folder / f"{account_name}.session"
        work_json = self.main_accounts_folder / f"{account_name}.json"

        if work_session.exists():
            files.append(work_session)
        if work_json.exists():
            files.append(work_json)

        # –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ –∞–¥–º–∏–Ω–æ–≤
        admin_folder = self.profile_folder / "–ê–¥–º–∏–Ω—ã"
        admin_session = admin_folder / f"{account_name}.session"
        admin_json = admin_folder / f"{account_name}.json"

        if admin_session.exists():
            files.append(admin_session)
        if admin_json.exists():
            files.append(admin_json)

        # –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        profile_session = self.profile_folder / f"{account_name}.session"
        profile_json = self.profile_folder / f"{account_name}.json"

        if profile_session.exists():
            files.append(profile_session)
        if profile_json.exists():
            files.append(profile_json)

        return files

    def is_account_moved(self, account_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç"""
        return account_name in self.moved_accounts

    def get_moved_accounts_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return len(self.moved_accounts)

    def get_moved_accounts_by_type(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
        stats = {}

        for folder_type, folder_path in self.folders.items():
            if folder_path.exists():
                session_files = list(folder_path.glob("*.session"))
                stats[self._get_folder_display_name(folder_type)] = len(session_files)
            else:
                stats[self._get_folder_display_name(folder_type)] = 0

        return stats

    def reset_moved_accounts(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        self.moved_accounts.clear()
        logger.info("üîÑ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω")

    def get_available_folder_types(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∞–ø–æ–∫"""
        return list(self.folders.keys())

    def check_folders_exist(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫"""
        status = {}
        for folder_type, folder_path in self.folders.items():
            status[folder_type] = {
                'exists': folder_path.exists(),
                'path': str(folder_path),
                'display_name': self._get_folder_display_name(folder_type)
            }
        return status