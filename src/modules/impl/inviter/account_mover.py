# src/modules/impl/inviter/account_mover.py
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç session + json —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
"""

import shutil
from pathlib import Path
from loguru import logger


class AccountMover:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–∏"""

    def __init__(self, profile_folder: Path):
        self.profile_folder = Path(profile_folder)

        # –ü–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.folders = {
            'frozen': self.profile_folder / "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ",
            'dead': self.profile_folder / "–ú–µ—Ä—Ç–≤—ã–µ",
            'connection_failed': self.profile_folder / "–ù–µ_—É–¥–∞–ª–æ—Å—å_–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            'unauthorized': self.profile_folder / "–ù–µ_–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
        }

        # –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.moved_accounts = set()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        for folder in self.folders.values():
            folder.mkdir(parents=True, exist_ok=True)

    def move_account(self, account_name: str, folder_type: str) -> bool:
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
            folder_type: –¢–∏–ø –ø–∞–ø–∫–∏ ('frozen', 'dead', 'connection_failed', 'unauthorized')

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        """
        try:
            if folder_type not in self.folders:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∞–ø–∫–∏: {folder_type}")
                return False

            target_folder = self.folders[folder_type]

            # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞
            session_file = self.profile_folder / f"{account_name}.session"
            json_file = self.profile_folder / f"{account_name}.json"

            # –¢–∞–∫–∂–µ –∏—â–µ–º –≤ –ø–∞–ø–∫–µ –ê–¥–º–∏–Ω—ã
            admin_folder = self.profile_folder / "–ê–¥–º–∏–Ω—ã"
            admin_session = admin_folder / f"{account_name}.session"
            admin_json = admin_folder / f"{account_name}.json"

            files_to_move = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
            if session_file.exists():
                files_to_move.append(session_file)
            if json_file.exists():
                files_to_move.append(json_file)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–¥–º–∏–Ω–æ–≤
            if admin_session.exists():
                files_to_move.append(admin_session)
            if admin_json.exists():
                files_to_move.append(admin_json)

            if not files_to_move:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
            for file_path in files_to_move:
                target_path = target_folder / file_path.name
                shutil.move(str(file_path), str(target_path))
                logger.debug(f"üìÅ {file_path.name} ‚Üí {folder_type}")

            logger.success(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É '{folder_type}' ({len(files_to_move)} —Ñ–∞–π–ª–æ–≤)")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
            return False

    def is_account_moved(self, account_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç"""
        return account_name in self.moved_accounts