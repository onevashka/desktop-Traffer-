# src/proxies/manager.py
"""
–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ - —á–∏—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
"""

from typing import Optional, List, Dict
from pathlib import Path
from loguru import logger
import random

from paths import PROXY_FILE


class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ - —á–∏—Ç–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ"""

    def __init__(self):
        self.proxy_file = PROXY_FILE
        self.current_index = 0
        logger.info("üåê ProxyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _read_proxies_from_file(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.proxy_file, 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            return lines
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.proxy_file}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return []

    def _parse_proxy_line(self, line: str) -> Optional[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ —Ñ–æ—Ä–º–∞—Ç–∞ host:port:login:password

        Returns:
            –°–ª–æ–≤–∞—Ä—å –¥–ª—è Telethon –∏–ª–∏ None
        """
        try:
            parts = line.strip().split(':')
            if len(parts) != 4:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {line}")
                return None

            host, port, login, password = parts

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è Telethon
            return {
                'proxy_type': 'socks5',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é socks5
                'addr': host,
                'port': int(port),
                'username': login,
                'password': password,
                'rdns': True  # Remote DNS –¥–ª—è socks5
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ '{line}': {e}")
            return None

    def get_proxy(self, random_choice: bool = False) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞

        Args:
            random_choice: –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è Telethon –∏–ª–∏ None
        """
        proxies = self._read_proxies_from_file()

        if not proxies:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª–µ")
            return None

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏
        if random_choice:
            proxy_line = random.choice(proxies)
        else:
            # –ü–æ –∫—Ä—É–≥—É
            proxy_line = proxies[self.current_index % len(proxies)]
            self.current_index += 1

        # –ü–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        proxy_dict = self._parse_proxy_line(proxy_line)


        return proxy_dict

    def get_proxy_for_account(self, account_name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É)

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è Telethon
        """
        return self.get_proxy(random_choice=False)

    def get_total_proxies(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª–µ"""
        return len(self._read_proxies_from_file())


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_proxy_manager: Optional[ProxyManager] = None


def get_proxy_manager() -> ProxyManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProxyManager"""
    global _proxy_manager
    if _proxy_manager is None:
        _proxy_manager = ProxyManager()
    return _proxy_manager


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_proxy() -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
    manager = get_proxy_manager()
    return manager.get_proxy()


def get_proxy_for_account(account_name: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    manager = get_proxy_manager()
    return manager.get_proxy_for_account(account_name)


def get_random_proxy() -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
    manager = get_proxy_manager()
    return manager.get_proxy(random_choice=True)