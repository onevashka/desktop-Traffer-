# src/accounts/services/statistics_service.py
"""
–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ–¥—Å—á–µ—Ç —Ü–∏—Ñ—Ä –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
"""

from typing import Dict, List, Tuple
from loguru import logger
from src.entities.account import AccountData


class StatisticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""

    def __init__(self, traffic_accounts: Dict[str, AccountData], sales_accounts: Dict[str, AccountData]):
        self.traffic_accounts = traffic_accounts
        self.sales_accounts = sales_accounts
        logger.debug("üìä StatisticsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_traffic_stats(self) -> List[Tuple[str, str, str]]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è GUI —Ç—Ä–∞—Ñ–∏–∫–∞

        Returns:
            List[Tuple[str, str, str]]: [(–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–≤–µ—Ç), ...]
        """
        counts = self._count_by_status(self.traffic_accounts)

        return [
            ("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", str(counts.get("active", 0)), "#10B981"),
            ("–ú–µ—Ä—Ç–≤—ã—Ö", str(counts.get("dead", 0)), "#EF4444"),
            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", str(counts.get("frozen", 0)), "#F59E0B"),
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", str(counts.get("invalid", 0)), "#6B7280")
        ]

    def get_sales_stats(self) -> List[Tuple[str, str, str]]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è GUI –ø—Ä–æ–¥–∞–∂

        Returns:
            List[Tuple[str, str, str]]: [(–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–≤–µ—Ç), ...]
        """
        counts = self._count_by_status(self.sales_accounts)

        return [
            ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", str(counts.get("registration", 0)), "#3B82F6"),
            ("üìÅ TData", str(counts.get("ready_tdata", 0)), "#10B981"),
            ("üìÑ Session+JSON", str(counts.get("ready_sessions", 0)), "#059669"),
            ("–°—Ä–µ–¥–Ω–∏—Ö", str(counts.get("middle", 0)), "#8B5CF6"),
            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", str(counts.get("frozen", 0)), "#F59E0B"),
            ("–ú–µ—Ä—Ç–≤—ã—Ö", str(counts.get("dead", 0)), "#EF4444")
        ]

    def get_folder_counts(self) -> Dict[str, Dict[str, int]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ

        Returns:
            Dict: {
                "traffic": {"active": 150, "dead": 45, ...},
                "sales": {"registration": 12, "ready_tdata": 25, ...}
            }
        """
        return {
            "traffic": self._count_by_status(self.traffic_accounts),
            "sales": self._count_by_status(self.sales_accounts)
        }

    def get_total_counts(self) -> Dict[str, int]:
        """
        –û–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏

        Returns:
            Dict: {"total": 336, "traffic": 247, "sales": 89}
        """
        return {
            "total": len(self.traffic_accounts) + len(self.sales_accounts),
            "traffic": len(self.traffic_accounts),
            "sales": len(self.sales_accounts)
        }

    def get_folder_status_count(self, category: str, status: str) -> int:
        """
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        if category == "traffic":
            accounts = [data for data in self.traffic_accounts.values() if data.status == status]
        elif category == "sales":
            accounts = [data for data in self.sales_accounts.values() if data.status == status]
        else:
            return 0

        return len(accounts)

    def get_geo_stats(self, category: str = None) -> Dict[str, int]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏

        Args:
            category: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö

        Returns:
            Dict: {"RU": 89, "US": 35, "EU": 18, ...}
        """
        geo_counts = {}

        accounts_to_check = []
        if category == "traffic":
            accounts_to_check = list(self.traffic_accounts.values())
        elif category == "sales":
            accounts_to_check = list(self.sales_accounts.values())
        else:
            accounts_to_check = list(self.traffic_accounts.values()) + list(self.sales_accounts.values())

        for account_data in accounts_to_check:
            geo = account_data.info.get('geo', 'Unknown')
            geo_counts[geo] = geo_counts.get(geo, 0) + 1

        return geo_counts

    def get_premium_stats(self, category: str = None) -> Dict[str, int]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç–∞–º

        Args:
            category: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö

        Returns:
            Dict: {"premium": 23, "regular": 324}
        """
        premium_count = 0
        total_count = 0

        accounts_to_check = []
        if category == "traffic":
            accounts_to_check = list(self.traffic_accounts.values())
        elif category == "sales":
            accounts_to_check = list(self.sales_accounts.values())
        else:
            accounts_to_check = list(self.traffic_accounts.values()) + list(self.sales_accounts.values())

        for account_data in accounts_to_check:
            total_count += 1
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            # if account_data.info.get('is_premium', False):
            #     premium_count += 1

        return {
            "premium": premium_count,
            "regular": total_count - premium_count,
            "total": total_count
        }

    def get_status_distribution(self) -> Dict[str, Dict[str, int]]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º

        Returns:
            Dict: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
        """
        traffic_counts = self._count_by_status(self.traffic_accounts)
        sales_counts = self._count_by_status(self.sales_accounts)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_statuses = set(traffic_counts.keys()) | set(sales_counts.keys())

        distribution = {}
        for status in all_statuses:
            distribution[status] = {
                "traffic": traffic_counts.get(status, 0),
                "sales": sales_counts.get(status, 0),
                "total": traffic_counts.get(status, 0) + sales_counts.get(status, 0)
            }

        return distribution

    def _count_by_status(self, accounts: Dict[str, AccountData]) -> Dict[str, int]:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º

        Args:
            accounts: –°–ª–æ–≤–∞—Ä—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        Returns:
            Dict: {"active": 150, "dead": 45, ...}
        """
        counts = {}
        for account_data in accounts.values():
            status = account_data.status
            counts[status] = counts.get(status, 0) + 1
        return counts

    def get_detailed_stats_report(self) -> Dict:
        """
        –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º

        Returns:
            Dict: –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        """
        return {
            "summary": self.get_total_counts(),
            "traffic_stats": dict(zip(
                [item[0] for item in self.get_traffic_stats()],
                [int(item[1]) for item in self.get_traffic_stats()]
            )),
            "sales_stats": dict(zip(
                [item[0] for item in self.get_sales_stats()],
                [int(item[1]) for item in self.get_sales_stats()]
            )),
            "folder_counts": self.get_folder_counts(),
            "geo_distribution": self.get_geo_stats(),
            "premium_stats": self.get_premium_stats(),
            "status_distribution": self.get_status_distribution()
        }