# src/accounts/services/data_service.py
"""
–°–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GUI –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
"""

from typing import Dict, List, Optional
from loguru import logger
from src.entities.account import AccountData


class DataService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö GUI –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""

    def __init__(self, traffic_accounts: Dict[str, AccountData], sales_accounts: Dict[str, AccountData]):
        self.traffic_accounts = traffic_accounts
        self.sales_accounts = sales_accounts
        logger.debug("üìã DataService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_table_data(self, category: str, status: str = None, limit: int = 50) -> List[List[str]]:
        """
        –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã GUI

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫–∞) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, -1 –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

        Returns:
            List[List[str]]: –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        """
        logger.debug(f"üìã –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {category}/{status}, limit={limit}")

        # –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if category == "traffic":
            accounts_storage = self.traffic_accounts
        elif category == "sales":
            accounts_storage = self.sales_accounts
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if status:
            category_accounts = [
                data for data in accounts_storage.values()
                if data.status == status
            ]
        else:
            category_accounts = list(accounts_storage.values())

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        category_accounts.sort(key=lambda x: x.name)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ limit > 0
        if limit > 0:
            category_accounts = category_accounts[:limit]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        for account_data in category_accounts:
            row = self._format_table_row(account_data)
            table_data.append(row)

        logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {category}/{status}: {len(table_data)} –∑–∞–ø–∏—Å–µ–π (limit={limit})")
        return table_data

    def get_paginated_data(self, category: str, status: str = None, page: int = 1, per_page: int = 10) -> dict:
        """
        –î–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫–∞) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
            page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            per_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        Returns:
            dict: {
                'data': List[List[str]],  # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                'total_items': int,       # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                'total_pages': int,       # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                'current_page': int,      # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                'per_page': int,          # –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                'has_next': bool,         # –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                'has_prev': bool          # –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            }
        """
        logger.debug(f"üìÑ –ü–æ–ª—É—á–∞–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {category}/{status}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ø–æ {per_page}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = self.get_table_data(category, status, limit=-1)
        total_items = len(all_data)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if per_page <= 0:
            per_page = total_items or 1

        total_pages = max(1, (total_items + per_page - 1) // per_page) if total_items > 0 else 1

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_data = all_data[start_idx:end_idx]

        result = {
            'data': page_data,
            'total_items': total_items,
            'total_pages': total_pages,
            'current_page': page,
            'per_page': per_page,
            'has_next': page < total_pages,
            'has_prev': page > 1
        }

        logger.debug(
            f"üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è {category}/{status}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}, –ø–æ–∫–∞–∑–∞–Ω–æ {len(page_data)} –∏–∑ {total_items}")
        return result

    def get_account_by_name(self, name: str, category: str) -> Optional[AccountData]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            AccountData –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if category == "traffic":
            print(self.traffic_accounts)
            return self.traffic_accounts.get(name)
        elif category == "sales":
            return self.sales_accounts.get(name)
        else:
            return None

    def search_accounts(self, query: str, category: str = None, status: str = None) -> List[AccountData]:
        """
        –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
            status: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö

        Returns:
            List[AccountData]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        """
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: '{query}', category={category}, status={status}")

        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        accounts_to_search = []
        if category == "traffic":
            accounts_to_search = list(self.traffic_accounts.values())
        elif category == "sales":
            accounts_to_search = list(self.sales_accounts.values())
        else:
            accounts_to_search = list(self.traffic_accounts.values()) + list(self.sales_accounts.values())

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if status:
            accounts_to_search = [acc for acc in accounts_to_search if acc.status == status]

        # –ü–æ–∏—Å–∫
        query_lower = query.lower()
        found_accounts = []

        for account_data in accounts_to_search:
            if self._matches_query(account_data, query_lower):
                found_accounts.append(account_data)

        logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(found_accounts)}")
        return found_accounts

    def get_accounts_by_filter(self, filters: Dict) -> List[AccountData]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º

        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ {
                'category': 'traffic'|'sales'|None,
                'status': str|None,
                'geo': str|None,
                'has_phone': bool|None,
                'is_premium': bool|None
            }

        Returns:
            List[AccountData]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        """
        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts_to_filter = []
        category = filters.get('category')

        if category == "traffic":
            accounts_to_filter = list(self.traffic_accounts.values())
        elif category == "sales":
            accounts_to_filter = list(self.sales_accounts.values())
        else:
            accounts_to_filter = list(self.traffic_accounts.values()) + list(self.sales_accounts.values())

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_accounts = []
        for account_data in accounts_to_filter:
            if self._matches_filters(account_data, filters):
                filtered_accounts.append(account_data)

        return filtered_accounts

    def _format_table_row(self, account_data: AccountData) -> List[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã

        Args:
            account_data: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            List[str]: –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        """
        info = account_data.info

        # –°—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_display = {
            "active": "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π",
            "dead": "‚ùå –ú–µ—Ä—Ç–≤—ã–π",
            "frozen": "üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω",
            "invalid": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
            "registration": "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "ready_tdata": "üìÅ TData –≥–æ—Ç–æ–≤",
            "ready_sessions": "üìÑ Session –≥–æ—Ç–æ–≤",
            "middle": "üü° –°—Ä–µ–¥–Ω–∏–π"
        }.get(account_data.status, account_data.status)

        return [
            info.get('session_name', account_data.name),  # –ù–∞–∑–≤–∞–Ω–∏–µ
            info.get('geo', '?'),  # –ì–µ–æ
            "?",  # –î–Ω–µ–π —Å–æ–∑–¥–∞–Ω (TODO)
            status_display,  # –°—Ç–∞—Ç—É—Å
            info.get('full_name', '?') or '?',  # –ò–º—è
            info.get('phone', '?') or '?',  # –¢–µ–ª–µ—Ñ–æ–Ω
            "‚ùì"  # –ü—Ä–µ–º–∏—É–º (TODO)
        ]

    def _matches_query(self, account_data: AccountData, query_lower: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É

        Args:
            account_data: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            query_lower: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
        """
        info = account_data.info

        # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
        searchable_fields = [
            account_data.name.lower(),
            info.get('session_name', '').lower(),
            info.get('full_name', '').lower(),
            info.get('phone', '').lower(),
            info.get('geo', '').lower(),
            account_data.status.lower()
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
        for field in searchable_fields:
            if query_lower in field:
                return True

        return False

    def _matches_filters(self, account_data: AccountData, filters: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º

        Args:
            account_data: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            filters: –°–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        """
        info = account_data.info

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if filters.get('status') and account_data.status != filters['status']:
            return False

        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–µ–æ
        if filters.get('geo') and info.get('geo', '') != filters['geo']:
            return False

        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if filters.get('has_phone') is not None:
            has_phone = bool(info.get('phone', '').strip())
            if has_phone != filters['has_phone']:
                return False

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–º–∏—É–º (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
        if filters.get('is_premium') is not None:
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
            pass

        return True