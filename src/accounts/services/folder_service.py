# src/accounts/services/folder_service.py
"""
–°–µ—Ä–≤–∏—Å –ø–∞–ø–æ–∫ - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å –ø–∞–ø–∫–∞–º–∏, –ø—É—Ç—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
"""

from pathlib import Path
from typing import Dict, List, Optional, Tuple
from loguru import logger


class FolderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ø–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, traffic_folders: Dict[str, Path], sales_folders: Dict[str, Path]):
        self.traffic_folders = traffic_folders
        self.sales_folders = sales_folders
        logger.debug("üìÅ FolderService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_default_status(self, category: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            category: "traffic" –∏–ª–∏ "sales"

        Returns:
            str: –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        if category == "traffic":
            return "active"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        elif category == "sales":
            return "registration"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        else:
            return "active"

    def get_status_display_name(self, category: str, status: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏

        Returns:
            str: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        """
        display_names = {
            "traffic": {
                "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "dead": "–ú–µ—Ä—Ç–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "frozen": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "invalid": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            },
            "sales": {
                "registration": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "ready_tdata": "TData –≥–æ—Ç–æ–≤—ã–µ",
                "ready_sessions": "Session+JSON –≥–æ—Ç–æ–≤—ã–µ",
                "middle": "–°—Ä–µ–¥–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "dead": "–ú–µ—Ä—Ç–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "frozen": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "invalid": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            }
        }

        return display_names.get(category, {}).get(status, f"–ê–∫–∫–∞—É–Ω—Ç—ã ({status})")

    def get_folder_path(self, category: str, status: str) -> Optional[Path]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å—É

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏

        Returns:
            Path –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        if category == "traffic":
            return self.traffic_folders.get(status)
        elif category == "sales":
            return self.sales_folders.get(status)
        else:
            return None

    def get_all_folders(self) -> Dict[str, Dict[str, Path]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏

        Returns:
            Dict: {"traffic": {...}, "sales": {...}}
        """
        return {
            "traffic": self.traffic_folders.copy(),
            "sales": self.sales_folders.copy()
        }

    def get_category_folders(self, category: str) -> Dict[str, Path]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–∞–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            category: "traffic" –∏–ª–∏ "sales"

        Returns:
            Dict[str, Path]: –ü–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        if category == "traffic":
            return self.traffic_folders.copy()
        elif category == "sales":
            return self.sales_folders.copy()
        else:
            return {}

    def ensure_folders_exist(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç

        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
        """
        results = {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        for status, folder_path in self.traffic_folders.items():
            try:
                folder_path.mkdir(parents=True, exist_ok=True)
                results[f"traffic_{status}"] = True
                logger.debug(f"‚úÖ –ü–∞–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞: {folder_path}")
            except Exception as e:
                results[f"traffic_{status}"] = False
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_path}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ–¥–∞–∂
        for status, folder_path in self.sales_folders.items():
            try:
                folder_path.mkdir(parents=True, exist_ok=True)
                results[f"sales_{status}"] = True
                logger.debug(f"‚úÖ –ü–∞–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞: {folder_path}")
            except Exception as e:
                results[f"sales_{status}"] = False
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_path}: {e}")

        return results

    def get_folder_info(self, category: str, status: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –°—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ
        """
        folder_path = self.get_folder_path(category, status)
        if not folder_path:
            return {}

        try:
            info = {
                'path': str(folder_path),
                'exists': folder_path.exists(),
                'is_directory': folder_path.is_dir() if folder_path.exists() else False,
                'readable': folder_path.exists() and os.access(folder_path, os.R_OK),
                'writable': folder_path.exists() and os.access(folder_path, os.W_OK),
                'session_files': 0,
                'json_files': 0,
                'other_files': 0,
                'total_size': 0
            }

            if folder_path.exists() and folder_path.is_dir():
                session_files = list(folder_path.glob("*.session"))
                json_files = list(folder_path.glob("*.json"))
                all_files = list(folder_path.iterdir())

                info['session_files'] = len(session_files)
                info['json_files'] = len(json_files)
                info['other_files'] = len(all_files) - len(session_files) - len(json_files)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                total_size = 0
                for file_path in all_files:
                    if file_path.is_file():
                        try:
                            total_size += file_path.stat().st_size
                        except:
                            pass
                info['total_size'] = total_size

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ {folder_path}: {e}")
            info = {'error': str(e)}

        return info

    def get_move_destinations(self, current_category: str, current_status: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

        Args:
            current_category: –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            current_status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        """
        destinations = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        for status, folder_path in self.traffic_folders.items():
            if not (current_category == "traffic" and current_status == status):
                destinations.append({
                    'category': 'traffic',
                    'status': status,
                    'display_name': f"üöÄ –¢—Ä–∞—Ñ–∏–∫ ‚Üí {self._get_status_display_short(status)}",
                    'folder_path': folder_path
                })

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ–¥–∞–∂
        for status, folder_path in self.sales_folders.items():
            if not (current_category == "sales" and current_status == status):
                destinations.append({
                    'category': 'sales',
                    'status': status,
                    'display_name': f"üí∞ –ü—Ä–æ–¥–∞–∂–∏ ‚Üí {self._get_status_display_short(status)}",
                    'folder_path': folder_path
                })

        return destinations

    def validate_folder_structure(self) -> Dict[str, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫

        Returns:
            Dict: {"errors": [...], "warnings": [...], "info": [...]}
        """
        errors = []
        warnings = []
        info = []

        all_folders = {**self.traffic_folders, **self.sales_folders}

        for status, folder_path in all_folders.items():
            try:
                if not folder_path.exists():
                    warnings.append(f"–ü–∞–ø–∫–∞ {status} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
                    continue

                if not folder_path.is_dir():
                    errors.append(f"–ü—É—Ç—å {status} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {folder_path}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                import os
                if not os.access(folder_path, os.R_OK):
                    errors.append(f"–ù–µ—Ç –ø—Ä–∞–≤ —á—Ç–µ–Ω–∏—è –¥–ª—è –ø–∞–ø–∫–∏ {status}: {folder_path}")

                if not os.access(folder_path, os.W_OK):
                    warnings.append(f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞–ø–∫–∏ {status}: {folder_path}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                files = list(folder_path.iterdir())
                session_files = [f for f in files if f.suffix == '.session']
                json_files = [f for f in files if f.suffix == '.json']

                if len(session_files) == 0:
                    info.append(f"–ü–∞–ø–∫–∞ {status} –ø—É—Å—Ç–∞")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–Ω–æ—Å—Ç—å session/json —Ñ–∞–π–ª–æ–≤
                    session_names = {f.stem for f in session_files}
                    json_names = {f.stem for f in json_files}

                    missing_json = session_names - json_names
                    if missing_json:
                        warnings.append(f"–í –ø–∞–ø–∫–µ {status} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç JSON —Ñ–∞–π–ª—ã –¥–ª—è: {', '.join(missing_json)}")

                    orphan_json = json_names - session_names
                    if orphan_json:
                        warnings.append(f"–í –ø–∞–ø–∫–µ {status} JSON —Ñ–∞–π–ª—ã –±–µ–∑ session: {', '.join(orphan_json)}")

            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏ {status}: {e}")

        return {
            "errors": errors,
            "warnings": warnings,
            "info": info
        }

    def _get_status_display_short(self, status: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å—Ç–∞—Ç—É—Å–∞"""
        short_names = {
            "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ",
            "dead": "–ú–µ—Ä—Ç–≤—ã–µ",
            "frozen": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ",
            "invalid": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
            "registration": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "ready_tdata": "TData –≥–æ—Ç–æ–≤—ã–µ",
            "ready_sessions": "Session –≥–æ—Ç–æ–≤—ã–µ",
            "middle": "–°—Ä–µ–¥–Ω–∏–µ"
        }
        return short_names.get(status, status)