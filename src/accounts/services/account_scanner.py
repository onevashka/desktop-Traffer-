# src/accounts/services/account_scanner.py
"""
–°–µ—Ä–≤–∏—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–æ–∫
"""

import asyncio
from pathlib import Path
from typing import Dict, List
from loguru import logger

from src.entities.account import AccountData
from src.accounts.impl.account import Account


class AccountScanner:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, traffic_folders: Dict[str, Path], sales_folders: Dict[str, Path]):
        self.traffic_folders = traffic_folders
        self.sales_folders = sales_folders
        logger.debug("üîç AccountScanner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def scan_all_folders(self) -> Dict[str, Dict[str, AccountData]]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

        Returns:
            {
                'traffic': {account_name: AccountData, ...},
                'sales': {account_name: AccountData, ...}
            }
        """
        logger.info("üîç AccountScanner: –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")

        traffic_accounts = {}
        sales_accounts = {}

        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫
        traffic_total = 0
        for status, folder_path in self.traffic_folders.items():
            accounts = await self._scan_folder(folder_path, "traffic", status)
            traffic_accounts.update(accounts)
            traffic_total += len(accounts)
            logger.debug(f"  üìÅ –¢—Ä–∞—Ñ–∏–∫/{status}: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
        sales_total = 0
        for status, folder_path in self.sales_folders.items():
            accounts = await self._scan_folder(folder_path, "sales", status)
            sales_accounts.update(accounts)
            sales_total += len(accounts)
            logger.debug(f"  üí∞ –ü—Ä–æ–¥–∞–∂–∏/{status}: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        logger.info(
            f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Ç—Ä–∞—Ñ–∏–∫={traffic_total}, –ø—Ä–æ–¥–∞–∂–∏={sales_total}, –≤—Å–µ–≥–æ={traffic_total + sales_total}")

        return {
            'traffic': traffic_accounts,
            'sales': sales_accounts
        }

    async def scan_category(self, category: str) -> Dict[str, AccountData]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏)

        Args:
            category: "traffic" –∏–ª–∏ "sales"

        Returns:
            Dict[str, AccountData]: –ê–∫–∫–∞—É–Ω—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

        if category == "traffic":
            folders = self.traffic_folders
        elif category == "sales":
            folders = self.sales_folders
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return {}

        accounts = {}
        total_count = 0

        for status, folder_path in folders.items():
            folder_accounts = await self._scan_folder(folder_path, category, status)
            accounts.update(folder_accounts)
            total_count += len(folder_accounts)
            logger.debug(f"  üìÅ {category}/{status}: {len(folder_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {total_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return accounts

    async def _scan_folder(self, folder_path: Path, category: str, status: str) -> Dict[str, AccountData]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–Ω—É –ø–∞–ø–∫—É

        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            status: –°—Ç–∞—Ç—É—Å (–ø–∞–ø–∫–∞)

        Returns:
            Dict[str, AccountData]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        """
        if not folder_path.exists():
            logger.debug(f"‚è≠Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            return {}

        logger.debug(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder_path} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, —Å—Ç–∞—Ç—É—Å: {status})")

        accounts = {}

        try:
            session_files = list(folder_path.glob("*.session"))
            logger.debug(f"üìÅ –ù–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤: {len(session_files)}")

            for session_file in session_files:
                json_file = session_file.with_suffix(".json")

                if json_file.exists():
                    name = session_file.stem

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if name in accounts:
                        logger.warning(f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –≤ {category}/{status}: {name}")
                        continue

                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Account
                        account = Account(session_file, json_file)

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                        info = await account.get_info()

                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account_data = AccountData(
                            name=name,
                            category=category,
                            status=status,
                            account=account,
                            info=info
                        )

                        accounts[name] = account_data

                        logger.debug(
                            f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –≤ {category}: {name} | {info.get('full_name', '?')} | {info.get('phone', '?')}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Account –¥–ª—è {name}: {e}")
                        continue
                else:
                    logger.debug(f"‚ö†Ô∏è  JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {session_file.name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {folder_path}: {e}")

        logger.debug(f"üìä –ü–∞–ø–∫–∞ {folder_path.name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return accounts

    def get_folder_info(self, category: str) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–∞—Ö (–ø—É—Ç—å, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, etc.)
        """
        if category == "traffic":
            folders = self.traffic_folders
        elif category == "sales":
            folders = self.sales_folders
        else:
            return {}

        folder_info = {}
        for status, folder_path in folders.items():
            folder_info[status] = {
                'path': str(folder_path),
                'exists': folder_path.exists(),
                'session_files': len(list(folder_path.glob("*.session"))) if folder_path.exists() else 0,
                'json_files': len(list(folder_path.glob("*.json"))) if folder_path.exists() else 0
            }

        return folder_info