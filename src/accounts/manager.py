# src/accounts/manager.py - –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø
"""
–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ü–µ—Ö–∞
–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
"""

import asyncio
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from loguru import logger

from src.entities.account import AccountData
from src.accounts.services import AccountScanner, StatisticsService, DataService, FolderService
from paths import *


class AccountManager:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ü–µ—Ö–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
    """

    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–ø–æ–∫
        self.traffic_folders = {
            "active": WORK_ACCOUNTS_TRAFFER_FOLDER,
            "dead": DEAD_TRAFFER_FOLDER,
            "frozen": FROZEN_TRAFFER_FOLDER,
            "invalid": INVALID_TRAFFER_FORMAT_FOLDER
        }

        self.sales_folders = {
            "registration": WORK_ACCOUNTS_SALE_FOLDER,
            "ready_tdata": TDATA_FOLDER,
            "ready_sessions": SESSIONS_JSON_FOLDER,
            "middle": MIDDLE_ACCOUNTS_FOLDER,
            "dead": DEAD_SALES_FOLDER,
            "frozen": FROZEN_SALES_FOLDER,
            "invalid": INVALID_SALES_FORMAT_FOLDER
        }

        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.traffic_accounts: Dict[str, AccountData] = {}
        self.sales_accounts: Dict[str, AccountData] = {}

        # –°–µ—Ä–≤–∏—Å—ã —Ü–µ—Ö–∞ (—Å–æ–∑–¥–∞—é—Ç—Å—è –ª–µ–Ω–∏–≤–æ)
        self._scanner: Optional[AccountScanner] = None
        self._statistics: Optional[StatisticsService] = None
        self._data_service: Optional[DataService] = None
        self._folder_service: Optional[FolderService] = None

        # –û–ø–µ—Ä–∞—Ü–∏–∏ (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞)
        self._deleter = None
        self._mover = None
        self._updater = None
        self._archiver = None

        logger.info("üè≠ AccountManager —Ü–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üöÄ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å–∞–º
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    async def scan_all_folders(self) -> None:
        """–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫"""
        scanner = self._get_scanner()
        storages = await scanner.scan_all_folders()

        self.traffic_accounts = storages['traffic']
        print(self.traffic_accounts)
        self.sales_accounts = storages['sales']

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self._refresh_services()

        logger.info(
            f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Ç—Ä–∞—Ñ–∏–∫={len(self.traffic_accounts)}, –ø—Ä–æ–¥–∞–∂–∏={len(self.sales_accounts)}")

    def get_free_accounts(self, module_name: str, count: int = 1) -> List[AccountData]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        Args:
            module_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–∂–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)

        Returns:
            –°–ø–∏—Å–æ–∫ AccountData (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö)
        """
        if count <= 0:
            logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {count}")
            return []

        accounts = []

        # –ò—â–µ–º —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
        for account_name, account_data in self.traffic_accounts.items():
            if (account_data.status == "active" and
                    not account_data.is_busy):

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
                account_data.is_busy = True
                account_data.busy_by = module_name
                accounts.append(account_data)

                # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –≤—ã—Ö–æ–¥–∏–º
                if len(accounts) >= count:
                    break

        if accounts:
            logger.debug(f"üîí –í—ã–¥–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {module_name}: {len(accounts)} –∏–∑ {count}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {module_name}")

        return accounts

    def get_multiple_free_accounts(self, module_name: str, count: int) -> List[AccountData]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        Args:
            module_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–∂–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ AccountData (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ)
        """
        accounts = []

        for account_name, account_data in self.traffic_accounts.items():
            if (account_data.status == "active" and
                    not account_data.is_busy):

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
                account_data.is_busy = True
                account_data.busy_by = module_name
                accounts.append(account_data)

                if len(accounts) >= count:
                    break

        logger.debug(f"üîí –í—ã–¥–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {module_name}: {len(accounts)} –∏–∑ {count}")
        return accounts

    def release_account(self, account_name: str, module_name: str = None) -> bool:
        """
        –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
            module_name: –ú–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
        """
        if account_name not in self.traffic_accounts:
            logger.debug(f"‚ùì –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞—Ñ–∏–∫–µ")
            return False

        account_data = self.traffic_accounts[account_name]

        if not account_data.is_busy:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ç–æ—Ç –∂–µ –º–æ–¥—É–ª—å
        if module_name and account_data.busy_by != module_name:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç {account_name}")
            return False

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º
        account_data.is_busy = False
        account_data.busy_by = None

        return True

    def release_all_module_accounts(self, module_name: str) -> int:
        """
        –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–Ω—è—Ç—ã–µ –º–æ–¥—É–ª–µ–º

        Args:
            module_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        released_count = 0

        for account_name, account_data in self.traffic_accounts.items():
            if account_data.is_busy and account_data.busy_by == module_name:
                account_data.is_busy = False
                account_data.busy_by = None
                released_count += 1

        logger.info(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–¥—É–ª—è {module_name}: {released_count}")
        return released_count

    def get_free_accounts_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        free_count = sum(
            1 for account_data in self.traffic_accounts.values()
            if account_data.status == "active" and not account_data.is_busy
        )
        return free_count

    def get_busy_accounts_info(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        busy_info = []

        for account_name, account_data in self.traffic_accounts.items():
            if account_data.is_busy:
                busy_info.append({
                    'name': account_name,
                    'busy_by': account_data.busy_by,
                    'phone': account_data.info.get('phone', '?'),
                    'full_name': account_data.info.get('full_name', '?')
                })

        return busy_info

    def is_account_busy(self, account_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–Ω—è—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç

        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

        Returns:
            True –µ—Å–ª–∏ –∑–∞–Ω—è—Ç
        """
        if account_name in self.traffic_accounts:
            return self.traffic_accounts[account_name].is_busy
        return False

    def reset_all_busy_status(self) -> int:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö
        """
        reset_count = 0

        for account_data in self.traffic_accounts.values():
            if account_data.is_busy:
                account_data.is_busy = False
                account_data.busy_by = None
                reset_count += 1

        if reset_count > 0:
            logger.info(f"üßπ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —É {reset_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        return reset_count




    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º StatisticsService
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def get_traffic_stats(self) -> List[Tuple[str, str, str]]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è GUI"""
        statistics = self._get_statistics()
        return statistics.get_traffic_stats()

    def get_sales_stats(self) -> List[Tuple[str, str, str]]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è GUI"""
        statistics = self._get_statistics()
        return statistics.get_sales_stats()

    def get_folder_counts(self) -> Dict[str, Dict[str, int]]:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ"""
        statistics = self._get_statistics()
        return statistics.get_folder_counts()

    def get_total_counts(self) -> Dict[str, int]:
        """–û–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏"""
        statistics = self._get_statistics()
        return statistics.get_total_counts()

    def get_folder_status_count(self, category: str, status: str) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ"""
        statistics = self._get_statistics()
        return statistics.get_folder_status_count(category, status)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìã –î–ê–ù–ù–´–ï –î–õ–Ø GUI - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º DataService
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def get_table_data(self, category: str, status: str = None, limit: int = 50) -> List[List[str]]:
        """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã GUI"""
        data_service = self._get_data_service()
        return data_service.get_table_data(category, status, limit)

    def get_paginated_data(self, category: str, status: str = None, page: int = 1, per_page: int = 10) -> dict:
        """–î–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        data_service = self._get_data_service()
        return data_service.get_paginated_data(category, status, page, per_page)

    def search_accounts(self, query: str, category: str = None, status: str = None) -> List[AccountData]:
        """–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        data_service = self._get_data_service()
        return data_service.search_accounts(query, category, status)

    def get_account_by_name(self, name: str, category: str) -> Optional[AccountData]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∏–º–µ–Ω–∏"""
        data_service = self._get_data_service()
        return data_service.get_account_by_name(name, category)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìÅ –†–ê–ë–û–¢–ê –° –ü–ê–ü–ö–ê–ú–ò - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º FolderService
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def get_default_status(self, category: str) -> str:
        """–°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        folder_service = self._get_folder_service()
        return folder_service.get_default_status(category)

    def get_status_display_name(self, category: str, status: str) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        folder_service = self._get_folder_service()
        return folder_service.get_status_display_name(category, status)

    def get_move_destinations(self, current_category: str, current_status: str) -> List[Dict]:
        """–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        folder_service = self._get_folder_service()
        return folder_service.get_move_destinations(current_category, current_status)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # ‚ö° –û–ü–ï–†–ê–¶–ò–ò - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–∞–º Operations
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def delete_accounts(self, account_names: List[str], category: str) -> Dict[str, bool]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        deleter = self._get_deleter()
        result = deleter.delete_accounts(account_names, category)
        self._refresh_services()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return result

    def get_account_info_for_deletion(self, account_names: List[str], category: str) -> List[Dict]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        deleter = self._get_deleter()
        return deleter.get_deletion_info(account_names, category)

    def move_accounts(self, account_names: List[str], source_category: str,
                      target_category: str, target_status: str) -> Dict[str, bool]:
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        mover = self._get_mover()
        result = mover.move_accounts(account_names, source_category, target_category, target_status)
        self._refresh_services()
        return result

    def archive_accounts(self, account_names: List[str], category: str,
                         archive_name: str, archive_format: str) -> Dict[str, any]:
        """–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        archiver = self._get_archiver()
        return archiver.archive_accounts(account_names, category, archive_name, archive_format)

    def get_account_info_for_archiving(self, account_names: List[str], category: str) -> List[Dict]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
        archiver = self._get_archiver()
        return archiver.get_archive_info(account_names, category)

    async def refresh_all_accounts(self) -> Dict[str, int]:
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        updater = self._get_updater()
        return await updater.refresh_all_accounts()

    async def refresh_category(self, category: str) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        updater = self._get_updater()
        return await updater.refresh_category(category)

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîß –õ–ï–ù–ò–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _get_scanner(self) -> AccountScanner:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∫–∞–Ω–µ—Ä (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
        if self._scanner is None:
            self._scanner = AccountScanner(self.traffic_folders, self.sales_folders)
        return self._scanner

    def _get_statistics(self) -> StatisticsService:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å"""
        if self._statistics is None:
            self._statistics = StatisticsService(self.traffic_accounts, self.sales_accounts)
        return self._statistics

    def _get_data_service(self) -> DataService:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö"""
        print('fdsfds')
        if self._data_service is None:
            self._data_service = DataService(self.traffic_accounts, self.sales_accounts)
        return self._data_service

    def _get_folder_service(self) -> FolderService:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–∞–ø–æ–∫"""
        if self._folder_service is None:
            self._folder_service = FolderService(self.traffic_folders, self.sales_folders)
        return self._folder_service

    def _get_deleter(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —É–¥–∞–ª—è—Ç–æ—Ä (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞)"""
        if self._deleter is None:
            from src.accounts.operations import AccountDeleter
            self._deleter = AccountDeleter(self)
        return self._deleter

    def _get_mover(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ–ª—å (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞)"""
        if self._mover is None:
            from src.accounts.operations import AccountMover
            self._mover = AccountMover(self)
        return self._mover

    def _get_updater(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞)"""
        if self._updater is None:
            from src.accounts.operations import AccountUpdater
            self._updater = AccountUpdater(self)
        return self._updater

    def _get_archiver(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞)"""
        if self._archiver is None:
            from src.accounts.operations.archive_operations import AccountArchiver
            self._archiver = AccountArchiver(self)
        return self._archiver

    def _refresh_services(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self._statistics = None  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self._data_service = None
        logger.debug("üîÑ –°–µ—Ä–≤–∏—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üîó LEGACY API - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    @property
    def accounts(self) -> Dict[str, AccountData]:
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
        """
        combined = {}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        for name, data in self.traffic_accounts.items():
            combined[f"traffic_{name}"] = data

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        for name, data in self.sales_accounts.items():
            combined[f"sales_{name}"] = data

        return combined

    def has_account(self, name: str, category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "traffic":
            return name in self.traffic_accounts
        elif category == "sales":
            return name in self.sales_accounts
        else:
            return False

    def get_account(self, name: str, category: str = "traffic") -> Optional:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Account –ø–æ –∏–º–µ–Ω–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

        account_data = self.get_account_by_name(name, category)
        print(account_data)
        return account_data.account if account_data else None

    def get_accounts_by_category(self, category: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "traffic":
            return list(self.traffic_accounts.keys())
        elif category == "sales":
            return list(self.sales_accounts.keys())
        else:
            return []


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ò –§–£–ù–ö–¶–ò–ò –î–õ–Ø GUI
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

_account_manager: Optional[AccountManager] = None


def get_free_accounts(module_name: str, count: int = 1) -> List[AccountData]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

    Args:
        module_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)

    Returns:
        –°–ø–∏—Å–æ–∫ AccountData
    """
    global _account_manager
    if _account_manager:
        return _account_manager.get_free_accounts(module_name, count)
    return []


def get_multiple_free_accounts(module_name: str, count: int) -> List[AccountData]:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_multiple_free_accounts(module_name, count)
    return []


def release_account(account_name: str, module_name: str = None) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    global _account_manager
    if _account_manager:
        return _account_manager.release_account(account_name, module_name)
    return False


def release_all_module_accounts(module_name: str) -> int:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–¥—É–ª—è"""
    global _account_manager
    if _account_manager:
        return _account_manager.release_all_module_accounts(module_name)
    return 0


def get_free_accounts_count() -> int:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_free_accounts_count()
    return 0


def reset_all_busy_status() -> int:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)"""
    global _account_manager
    if _account_manager:
        return _account_manager.reset_all_busy_status()
    return 0


async def get_account_manager() -> AccountManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AccountManager"""
    global _account_manager
    if _account_manager is None:
        _account_manager = AccountManager()
        await _account_manager.scan_all_folders()
    return _account_manager


async def init_account_manager() -> AccountManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _account_manager
    logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccountManager...")
    _account_manager = await get_account_manager()
    logger.info("‚úÖ AccountManager –≥–æ—Ç–æ–≤!")
    return _account_manager


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üé® –§–£–ù–ö–¶–ò–ò –î–õ–Ø GUI - –ø—Ä–æ—Å—Ç—ã–µ –æ–±–µ—Ä—Ç–∫–∏
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def get_traffic_stats() -> List[Tuple[str, str, str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_traffic_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444")]


def get_sales_stats() -> List[Tuple[str, str, str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_sales_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444")]


def get_table_data(category: str, status: str = None, limit: int = 50) -> List[List[str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_table_data(category, status, limit)
    return []


def get_paginated_data(category: str, status: str = None, page: int = 1, per_page: int = 10) -> dict:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_paginated_data(category, status, page, per_page)
    return {
        'data': [], 'total_items': 0, 'total_pages': 1, 'current_page': 1,
        'per_page': per_page, 'has_next': False, 'has_prev': False
    }


def get_default_status(category: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_default_status(category)
    return "active" if category == "traffic" else "registration"


def get_status_display_name(category: str, status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_status_display_name(category, status)
    return f"–ê–∫–∫–∞—É–Ω—Ç—ã ({status})"


def get_folder_status_count(category: str, status: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_folder_status_count(category, status)
    return 0


def delete_accounts(account_names: List[str], category: str) -> Dict[str, bool]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - —É–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.delete_accounts(account_names, category)
    return {name: False for name in account_names}


def get_account_info_for_deletion(account_names: List[str], category: str) -> List[Dict]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_account_info_for_deletion(account_names, category)
    return []


def move_accounts(account_names: List[str], source_category: str,
                  target_category: str, target_status: str) -> Dict[str, bool]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.move_accounts(account_names, source_category, target_category, target_status)
    return {name: False for name in account_names}


def get_move_destinations(current_category: str, current_status: str) -> List[Dict]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_move_destinations(current_category, current_status)
    return []


async def refresh_all_accounts() -> Dict[str, int]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    global _account_manager
    if _account_manager:
        return await _account_manager.refresh_all_accounts()
    return {"error": True}


async def refresh_category(category: str) -> int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    global _account_manager
    if _account_manager:
        return await _account_manager.refresh_category(category)
    return 0


def get_account_info_for_archiving(account_names: List[str], category: str) -> List[Dict]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_account_info_for_archiving(account_names, category)
    return []


def archive_accounts(account_names: List[str], category: str,
                     archive_name: str, archive_format: str) -> Dict[str, any]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.archive_accounts(account_names, category, archive_name, archive_format)
    return {'success': False, 'message': '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}


def check_winrar_available() -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WinRAR"""
    global _account_manager
    if _account_manager:
        archiver = _account_manager._get_archiver()
        return archiver.check_winrar_available()
    return False