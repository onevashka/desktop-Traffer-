# src/accounts/manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π AccountManager - —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂
"""

import asyncio
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from loguru import logger

from src.entities.account import AccountData
from src.accounts.impl.account import Account
from paths import *


class AccountManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    –†–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂.
    """

    def __init__(self):
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
        self.traffic_folders = {
            "active": WORK_ACCOUNTS_TRAFFER_FOLDER,
            "dead": DEAD_TRAFFER_FOLDER,
            "frozen": FROZEN_TRAFFER_FOLDER,
            "invalid": INVALID_TRAFFER_FORMAT_FOLDER
        }

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ –ø—Ä–æ–¥–∞–∂
        self.sales_folders = {
            "registration": WORK_ACCOUNTS_SALE_FOLDER,
            "ready_tdata": TDATA_FOLDER,
            "ready_sessions": SESSIONS_JSON_FOLDER,
            "middle": MIDDLE_ACCOUNTS_FOLDER,
            "dead": DEAD_SALES_FOLDER,
            "frozen": FROZEN_SALES_FOLDER,
            "invalid": INVALID_SALES_FORMAT_FOLDER
        }

        # –ò–ó–ú–ï–ù–ï–ù–û: –†–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.traffic_accounts: Dict[str, AccountData] = {}
        self.sales_accounts: Dict[str, AccountData] = {}

        self.deleter = None
        self.mover = None
        self.updater = None

        logger.info("üìã AccountManager —Å–æ–∑–¥–∞–Ω —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏")

    def _init_operations(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
        if not self.deleter:
            from src.accounts.operations import AccountDeleter, AccountMover, AccountUpdater
            self.deleter = AccountDeleter(self)
            self.mover = AccountMover(self)
            self.updater = AccountUpdater(self)

    async def scan_all_folders(self) -> None:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Account.
        –†–∞–∑–¥–µ–ª—å–Ω–æ –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂.
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        self.traffic_accounts.clear()
        self.sales_accounts.clear()

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        traffic_total = 0
        for status, folder_path in self.traffic_folders.items():
            count = await self._scan_folder(folder_path, "traffic", status)
            traffic_total += count
            logger.debug(f"  üìÅ –¢—Ä–∞—Ñ–∏–∫/{status}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ–¥–∞–∂
        sales_total = 0
        for status, folder_path in self.sales_folders.items():
            count = await self._scan_folder(folder_path, "sales", status)
            sales_total += count
            logger.debug(f"  üí∞ –ü—Ä–æ–¥–∞–∂–∏/{status}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        total = len(self.traffic_accounts) + len(self.sales_accounts)
        logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—Ä–∞—Ñ–∏–∫: {traffic_total}, –ü—Ä–æ–¥–∞–∂–∏: {sales_total}, –í—Å–µ–≥–æ: {total}")

    async def _scan_folder(self, folder_path: Path, category: str, status: str) -> int:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Account.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
        """
        if not folder_path.exists():
            logger.debug(f"‚è≠Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            return 0

        logger.debug(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder_path} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, —Å—Ç–∞—Ç—É—Å: {status})")

        # –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if category == "traffic":
            accounts_storage = self.traffic_accounts
        elif category == "sales":
            accounts_storage = self.sales_accounts
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return 0

        count = 0
        try:
            session_files = list(folder_path.glob("*.session"))
            logger.debug(f"üìÅ –ù–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤: {len(session_files)}")

            for session_file in session_files:
                json_file = session_file.with_suffix(".json")

                if json_file.exists():
                    name = session_file.stem

                    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if name in accounts_storage:
                        logger.warning(f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –≤ {category}: {name}")
                        continue

                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Account
                        account = Account(session_file, json_file)

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                        info = await account.get_info()

                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account_data = AccountData(
                            name=name,
                            category=category,
                            status=status,
                            account=account,
                            info=info
                        )

                        # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                        accounts_storage[name] = account_data
                        count += 1

                        logger.debug(
                            f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –≤ {category}: {name} | {info.get('full_name', '?')} | {info.get('phone', '?')}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Account –¥–ª—è {name}: {e}")
                        continue
                else:
                    logger.debug(f"‚ö†Ô∏è  JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {session_file.name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {folder_path}: {e}")

        logger.debug(f"üìä –ü–∞–ø–∫–∞ {folder_path.name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return count

    def get_folder_counts(self) -> Dict[str, Dict[str, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ"""
        counts = {
            "traffic": {status: 0 for status in self.traffic_folders.keys()},
            "sales": {status: 0 for status in self.sales_folders.keys()}
        }

        # –ò–ó–ú–ï–ù–ï–ù–û: –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω–æ
        for account_data in self.traffic_accounts.values():
            if account_data.status in counts["traffic"]:
                counts["traffic"][account_data.status] += 1

        for account_data in self.sales_accounts.values():
            if account_data.status in counts["sales"]:
                counts["sales"][account_data.status] += 1

        return counts

    def get_traffic_stats(self) -> List[Tuple[str, str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è GUI —Ç—Ä–∞—Ñ–∏–∫–∞"""
        counts = self.get_folder_counts()["traffic"]

        return [
            ("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", str(counts["active"]), "#10B981"),
            ("–ú–µ—Ä—Ç–≤—ã—Ö", str(counts["dead"]), "#EF4444"),
            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", str(counts["frozen"]), "#F59E0B"),
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", str(counts["invalid"]), "#6B7280")
        ]

    def get_sales_stats(self) -> List[Tuple[str, str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è GUI –ø—Ä–æ–¥–∞–∂"""
        counts = self.get_folder_counts()["sales"]

        return [
            ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", str(counts["registration"]), "#3B82F6"),
            ("üìÅ TData", str(counts["ready_tdata"]), "#10B981"),
            ("üìÑ Session+JSON", str(counts["ready_sessions"]), "#059669"),
            ("–°—Ä–µ–¥–Ω–∏—Ö", str(counts["middle"]), "#8B5CF6"),
            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", str(counts["frozen"]), "#F59E0B"),
            ("–ú–µ—Ä—Ç–≤—ã—Ö", str(counts["dead"]), "#EF4444")
        ]

    def get_table_data(self, category: str, status: str = None, limit: int = 50) -> List[List[str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ

        Args:
            category: "traffic" –∏–ª–∏ "sales"
            status: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫–∞) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        """

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if category == "traffic":
            accounts_storage = self.traffic_accounts
        elif category == "sales":
            accounts_storage = self.sales_accounts
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if status:
            category_accounts = [
                data for data in accounts_storage.values()
                if data.status == status
            ]
        else:
            category_accounts = list(accounts_storage.values())

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        category_accounts = category_accounts[:limit]

        table_data = []
        for i, account_data in enumerate(category_accounts, 1):
            info = account_data.info

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            status_display = {
                "active": "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π",
                "dead": "‚ùå –ú–µ—Ä—Ç–≤—ã–π",
                "frozen": "üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω",
                "invalid": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                "registration": "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                "ready_tdata": "üìÅ TData –≥–æ—Ç–æ–≤",
                "ready_sessions": "üìÑ Session –≥–æ—Ç–æ–≤",
                "middle": "üü° –°—Ä–µ–¥–Ω–∏–π"
            }.get(account_data.status, account_data.status)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            session_name = info.get('session_name', account_data.name)

            row = [
                str(i),  # –ù–æ–º–µ—Ä
                session_name,  # –ß–∏—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                info.get('geo', '?'),  # –ì–µ–æ –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                "?",  # –î–Ω–µ–π —Å–æ–∑–¥–∞–Ω (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                status_display,  # –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                info.get('full_name', '?') or '?',  # –ü–æ–ª–Ω–æ–µ –∏–º—è
                "‚ùì"  # –ü—Ä–µ–º–∏—É–º (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            ]
            table_data.append(row)

        return table_data

    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–ø–æ–∫
    def get_default_status(self, category: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "traffic":
            return "active"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        elif category == "sales":
            return "registration"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        else:
            return "active"

    def get_status_display_name(self, category: str, status: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        display_names = {
            "traffic": {
                "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "dead": "–ú–µ—Ä—Ç–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "frozen": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "invalid": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            },
            "sales": {
                "registration": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "ready_tdata": "TData –≥–æ—Ç–æ–≤—ã–µ",
                "ready_sessions": "Session+JSON –≥–æ—Ç–æ–≤—ã–µ",
                "middle": "–°—Ä–µ–¥–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "dead": "–ú–µ—Ä—Ç–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "frozen": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "invalid": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            }
        }

        return display_names.get(category, {}).get(status, f"–ê–∫–∫–∞—É–Ω—Ç—ã ({status})")

    def get_folder_status_count(self, category: str, status: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ"""
        if category == "traffic":
            accounts = [data for data in self.traffic_accounts.values() if data.status == status]
        elif category == "sales":
            accounts = [data for data in self.sales_accounts.values() if data.status == status]
        else:
            return 0

        return len(accounts)

    def get_accounts_by_category(self, category: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "traffic":
            return list(self.traffic_accounts.keys())
        elif category == "sales":
            return list(self.sales_accounts.keys())
        else:
            return []

    def get_account(self, name: str, category: str) -> Optional[Account]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Account –ø–æ –∏–º–µ–Ω–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "traffic":
            account_data = self.traffic_accounts.get(name)
        elif category == "sales":
            account_data = self.sales_accounts.get(name)
        else:
            return None

        return account_data.account if account_data else None

    def has_account(self, name: str, category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "traffic":
            return name in self.traffic_accounts
        elif category == "sales":
            return name in self.sales_accounts
        else:
            return False

    @property
    def accounts(self) -> Dict[str, AccountData]:
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
        """
        combined = {}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        for name, data in self.traffic_accounts.items():
            combined[f"traffic_{name}"] = data

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        for name, data in self.sales_accounts.items():
            combined[f"sales_{name}"] = data

        return combined

    def get_total_counts(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏"""
        return {
            "total": len(self.traffic_accounts) + len(self.sales_accounts),
            "traffic": len(self.traffic_accounts),
            "sales": len(self.sales_accounts)
        }

    def delete_accounts(self, account_names: List[str], category: str) -> Dict[str, bool]:
        """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
        self._init_operations()
        return self.deleter.delete_accounts(account_names, category)

    def get_account_info_for_deletion(self, account_names: List[str], category: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        self._init_operations()
        return self.deleter.get_deletion_info(account_names, category)

    def move_accounts(self, account_names: List[str], source_category: str,
                      target_category: str, target_status: str) -> Dict[str, bool]:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
        self._init_operations()
        return self.mover.move_accounts(account_names, source_category, target_category, target_status)

    def get_move_destinations(self, current_category: str, current_status: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        self._init_operations()
        return self.mover.get_available_destinations(current_category, current_status)

    async def refresh_all_accounts(self) -> Dict[str, int]:
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        self._init_operations()
        return await self.updater.refresh_all_accounts()

    async def refresh_category(self, category: str) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self._init_operations()
        return await self.updater.refresh_category(category)


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —Ñ—É–Ω–∫—Ü–∏–∏
_account_manager: Optional[AccountManager] = None


async def get_account_manager() -> AccountManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AccountManager"""
    global _account_manager
    if _account_manager is None:
        _account_manager = AccountManager()
        await _account_manager.scan_all_folders()
    return _account_manager


async def init_account_manager() -> AccountManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _account_manager
    logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccountManager...")
    _account_manager = await get_account_manager()
    logger.info("‚úÖ AccountManager –≥–æ—Ç–æ–≤!")
    return _account_manager


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI
def get_traffic_stats() -> List[Tuple[str, str, str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_traffic_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444")]


def get_sales_stats() -> List[Tuple[str, str, str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_sales_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444")]


def get_table_data(category: str, status: str = None, limit: int = 50) -> List[List[str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_table_data(category, status, limit)
    return []


def get_default_status(category: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_default_status(category)
    return "active" if category == "traffic" else "registration"


def get_status_display_name(category: str, status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_status_display_name(category, status)
    return f"–ê–∫–∫–∞—É–Ω—Ç—ã ({status})"


def get_folder_status_count(category: str, status: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_folder_status_count(category, status)
    return 0


def delete_accounts(account_names: List[str], category: str) -> Dict[str, bool]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - —É–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.delete_accounts(account_names, category)
    return {name: False for name in account_names}


def get_account_info_for_deletion(account_names: List[str], category: str) -> List[Dict]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_account_info_for_deletion(account_names, category)
    return []


def move_accounts(account_names: List[str], source_category: str,
                  target_category: str, target_status: str) -> Dict[str, bool]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã"""
    global _account_manager
    if _account_manager:
        return _account_manager.move_accounts(account_names, source_category, target_category, target_status)
    return {name: False for name in account_names}


def get_move_destinations(current_category: str, current_status: str) -> List[Dict]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
    global _account_manager
    if _account_manager:
        return _account_manager.get_move_destinations(current_category, current_status)
    return []


async def refresh_all_accounts() -> Dict[str, int]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    global _account_manager
    if _account_manager:
        return await _account_manager.refresh_all_accounts()
    return {"error": True}


async def refresh_category(category: str) -> int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è GUI - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    global _account_manager
    if _account_manager:
        return await _account_manager.refresh_category(category)
    return 0