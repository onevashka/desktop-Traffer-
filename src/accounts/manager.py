# src/accounts/manager.py
"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π AccountManager - —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Account —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
"""

import asyncio
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from loguru import logger

from src.accounts.impl.account import Account
from paths import *


@dataclass
class AccountData:
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    name: str  # –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    category: str  # "traffic" –∏–ª–∏ "sales"
    status: str  # –ø–∞–ø–∫–∞ –≥–¥–µ –ª–µ–∂–∏—Ç: "active", "dead", "frozen", etc.
    account: Account  # –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    info: dict  # –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ account.get_info()


class AccountManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Account —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –≥–æ—Ç–æ–≤–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """

    def __init__(self):
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
        self.traffic_folders = {
            "active": WORK_ACCOUNTS_TRAFFER_FOLDER,
            "dead": DEAD_TRAFFER_FOLDER,
            "frozen": FROZEN_TRAFFER_FOLDER,
            "invalid": INVALID_TRAFFER_FORMAT_FOLDER
        }

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ –ø—Ä–æ–¥–∞–∂
        self.sales_folders = {
            "registration": WORK_ACCOUNTS_SALE_FOLDER,
            "ready_tdata": TDATA_FOLDER,
            "ready_sessions": SESSIONS_JSON_FOLDER,
            "middle": MIDDLE_ACCOUNTS_FOLDER,
            "dead": DEAD_SALES_FOLDER,
            "frozen": FROZEN_SALES_FOLDER,
            "invalid": INVALID_SALES_FORMAT_FOLDER
        }

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        self.accounts: Dict[str, AccountData] = {}

        logger.info("üìã AccountManager —Å–æ–∑–¥–∞–Ω")

    async def scan_all_folders(self) -> None:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Account —Å—Ä–∞–∑—É.
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        self.accounts.clear()

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        traffic_total = 0
        for status, folder_path in self.traffic_folders.items():
            count = await self._scan_folder(folder_path, "traffic", status)
            traffic_total += count
            logger.debug(f"  üìÅ –¢—Ä–∞—Ñ–∏–∫/{status}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ–¥–∞–∂
        sales_total = 0
        for status, folder_path in self.sales_folders.items():
            count = await self._scan_folder(folder_path, "sales", status)
            sales_total += count
            logger.debug(f"  üí∞ –ü—Ä–æ–¥–∞–∂–∏/{status}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        total = len(self.accounts)
        logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—Ä–∞—Ñ–∏–∫: {traffic_total}, –ü—Ä–æ–¥–∞–∂–∏: {sales_total}, –í—Å–µ–≥–æ: {total}")

    async def _scan_folder(self, folder_path: Path, category: str, status: str) -> int:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Account"""
        if not folder_path.exists():
            logger.debug(f"‚è≠Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            return 0

        count = 0
        try:
            # –ò—â–µ–º .session —Ñ–∞–π–ª—ã
            for session_file in folder_path.glob("*.session"):
                json_file = session_file.with_suffix(".json")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON
                if json_file.exists():
                    name = session_file.stem

                    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    if name in self.accounts:
                        logger.warning(f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {name}")
                        continue

                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Account
                        account = Account(session_file, json_file)

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                        info = await account.get_info()

                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account_data = AccountData(
                            name=name,
                            category=category,
                            status=status,
                            account=account,
                            info=info
                        )

                        self.accounts[name] = account_data
                        count += 1

                        logger.debug(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {name} | {info.get('full_name', '?')} | {info.get('phone', '?')}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Account –¥–ª—è {name}: {e}")
                        continue

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {folder_path}: {e}")

        return count

    def get_folder_counts(self) -> Dict[str, Dict[str, int]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ.

        Returns:
            {
                "traffic": {"active": 10, "dead": 5, "frozen": 2, "invalid": 1},
                "sales": {"registration": 8, "ready_tdata": 15, ...}
            }
        """
        counts = {
            "traffic": {status: 0 for status in self.traffic_folders.keys()},
            "sales": {status: 0 for status in self.sales_folders.keys()}
        }

        # –°—á–∏—Ç–∞–µ–º –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        for account_data in self.accounts.values():
            if account_data.category in counts and account_data.status in counts[account_data.category]:
                counts[account_data.category][account_data.status] += 1

        return counts

    def get_traffic_stats(self) -> List[Tuple[str, str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è GUI —Ç—Ä–∞—Ñ–∏–∫–∞"""
        counts = self.get_folder_counts()["traffic"]

        return [
            ("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", str(counts["active"]), "#10B981"),
            ("–ú–µ—Ä—Ç–≤—ã—Ö", str(counts["dead"]), "#EF4444"),
            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", str(counts["frozen"]), "#F59E0B"),
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", str(counts["invalid"]), "#6B7280")
        ]

    def get_sales_stats(self) -> List[Tuple[str, str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è GUI –ø—Ä–æ–¥–∞–∂"""
        counts = self.get_folder_counts()["sales"]

        # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—Ä–æ–¥–∞–∂–µ
        ready_total = counts["ready_tdata"] + counts["ready_sessions"]

        return [
            ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", str(counts["registration"]), "#3B82F6"),
            ("–ì–æ—Ç–æ–≤—ã—Ö –∫ –ø—Ä–æ–¥–∞–∂–µ", str(ready_total), "#10B981"),
            ("–°—Ä–µ–¥–Ω–∏—Ö", str(counts["middle"]), "#8B5CF6"),
            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", str(counts["frozen"]), "#F59E0B"),
            ("–ú–µ—Ä—Ç–≤—ã—Ö", str(counts["dead"]), "#EF4444")
        ]

    def get_accounts_by_category(self, category: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [
            name for name, account_data in self.accounts.items()
            if account_data.category == category
        ]

    def get_accounts_by_status(self, category: str, status: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å—É"""
        return [
            name for name, account_data in self.accounts.items()
            if account_data.category == category and account_data.status == status
        ]

    def get_account(self, name: str) -> Optional[Account]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Account –ø–æ –∏–º–µ–Ω–∏"""
        account_data = self.accounts.get(name)
        return account_data.account if account_data else None

    def get_account_info(self, name: str) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        account_data = self.accounts.get(name)
        return account_data.info if account_data else None

    def get_table_data(self, category: str, limit: int = 50) -> List[List[str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_accounts = [
            account_data for account_data in self.accounts.values()
            if account_data.category == category
        ]

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        category_accounts = category_accounts[:limit]

        table_data = []
        for i, account_data in enumerate(category_accounts, 1):
            info = account_data.info

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            row = [
                str(i),  # –ù–æ–º–µ—Ä
                f"@{info.get('session_name', account_data.name)}",  # Username
                info.get('geo', '?'),  # –ì–µ–æ –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                "?",  # –î–Ω–µ–π —Å–æ–∑–¥–∞–Ω (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                "?",  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                info.get('full_name', '?') or '?',  # –ü–æ–ª–Ω–æ–µ –∏–º—è
                "?"  # –ü—Ä–µ–º–∏—É–º (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            ]
            table_data.append(row)

        return table_data

    def get_ready_accounts(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ —Ä–∞–±–æ—Ç–µ.
        –î–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞.
        """
        return self.get_accounts_by_status("traffic", "active")

    def get_total_counts(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏"""
        traffic_accounts = self.get_accounts_by_category("traffic")
        sales_accounts = self.get_accounts_by_category("sales")

        return {
            "total": len(self.accounts),
            "traffic": len(traffic_accounts),
            "sales": len(sales_accounts)
        }

    def has_account(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        return name in self.accounts


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞
_account_manager: Optional[AccountManager] = None


async def get_account_manager() -> AccountManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AccountManager"""
    global _account_manager
    if _account_manager is None:
        _account_manager = AccountManager()
        await _account_manager.scan_all_folders()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º
    return _account_manager


async def init_account_manager() -> AccountManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccountManager...")
    manager = await get_account_manager()
    logger.info("‚úÖ AccountManager –≥–æ—Ç–æ–≤!")
    return manager


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI (—Ç—Ä–µ–±—É—é—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)
def get_traffic_stats() -> List[Tuple[str, str, str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    if _account_manager:
        return _account_manager.get_traffic_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444")]


def get_sales_stats() -> List[Tuple[str, str, str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    if _account_manager:
        return _account_manager.get_sales_stats()
    return [("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "0", "#EF4444")]


def get_table_data(category: str, limit: int = 50) -> List[List[str]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    if _account_manager:
        return _account_manager.get_table_data(category, limit)
    return []

