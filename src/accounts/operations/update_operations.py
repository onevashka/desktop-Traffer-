"""
–û–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import asyncio
from loguru import logger
from typing import Dict


class AccountUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, account_manager):
        self.manager = account_manager

    async def refresh_all_accounts(self) -> Dict[str, int]:
        """
        –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        old_traffic_count = len(self.manager.traffic_accounts)
        old_sales_count = len(self.manager.sales_accounts)

        # –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
        await self.manager.scan_all_folders()

        # –ù–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        new_traffic_count = len(self.manager.traffic_accounts)
        new_sales_count = len(self.manager.sales_accounts)

        results = {
            'old_traffic': old_traffic_count,
            'new_traffic': new_traffic_count,
            'old_sales': old_sales_count,
            'new_sales': new_sales_count,
            'traffic_diff': new_traffic_count - old_traffic_count,
            'sales_diff': new_sales_count - old_sales_count
        }

        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        logger.info(f"   –¢—Ä–∞—Ñ–∏–∫: {old_traffic_count} ‚Üí {new_traffic_count} ({results['traffic_diff']:+d})")
        logger.info(f"   –ü—Ä–æ–¥–∞–∂–∏: {old_sales_count} ‚Üí {new_sales_count} ({results['sales_diff']:+d})")

        return results

    async def refresh_category(self, category: str) -> int:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

        if category == "traffic":
            storage = self.manager.traffic_accounts
            folders = self.manager.traffic_folders
        elif category == "sales":
            storage = self.manager.sales_accounts
            folders = self.manager.sales_folders
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return 0

        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage.clear()

        # –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        total_count = 0
        for status, folder_path in folders.items():
            count = await self.manager._scan_folder(folder_path, category, status)
            total_count += count

        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {total_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return total_count
