"""
–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

from typing import List, Dict, Tuple
from pathlib import Path
from loguru import logger
import shutil


class AccountMover:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, account_manager):
        self.manager = account_manager

    def get_available_destinations(self, current_category: str, current_status: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
        """
        destinations = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        for status, folder_path in self.manager.traffic_folders.items():
            if not (current_category == "traffic" and current_status == status):
                destinations.append({
                    'category': 'traffic',
                    'status': status,
                    'display_name': f"üöÄ –¢—Ä–∞—Ñ–∏–∫ ‚Üí {self._get_status_display(status)}",
                    'folder_path': folder_path
                })

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –ø—Ä–æ–¥–∞–∂
        for status, folder_path in self.manager.sales_folders.items():
            if not (current_category == "sales" and current_status == status):
                destinations.append({
                    'category': 'sales',
                    'status': status,
                    'display_name': f"üí∞ –ü—Ä–æ–¥–∞–∂–∏ ‚Üí {self._get_status_display(status)}",
                    'folder_path': folder_path
                })

        return destinations

    def move_accounts(self, account_names: List[str], source_category: str,
                      target_category: str, target_status: str) -> Dict[str, bool]:
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏.

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∏–º—è_–∞–∫–∫–∞—É–Ω—Ç–∞: —É—Å–ø–µ—Ö_–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è}
        """
        source_storage = self._get_accounts_storage(source_category)
        target_storage = self._get_accounts_storage(target_category)
        target_folder = self._get_folder_path(target_category, target_status)

        if not all([source_storage, target_storage, target_folder]):
            return {name: False for name in account_names}

        results = {}

        for account_name in account_names:
            try:
                success = self._move_single_account(
                    account_name, source_storage, target_storage,
                    target_folder, target_category, target_status
                )
                results[account_name] = success
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {account_name}: {e}")
                results[account_name] = False

        return results

    def _move_single_account(self, account_name: str, source_storage: dict,
                             target_storage: dict, target_folder: Path,
                             target_category: str, target_status: str) -> bool:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç"""
        if account_name not in source_storage:
            logger.warning(f"‚ö†Ô∏è  –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
            return False

        account_data = source_storage[account_name]
        account = account_data.account

        # –ü—É—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        old_session = account.session_path
        old_json = account.json_path

        # –ü—É—Ç–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        new_session = target_folder / old_session.name
        new_json = target_folder / old_json.name

        logger.info(f"üì¶ –ü–µ—Ä–µ–º–µ—â–∞–µ–º {account_name}: {old_session.parent.name} ‚Üí {target_folder.name}")

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_folder.mkdir(parents=True, exist_ok=True)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
        shutil.move(str(old_session), str(new_session))
        shutil.move(str(old_json), str(new_json))

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ Account
        account.session_path = new_session
        account.json_path = new_json

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        account_data.category = target_category
        account_data.status = target_status

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–µ–∂–¥—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏
        del source_storage[account_name]
        target_storage[account_name] = account_data

        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω")
        return True

    def _get_accounts_storage(self, category: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if category == "traffic":
            return self.manager.traffic_accounts
        elif category == "sales":
            return self.manager.sales_accounts
        return None

    def _get_folder_path(self, category: str, status: str) -> Path:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ"""
        if category == "traffic":
            return self.manager.traffic_folders.get(status)
        elif category == "sales":
            return self.manager.sales_folders.get(status)
        return None

    def _get_status_display(self, status: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_names = {
            "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ",
            "dead": "–ú–µ—Ä—Ç–≤—ã–µ",
            "frozen": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ",
            "invalid": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
            "registration": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "ready_tdata": "TData –≥–æ—Ç–æ–≤—ã–µ",
            "ready_sessions": "Session –≥–æ—Ç–æ–≤—ã–µ",
            "middle": "–°—Ä–µ–¥–Ω–∏–µ"
        }
        return status_names.get(status, status)