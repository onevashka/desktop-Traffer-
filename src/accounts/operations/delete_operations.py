"""
–û–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

from typing import List, Dict
from pathlib import Path
from loguru import logger


class AccountDeleter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, account_manager):
        """
        account_manager: –°—Å—ã–ª–∫–∞ –Ω–∞ AccountManager –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º
        """
        self.manager = account_manager

    def delete_accounts(self, account_names: List[str], category: str) -> Dict[str, bool]:
        """
        –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

        Args:
            account_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ("traffic" –∏–ª–∏ "sales")

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∏–º—è_–∞–∫–∫–∞—É–Ω—Ç–∞: —É—Å–ø–µ—Ö_—É–¥–∞–ª–µ–Ω–∏—è}
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        accounts_storage = self._get_accounts_storage(category)
        if not accounts_storage:
            return {name: False for name in account_names}

        results = {}

        for account_name in account_names:
            try:
                success = self._delete_single_account(account_name, accounts_storage, category)
                results[account_name] = success
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {account_name}: {e}")
                results[account_name] = False

        return results

    def get_deletion_info(self, account_names: List[str], category: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        """
        accounts_storage = self._get_accounts_storage(category)
        if not accounts_storage:
            return []

        accounts_info = []

        for account_name in account_names:
            if account_name in accounts_storage:
                account_data = accounts_storage[account_name]
                info = account_data.info

                accounts_info.append({
                    'name': account_name,
                    'full_name': info.get('full_name', '?'),
                    'phone': info.get('phone', '?'),
                    'status': account_data.status,
                    'category': category,
                    'session_file': str(account_data.account.session_path),
                    'json_file': str(account_data.account.json_path)
                })

        return accounts_info

    def _get_accounts_storage(self, category: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if category == "traffic":
            return self.manager.traffic_accounts
        elif category == "sales":
            return self.manager.sales_accounts
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return None

    def _delete_single_account(self, account_name: str, accounts_storage: dict, category: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if account_name not in accounts_storage:
            logger.warning(f"‚ö†Ô∏è  –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {category}")
            return False

        account_data = accounts_storage[account_name]
        account = account_data.account

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        session_file = account.session_path
        json_file = account.json_path

        logger.info(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {account_name} –∏–∑ {category}")
        logger.debug(f"   Session: {session_file}")
        logger.debug(f"   JSON: {json_file}")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        files_deleted = 0
        if session_file.exists():
            session_file.unlink()
            files_deleted += 1
            logger.debug(f"   ‚úÖ Session —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        if json_file.exists():
            json_file.unlink()
            files_deleted += 1
            logger.debug(f"   ‚úÖ JSON —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del accounts_storage[account_name]

        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} —É–¥–∞–ª–µ–Ω ({files_deleted} —Ñ–∞–π–ª–æ–≤)")
        return True