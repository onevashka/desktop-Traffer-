# src/accounts/operations/archive_operations.py
"""
–û–ø–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import shutil
import subprocess
from pathlib import Path
from typing import List, Dict
from loguru import logger
from datetime import datetime


class AccountArchiver:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, account_manager):
        self.manager = account_manager
        self.archive_base_path = Path("–ê—Ä—Ö–∏–≤—ã")
        self.archive_base_path.mkdir(exist_ok=True)

    def archive_accounts(self, account_names: List[str], category: str,
                         archive_name: str, archive_format: str) -> Dict[str, any]:
        """
        –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–∞–ø–∫–∏ –∏ –∞—Ä—Ö–∏–≤–∞

        Args:
            account_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            archive_name: –ò–º—è –∞—Ä—Ö–∏–≤–∞
            archive_format: –§–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞ ('zip' –∏–ª–∏ 'rar')

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é {len(account_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            logger.info(f"   –ò–º—è –∞—Ä—Ö–∏–≤–∞: {archive_name}")
            logger.info(f"   –§–æ—Ä–º–∞—Ç: {archive_format}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            accounts_info = self.get_archive_info(account_names, category)
            if not accounts_info:
                return {
                    'success': False,
                    'message': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏',
                    'archived_count': 0
                }

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            temp_folder = self.archive_base_path / archive_name
            temp_folder.mkdir(parents=True, exist_ok=True)

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            copied_count = self._copy_account_files(accounts_info, temp_folder)

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            archive_path = self._create_archive(temp_folder, archive_name, archive_format)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            shutil.rmtree(temp_folder)

            logger.info(f"‚úÖ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}")
            logger.info(f"   –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {copied_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            return {
                'success': True,
                'message': f'–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path.name}',
                'archive_path': str(archive_path),
                'archived_count': copied_count,
                'archive_size': self._get_file_size(archive_path)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {str(e)}',
                'archived_count': 0
            }

    def get_archive_info(self, account_names: List[str], category: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
        accounts_storage = self._get_accounts_storage(category)
        if not accounts_storage:
            return []

        accounts_info = []
        for account_name in account_names:
            if account_name in accounts_storage:
                account_data = accounts_storage[account_name]
                info = account_data.info

                accounts_info.append({
                    'name': account_name,
                    'full_name': info.get('full_name', '?'),
                    'phone': info.get('phone', '?'),
                    'status': account_data.status,
                    'category': category,
                    'session_file': str(account_data.account.session_path),
                    'json_file': str(account_data.account.json_path)
                })

        return accounts_info

    def _copy_account_files(self, accounts_info: List[Dict], temp_folder: Path) -> int:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        copied_count = 0

        for account in accounts_info:
            try:
                session_src = Path(account['session_file'])
                json_src = Path(account['json_file'])

                # –ö–æ–ø–∏—Ä—É–µ–º .session —Ñ–∞–π–ª
                if session_src.exists():
                    session_dst = temp_folder / session_src.name
                    shutil.copy2(session_src, session_dst)
                    logger.debug(f"   üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {session_src.name}")

                # –ö–æ–ø–∏—Ä—É–µ–º .json —Ñ–∞–π–ª
                if json_src.exists():
                    json_dst = temp_folder / json_src.name
                    shutil.copy2(json_src, json_dst)
                    logger.debug(f"   üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {json_src.name}")

                copied_count += 1

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {account['name']}: {e}")
                continue

        logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {copied_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return copied_count

    def _create_archive(self, temp_folder: Path, archive_name: str, archive_format: str) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        archive_path = self.archive_base_path / f"{archive_name}.{archive_format}"

        if archive_format == "zip":
            self._create_zip_archive(temp_folder, archive_path)
        elif archive_format == "rar":
            self._create_rar_archive(temp_folder, archive_path)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞: {archive_format}")

        return archive_path

    def _create_zip_archive(self, source_folder: Path, archive_path: Path):
        """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤"""
        logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤: {archive_path.name}")

        # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è shutil.make_archive
        archive_base = archive_path.with_suffix('')
        shutil.make_archive(str(archive_base), 'zip', source_folder)

        logger.info(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω")

    def _create_rar_archive(self, source_folder: Path, archive_path: Path):
        """–°–æ–∑–¥–∞–µ—Ç RAR –∞—Ä—Ö–∏–≤"""
        logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º RAR –∞—Ä—Ö–∏–≤: {archive_path.name}")

        # –ò—â–µ–º WinRAR
        winrar_exe = self._find_winrar()
        if not winrar_exe:
            raise Exception("WinRAR –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RAR –∞—Ä—Ö–∏–≤–∞
        cmd = [
            str(winrar_exe),
            "a",  # –î–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤
            "-r",  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            "-ep1",  # –ò—Å–∫–ª—é—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
            str(archive_path),
            str(source_folder / "*")
        ]

        logger.debug(f"   –ö–æ–º–∞–Ω–¥–∞ WinRAR: {' '.join(cmd)}")

        result = subprocess.run(cmd, capture_output=True, text=True, cwd=str(source_folder.parent))

        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WinRAR: {result.stderr}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RAR –∞—Ä—Ö–∏–≤–∞: {result.stderr}")

        logger.info(f"‚úÖ RAR –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω")

    def _find_winrar(self) -> Path:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª WinRAR"""
        winrar_paths = [
            Path(r"C:\Program Files\WinRAR\WinRAR.exe"),
            Path(r"C:\Program Files (x86)\WinRAR\WinRAR.exe"),
            Path(r"C:\Program Files\WinRAR\Rar.exe"),
            Path(r"C:\Program Files (x86)\WinRAR\Rar.exe")
        ]

        for path in winrar_paths:
            if path.exists():
                logger.debug(f"   –ù–∞–π–¥–µ–Ω WinRAR: {path}")
                return path

        return None

    def _get_file_size(self, file_path: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            size = file_path.stat().st_size

            if size < 1024:
                return f"{size} B"
            elif size < 1024 * 1024:
                return f"{size / 1024:.1f} KB"
            elif size < 1024 * 1024 * 1024:
                return f"{size / (1024 * 1024):.1f} MB"
            else:
                return f"{size / (1024 * 1024 * 1024):.1f} GB"
        except:
            return "? KB"

    def _get_accounts_storage(self, category: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if category == "traffic":
            return self.manager.traffic_accounts
        elif category == "sales":
            return self.manager.sales_accounts
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return None

    def check_winrar_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WinRAR"""
        return self._find_winrar() is not None

    def get_archive_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤"""
        archives = []

        try:
            for archive_file in self.archive_base_path.glob("*"):
                if archive_file.is_file() and archive_file.suffix.lower() in ['.zip', '.rar']:
                    archives.append({
                        'name': archive_file.name,
                        'path': str(archive_file),
                        'size': self._get_file_size(archive_file),
                        'created': datetime.fromtimestamp(archive_file.stat().st_mtime),
                        'format': archive_file.suffix.lower()[1:]  # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
                    })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        archives.sort(key=lambda x: x['created'], reverse=True)

        return archives