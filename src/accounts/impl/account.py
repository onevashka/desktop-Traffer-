# TeleCRM/core/account.py
import asyncio

import phonenumbers
import datetime
from datetime import timezone
from pathlib import Path
from telethon import TelegramClient
from telethon.errors import (
    SessionRevokedError, AuthKeyUnregisteredError,
    UserDeactivatedBanError, UserDeactivatedError
)
from loguru import logger

from src.accounts.impl.utils import load_json_data, save_json_data
from src.entities import ProxyTelethon
from telethon import functions


class Account:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Telethon TelegramClient –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ –∫ .session –∏ API-–¥–∞–Ω–Ω—ã–µ.
    """
    def __init__(self, session_path: Path, json_path: Path):
        """
        session_path ‚Äî –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É session
        json_path ‚Äî –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É json
        """
        self.session_path = session_path
        self.json_path = json_path
        self.account_data: dict = load_json_data(self.json_path)

        self._sync_session_name()

        self.name = self.account_data.get("session")

        self.client = None

    async def create_client(self):
        """
        –õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TelegramClient.
        """
        if self.client:
            return

        cfg = self.account_data
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç —Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        from src.proxies.manager import get_proxy_for_account
        proxy = get_proxy_for_account(self.name)

        if proxy:
            logger.debug(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {self.name}: {proxy['addr']}:{proxy['port']}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {self.name}, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é")


        # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏
        self.client = TelegramClient(
            session=str(self.session_path),
            api_id=int(cfg.get('app_id')),
            api_hash=cfg.get('app_hash'),
            proxy=(proxy.get('proxy_type'), proxy.get('addr'), proxy.get('port'), proxy.get('rdns'), proxy.get('username'), proxy.get('password')),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            lang_code=cfg.get('lang_code', 'en'),
            device_model=cfg.get('device'),
            app_version=cfg.get('app_version'),
            system_version=cfg.get('sdk'),
            system_lang_code=cfg.get('system_lang_code', 'en-US'),
        )

        if lp := cfg.get('lang_pack'):
            self.client._init_request.lang_pack = lp


    async def connect(self) -> bool:
        """
        –ö–æ–Ω–Ω–µ–∫—Ç–∏—Ç –∫–ª–∏–µ–Ω—Ç.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
        """

        try:

            await self.client.connect()
            if await self.client.is_user_authorized():
                return True
            else:
                return False
        except (SessionRevokedError, AuthKeyUnregisteredError,) as e:
            logger.error(
                f"[{self.name}] C–µ—Å—Å–∏—è (–∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) –±—ã–ª–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Telegram –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return False

        except (UserDeactivatedBanError, UserDeactivatedError) as e:
            logger.error(f"[{self.name}] –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return False

        except Exception as e:
            logger.error(f"[{self.name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—á—é–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {e}")
            return False

    async def disconnect(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç.
        """
        try:
            await self.client.disconnect()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False

    async def join(self, link: str):
        """
        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É/–∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ

        Args:
            link: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª

        Returns:
            chat_entity - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ, –∏–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏
        """
        from telethon.tl.functions.messages import ImportChatInviteRequest
        from telethon.tl.functions.channels import JoinChannelRequest
        from telethon.errors import UserAlreadyParticipantError

        try:
            result = await self.client(functions.help.GetAppConfigRequest(hash=0))
            frozen, details = self.is_frozen(result)
            if frozen:
                return "FROZEN_ACCOUNT"

            if not self.client or not await self.client.is_user_authorized():
                logger.error(f"[{self.name}] –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return "NOT_CONNECTED"

            entity = await self.client.get_entity(link)

            # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª
            if link.startswith("https://t.me/+"):
                invite_hash = link.split("+")[1]
                result = await self.client(ImportChatInviteRequest(invite_hash))
                logger.info(f"[{self.name}] –í—Å—Ç—É–ø–∏–ª –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç {link}")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                if hasattr(result, 'chats') and result.chats:
                    chat_entity = result.chats[0]
                    return "SUCCESS"
                return "SUCCESS"

            # –ü—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
                if link.startswith("https://t.me/"):
                    username = link.split("/")[-1]
                elif link.startswith("@"):
                    username = link[1:]
                else:
                    username = link

                result = await self.client(JoinChannelRequest(username))

                # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞
                try:
                    chat_entity = await self.client.get_entity(username)
                    return "SUCCESS"
                except:
                    return "SUCCESS"

        except UserAlreadyParticipantError:
            logger.warning(f"[{self.name}] –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ {link}")

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity —á–∞—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫
            try:
                if link.startswith("https://t.me/+"):
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–ª–æ–∂–Ω–µ–µ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º
                    return "ALREADY_PARTICIPANT"
                else:
                    # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å entity
                    username = link.split("/")[-1] if "/" in link else link
                    username = username[1:] if username.startswith("@") else username
                    chat_entity = await self.client.get_entity(username)
                    return chat_entity
            except:
                return "ALREADY_PARTICIPANT"

        except Exception as e:
            error_text = str(e)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if "FROZEN_METHOD_INVALID" in error_text:
                return "FROZEN_ACCOUNT"

            elif "Nobody is using this username" in error_text or "username is unacceptable" in error_text:
                logger.error(f"[{self.name}] –ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
                return "CHAT_NOT_FOUND"

            elif "No user has" in error_text:
                logger.warning(f"[{self.name}] –î–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω {link} {e}")
                return "USER_NOT_FOUND"

            elif "successfully requested to join" in error_text:
                logger.warning(f"[{self.name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {link}")
                return "REQUEST_SENT"

            elif "deleted/deactivated" in error_text:
                logger.error(f"[{self.name}] –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return "ACCOUNT_DEACTIVATED"

            elif "key is not registered" in error_text:
                logger.error(f"[{self.name}] –ù–µ–≤–µ—Ä–Ω—ã–π invite hash –¥–ª—è {link}")
                return "INVALID_INVITE"

            elif "flood" in error_text.lower():
                logger.error(f"[{self.name}] –§–ª—É–¥ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ {link}")
                return "FLOOD_WAIT"

            elif "The channel specified is private and you lack permission to access it. Another reason may be that you were banned from it" in error_text:
                logger.error(f"[{self.name}] –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–Ω–µ–µ –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑ –≥—Ä—É–ø–ø—ã {link}")
                return f"ERROR: {error_text[:100]}"

            else:
                logger.error(f"[{self.name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ {link}: {e}")
                return f"ERROR: {error_text[:100]}"

    def _sync_session_name(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'session' –≤ JSON —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞.
        """
        actual_name = self.session_path.stem  # –ß–∏—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        json_session_name = self.account_data.get('session', '')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è session –≤ JSON
        if 'session' not in self.account_data:
            # –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π - —Å–æ–∑–¥–∞–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            logger.debug(f"‚ûï [{actual_name}] –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'session': '{actual_name}'")
            # –ù–ï –û–ë–ù–û–í–õ–Ø–ï–ú self.account_data –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ update_json
            self.update_json(session=actual_name)

        elif json_session_name != actual_name:
            # –ï—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –Ω–æ –∏–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
            logger.debug(f"üîÑ [{actual_name}] –û–±–Ω–æ–≤–ª—è–µ–º 'session': '{json_session_name}' -> '{actual_name}'")
            # –ù–ï –û–ë–ù–û–í–õ–Ø–ï–ú self.account_data –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ update_json
            self.update_json(session=actual_name)

        else:
            pass

    async def get_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è session –∏–∑ JSON.
        """
        first = self.account_data.get('first_name', '') or ''
        last = self.account_data.get('last_name', '') or ''
        full_name = (first + ' ' + last).strip()

        # –ë–µ—Ä–µ–º –∏–º—è session –∏–∑ JSON (—É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        session_name = self.account_data.get('session', self.name)

        raw_phone = (self.account_data.get('phone', '') or '').strip()

        parse_phone = raw_phone
        if parse_phone and not parse_phone.startswith('+'):
            parse_phone = '+' + parse_phone

        geo = ''
        if parse_phone:
            try:
                import phonenumbers
                pn = phonenumbers.parse(parse_phone, None)
                geo = phonenumbers.region_code_for_number(pn) or ''
            except Exception:
                geo = ''

        return {
            'full_name': full_name,
            'session_name': session_name,  # –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ JSON
            'phone': raw_phone,
            'geo': geo
        }

    def update_json(self, **fields) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª—é—á–∏ –≤ self.account_data –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON-—Ñ–∞–π–ª.
        –ü—Ä–∏–º–µ—Ä: self.update_json(session='12345', role='admin')
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –∏–ª–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        changed = False
        for k, v in fields.items():
            if self.account_data.get(k) != v:
                self.account_data[k] = v
                changed = True

        if changed:
            save_json_data(self.json_path, self.account_data)

    def is_frozen(self, app_config) -> tuple:
        if not app_config or not hasattr(app_config, 'config') or not hasattr(app_config.config, 'value'):
            return False, None

        values = {v.key: v.value for v in app_config.config.value}

        since = values.get("freeze_since_date")
        until = values.get("freeze_until_date")
        appeal = values.get("freeze_appeal_url")

        def to_datetime(val):
            try:
                return datetime.fromtimestamp(val.value, tz=timezone.utc)
            except Exception:
                return None

        if since or until or appeal:
            result = {
                "since": to_datetime(since) if since else None,
                "until": to_datetime(until) if until else None,
                "appeal_url": appeal.value if hasattr(appeal, 'value') else str(appeal)
            }
            return True, result

        return False, None

