# src/entities/modules/inviter.py
"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
"""

from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Optional


class UserStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞"""
    CLEAN = "clean"  # –ß–∏—Å—Ç—ã–π, –≥–æ—Ç–æ–≤ –∫ –∏–Ω–≤–∞–π—Ç—É
    INVITED = "invited"  # –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω
    ERROR = "error"  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–π—Ç–µ
    PRIVACY = "privacy"  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    ALREADY_IN = "already_in"  # –£–∂–µ –≤ —á–∞—Ç–µ
    SPAM_BLOCK = "spam_block"  # –°–ø–∞–º–±–ª–æ–∫
    NOT_FOUND = "not_found"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    FLOOD_WAIT = "flood_wait"  # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–ª—É–¥–∞


@dataclass
class InviteUser:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞"""
    username: str  # Username –±–µ–∑ @
    status: UserStatus = UserStatus.CLEAN
    last_attempt: Optional[datetime] = None
    error_message: Optional[str] = None

    def to_file_format(self) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        if self.status == UserStatus.CLEAN:
            return f"@{self.username}"

        status_map = {
            UserStatus.INVITED: "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω",
            UserStatus.ERROR: f"‚ùå –û—à–∏–±–∫–∞",
            UserStatus.PRIVACY: "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
            UserStatus.ALREADY_IN: "üë• –£–∂–µ –≤ —á–∞—Ç–µ",
            UserStatus.SPAM_BLOCK: "üö´ –°–ø–∞–º–±–ª–æ–∫",
            UserStatus.NOT_FOUND: "‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω",
            UserStatus.FLOOD_WAIT: "‚è≥ –§–ª—É–¥"
        }

        status_text = status_map.get(self.status, str(self.status.value))
        if self.error_message and self.status == UserStatus.ERROR:
            status_text = f"{status_text}: {self.error_message}"

        return f"@{self.username}: {status_text}"


@dataclass
class AccountStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
    name: str
    invites: int = 0
    errors: int = 0
    spam_blocks: int = 0
    consecutive_spam: int = 0
    status: str = "ready"


@dataclass
class ChatStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
    name: str
    processed: int = 0
    success: int = 0
    errors: int = 0
    consecutive_errors: int = 0


@dataclass
class InviterConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    invite_type: str = "classic"
    threads_per_chat: int = 2

    # –õ–∏–º–∏—Ç—ã
    success_per_chat: int = 0  # 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    success_per_account: int = 0

    # –ó–∞–¥–µ—Ä–∂–∫–∏
    delay_after_start: int = 0
    delay_between: int = 30

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    acc_spam_limit: int = 3
    acc_error_limit: int = 10

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–∞—Ç–æ–≤
    chat_error_limit: int = 3

    @classmethod
    def from_dict(cls, data: dict) -> 'InviterConfig':
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**{k: v for k, v in data.items() if hasattr(cls, k)})