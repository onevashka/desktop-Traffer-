# src/services/account_report_service.py
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∏–Ω–≤–∞–π—Ç–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ green_people
"""

import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple
from loguru import logger
from src.accounts.impl.utils import load_json_data
from paths import WORK_TRAFFER_FOLDER


class AccountReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∏–Ω–≤–∞–π—Ç–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self):
        self.base_folder = WORK_TRAFFER_FOLDER
        self.folder_mapping = {
            "–ê–∫–∫–∞—É–Ω—Ç—ã": self.base_folder / "–ê–∫–∫–∞—É–Ω—Ç—ã",
            "–°–ø–∏—Å–∞–Ω–Ω—ã–µ": self.base_folder / "–°–ø–∏—Å–∞–Ω–Ω—ã–µ",
            "–ú–µ—Ä—Ç–≤—ã–µ": self.base_folder / "–ú–µ—Ä—Ç–≤—ã–µ",
            "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ": self.base_folder / "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ",
            "–°–ø–∞–º_–±–ª–æ–∫": self.base_folder / "–°–ø–∞–º_–±–ª–æ–∫",
            "–ë–ª–æ–∫_–∏–Ω–≤–∞–π—Ç–æ–≤": self.base_folder / "–ë–ª–æ–∫_–∏–Ω–≤–∞–π—Ç–æ–≤",
            "–£—Å–ø–µ—à–Ω–æ_–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ": self.base_folder / "–£—Å–ø–µ—à–Ω–æ_–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ",
            "–§–ª—É–¥": self.base_folder / "–§–ª—É–¥"
        }

    def scan_all_accounts(self) -> Dict[str, List[Tuple[str, int]]]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        Returns:
            Dict[folder_name, List[Tuple[account_name, green_people_count]]]
        """
        report_data = {}
        total_scanned = 0
        total_with_invites = 0

        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞...")

        for folder_name, folder_path in self.folder_mapping.items():
            if not folder_path.exists():
                logger.debug(f"üìÅ –ü–∞–ø–∫–∞ {folder_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
                continue

            logger.info(f"üìÇ –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder_name}")
            accounts_data = self._scan_folder(folder_path)

            if accounts_data:
                report_data[folder_name] = accounts_data
                folder_total = len(accounts_data)
                folder_with_invites = sum(1 for _, count in accounts_data if count > 0)

                total_scanned += folder_total
                total_with_invites += folder_with_invites

                logger.info(f"‚úÖ {folder_name}: {folder_total} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {folder_with_invites} —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏")
            else:
                logger.debug(f"üìÇ {folder_name}: –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        logger.success(f"üéØ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_scanned} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {total_with_invites} —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏")
        return report_data

    def _scan_folder(self, folder_path: Path) -> List[Tuple[str, int]]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        Returns:
            List[Tuple[account_name, green_people_count]]
        """
        accounts_data = []

        try:
            # –ò—â–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            json_files = list(folder_path.glob("*.json"))

            for json_file in json_files:
                try:
                    account_name = json_file.stem

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account_data = load_json_data(json_file)

                    if account_data:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ green_people
                        green_people = account_data.get('green_people', 0)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                        if not isinstance(green_people, (int, float)):
                            green_people = 0
                        else:
                            green_people = int(green_people)

                        accounts_data.append((account_name, green_people))

                        if green_people > 0:
                            logger.debug(f"  üìä {account_name}: {green_people} –∏–Ω–≤–∞–π—Ç–æ–≤")

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {json_file.name}: {e}")
                    continue

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_path}: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω–≤–∞–π—Ç–æ–≤ (—É–±—ã–≤–∞–Ω–∏–µ)
        accounts_data.sort(key=lambda x: x[1], reverse=True)
        return accounts_data

    def generate_report(self, output_path: Path = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º

        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø–∞–ø–∫—É –ò–Ω–≤–∞–π—Ç)

        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        """
        try:
            logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º...")

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            report_data = self.scan_all_accounts()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if output_path is None:
                from paths import WORK_TRAFFER_FOLDER
                reports_folder = WORK_TRAFFER_FOLDER / "–ò–Ω–≤–∞–π—Ç" / "–û—Ç—á–µ—Ç—ã_–ø–æ_–∞–∫–∫–∞—É–Ω—Ç–∞–º"
                reports_folder.mkdir(parents=True, exist_ok=True)

                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_path = reports_folder / f"–û—Ç—á–µ—Ç_–ø–æ_–∞–∫–∫–∞—É–Ω—Ç–∞–º_{timestamp}.txt"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            report_content = self._build_report_content(report_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(report_content)

            logger.success(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            return str(output_path)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            raise

    def _build_report_content(self, report_data: Dict[str, List[Tuple[str, int]]]) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞"""
        lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        lines.append("üìä –û–¢–ß–ï–¢ –ü–û –ò–ù–í–ê–ô–¢–ê–ú –ê–ö–ö–ê–£–ù–¢–û–í")
        lines.append("=" * 60)
        lines.append(f"üïê –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}")
        lines.append(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.base_folder}")
        lines.append("=" * 60)
        lines.append("")

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_accounts = sum(len(accounts) for accounts in report_data.values())
        total_invites = sum(sum(count for _, count in accounts) for accounts in report_data.values())
        accounts_with_invites = sum(sum(1 for _, count in accounts if count > 0) for accounts in report_data.values())

        lines.append("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        lines.append(f"üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts:,}")
        lines.append(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏: {accounts_with_invites:,}")
        lines.append(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–π—Ç–æ–≤: {total_invites:,}")
        if total_accounts > 0:
            avg_invites = total_invites / total_accounts
            lines.append(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∏–Ω–≤–∞–π—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {avg_invites:.1f}")
        lines.append("")
        lines.append("=" * 60)
        lines.append("")

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º
        for folder_name, accounts in report_data.items():
            if not accounts:
                continue

            folder_total = len(accounts)
            folder_invites = sum(count for _, count in accounts)
            folder_with_invites = sum(1 for _, count in accounts if count > 0)

            lines.append(f"üìÇ {folder_name.upper()}:")
            lines.append(f"   üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {folder_total}")
            lines.append(f"   ‚úÖ –° –∏–Ω–≤–∞–π—Ç–∞–º–∏: {folder_with_invites}")
            lines.append(f"   üéØ –í—Å–µ–≥–æ –∏–Ω–≤–∞–π—Ç–æ–≤: {folder_invites}")
            lines.append("")

            if folder_with_invites > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏
                for account_name, invite_count in accounts:
                    if invite_count > 0:
                        lines.append(f"   {account_name} - –ø—Ä–∏–≥–ª–∞—Å–∏–ª {invite_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                lines.append("")

                # –¢–û–ü-3 –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫–µ
                top_accounts = accounts[:3]
                if any(count > 0 for _, count in top_accounts):
                    lines.append(f"   üèÜ –¢–û–ü-3 –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞–ø–∫–∏:")
                    for i, (account_name, invite_count) in enumerate(top_accounts, 1):
                        if invite_count > 0:
                            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                            lines.append(f"   {medal} {account_name}: {invite_count} –∏–Ω–≤–∞–π—Ç–æ–≤")
                    lines.append("")
            else:
                lines.append("   ‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏")
                lines.append("")

            lines.append("-" * 40)
            lines.append("")

        # –¢–û–ü –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—â–∏–π
        all_accounts = []
        for accounts in report_data.values():
            all_accounts.extend(accounts)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω–≤–∞–π—Ç–æ–≤
        all_accounts.sort(key=lambda x: x[1], reverse=True)
        top_performers = [acc for acc in all_accounts[:10] if acc[1] > 0]

        if top_performers:
            lines.append("üèÜ –¢–û–ü-10 –ê–ö–ö–ê–£–ù–¢–û–í –ü–û –ò–ù–í–ê–ô–¢–ê–ú:")
            lines.append("")
            for i, (account_name, invite_count) in enumerate(top_performers, 1):
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i:2d}."
                lines.append(f"{medal} {account_name}: {invite_count} –∏–Ω–≤–∞–π—Ç–æ–≤")
            lines.append("")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        lines.append("=" * 60)
        lines.append("üìä –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
        lines.append("")

        if accounts_with_invites > 0:
            avg_per_active = total_invites / accounts_with_invites
            lines.append(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∏–Ω–≤–∞–π—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {avg_per_active:.1f}")

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
            groups = {
                "–°—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–µ (50+ –∏–Ω–≤–∞–π—Ç–æ–≤)": 0,
                "–ê–∫—Ç–∏–≤–Ω—ã–µ (10-49 –∏–Ω–≤–∞–π—Ç–æ–≤)": 0,
                "–£–º–µ—Ä–µ–Ω–Ω—ã–µ (1-9 –∏–Ω–≤–∞–π—Ç–æ–≤)": 0,
                "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (0 –∏–Ω–≤–∞–π—Ç–æ–≤)": 0
            }

            for accounts in report_data.values():
                for _, count in accounts:
                    if count >= 50:
                        groups["–°—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–µ (50+ –∏–Ω–≤–∞–π—Ç–æ–≤)"] += 1
                    elif count >= 10:
                        groups["–ê–∫—Ç–∏–≤–Ω—ã–µ (10-49 –∏–Ω–≤–∞–π—Ç–æ–≤)"] += 1
                    elif count >= 1:
                        groups["–£–º–µ—Ä–µ–Ω–Ω—ã–µ (1-9 –∏–Ω–≤–∞–π—Ç–æ–≤)"] += 1
                    else:
                        groups["–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (0 –∏–Ω–≤–∞–π—Ç–æ–≤)"] += 1

            lines.append("")
            lines.append("üë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í:")
            for group_name, count in groups.items():
                if total_accounts > 0:
                    percentage = (count / total_accounts) * 100
                    lines.append(f"   {group_name}: {count} ({percentage:.1f}%)")

        lines.append("")
        lines.append("=" * 60)
        lines.append("ü§ñ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        return '\n'.join(lines)

    def get_summary_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            report_data = self.scan_all_accounts()

            total_accounts = sum(len(accounts) for accounts in report_data.values())
            total_invites = sum(sum(count for _, count in accounts) for accounts in report_data.values())
            accounts_with_invites = sum(
                sum(1 for _, count in accounts if count > 0) for accounts in report_data.values())

            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø –∞–∫–∫–∞—É–Ω—Ç
            all_accounts = []
            for accounts in report_data.values():
                all_accounts.extend(accounts)

            top_account = max(all_accounts, key=lambda x: x[1]) if all_accounts else ("", 0)

            return {
                'total_accounts': total_accounts,
                'total_invites': total_invites,
                'accounts_with_invites': accounts_with_invites,
                'top_account_name': top_account[0],
                'top_account_invites': top_account[1],
                'folders_scanned': len([f for f, accounts in report_data.items() if accounts])
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_accounts': 0,
                'total_invites': 0,
                'accounts_with_invites': 0,
                'top_account_name': '',
                'top_account_invites': 0,
                'folders_scanned': 0
            }