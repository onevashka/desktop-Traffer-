"""
–í–∏–¥–∂–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –°–¢–†–û–ì–û –í–ù–£–¢–†–ò –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ù–ï –ü–û–í–ï–†–• –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
"""

from PySide6.QtWidgets import (
    QWidget, QHBoxLayout, QVBoxLayout, QLabel, QPushButton,
    QGraphicsOpacityEffect, QGraphicsDropShadowEffect
)
from PySide6.QtCore import (
    Qt, QPropertyAnimation, QEasingCurve, QTimer,
    QRect, Signal, QParallelAnimationGroup, QSize
)
from PySide6.QtGui import QColor
from log_config import logger


class NotificationWidget(QWidget):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –í–ù–£–¢–†–ï–ù–ù–ò–ô —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ)"""

    # –°–∏–≥–Ω–∞–ª—ã
    clicked = Signal()
    closed = Signal()

    # –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    SUCCESS = "success"
    ERROR = "error"
    WARNING = "warning"
    INFO = "info"

    def __init__(self, title, message, notification_type=INFO, duration=4000, parent=None):
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∫–∞–∫ –û–ë–´–ß–ù–´–ô –≤–∏–¥–∂–µ—Ç —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º (–Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
        super().__init__(parent)

        self.notification_type = notification_type
        self.duration = duration
        self.is_closing = False

        # –†–∞–∑–º–µ—Ä—ã
        self.notification_width = 380
        self.notification_height = 90

        # –£–ë–ò–†–ê–ï–ú –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞ - —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—ã—á–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.setFixedSize(self.notification_width, self.notification_height)

        # –ü–æ–¥–Ω–∏–º–∞–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
        self.raise_()

        # –°–æ–∑–¥–∞–µ–º UI
        self._create_ui(title, message)
        self._setup_animations()
        self._apply_solid_styles()

        # –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
        if duration > 0:
            QTimer.singleShot(duration, self.animate_out)

    def _create_ui(self, title, message):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.container = QWidget()
        self.container.setObjectName("NotificationContainer")

        layout = QHBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(self.container)

        # Layout –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_layout = QHBoxLayout(self.container)
        container_layout.setContentsMargins(12, 10, 12, 10)
        container_layout.setSpacing(10)

        # –ò–∫–æ–Ω–∫–∞
        self.icon_label = QLabel()
        self.icon_label.setFixedSize(20, 20)
        self.icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self._set_icon()

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        text_widget = QWidget()
        text_layout = QVBoxLayout(text_widget)
        text_layout.setContentsMargins(0, 0, 0, 0)
        text_layout.setSpacing(3)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel(title)
        self.title_label.setObjectName("NotificationTitle")

        # –°–æ–æ–±—â–µ–Ω–∏–µ
        self.message_label = QLabel(message)
        self.message_label.setObjectName("NotificationMessage")
        self.message_label.setWordWrap(True)

        text_layout.addWidget(self.title_label)
        text_layout.addWidget(self.message_label)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_button = QPushButton("√ó")
        self.close_button.setObjectName("NotificationCloseButton")
        self.close_button.setFixedSize(24, 24)
        self.close_button.clicked.connect(self.animate_out)

        # –°–±–æ—Ä–∫–∞ layout
        container_layout.addWidget(self.icon_label)
        container_layout.addWidget(text_widget, 1)
        container_layout.addWidget(self.close_button)

        # –¢–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(12)
        shadow.setXOffset(2)
        shadow.setYOffset(3)
        shadow.setColor(QColor(0, 0, 0, 100))
        self.container.setGraphicsEffect(shadow)

    def _set_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        icons = {
            self.SUCCESS: "‚úÖ",
            self.ERROR: "‚ùå",
            self.WARNING: "‚ö†Ô∏è",
            self.INFO: "‚ÑπÔ∏è"
        }

        icon_text = icons.get(self.notification_type, "‚ÑπÔ∏è")
        self.icon_label.setText(icon_text)
        self.icon_label.setStyleSheet("font-size: 16px;")

    def _apply_solid_styles(self):
        """–°–¢–ò–õ–ò –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        base_style = """
            QWidget#NotificationContainer {
                border-radius: 8px;
                border: 2px solid #FFFFFF;
            }

            QLabel#NotificationTitle {
                font-size: 12px;
                font-weight: 700;
                margin: 0;
                padding: 4px 8px;
                border-radius: 4px;
                color: #FFFFFF;
                text-shadow: 0 1px 2px rgba(0, 0, 0, 0.7);
            }

            QLabel#NotificationMessage {
                font-size: 10px;
                font-weight: 500;
                margin: 0;
                padding: 4px 8px;
                border-radius: 4px;
                color: #FFFFFF;
                text-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);
                line-height: 1.2;
            }

            QPushButton#NotificationCloseButton {
                background: #FFFFFF;
                border: 1px solid #CCCCCC;
                border-radius: 12px;
                color: #333333;
                font-size: 12px;
                font-weight: bold;
            }

            QPushButton#NotificationCloseButton:hover {
                background: #F5F5F5;
                border: 1px solid #999999;
            }

            QPushButton#NotificationCloseButton:pressed {
                background: #E8E8E8;
            }
        """

        # –Ø–†–ö–ò–ï –ù–ï–ü–†–û–ó–†–ê–ß–ù–´–ï —Ü–≤–µ—Ç–∞
        type_styles = {
            self.SUCCESS: """
                QWidget#NotificationContainer {
                    background: #22C55E;
                    border-color: #16A34A;
                }
                QLabel#NotificationTitle {
                    background: #16A34A;
                }
                QLabel#NotificationMessage {
                    background: #059669;
                }
            """,
            self.ERROR: """
                QWidget#NotificationContainer {
                    background: #EF4444;
                    border-color: #DC2626;
                }
                QLabel#NotificationTitle {
                    background: #DC2626;
                }
                QLabel#NotificationMessage {
                    background: #B91C1C;
                }
            """,
            self.WARNING: """
                QWidget#NotificationContainer {
                    background: #F59E0B;
                    border-color: #D97706;
                }
                QLabel#NotificationTitle {
                    background: #D97706;
                }
                QLabel#NotificationMessage {
                    background: #B45309;
                }
            """,
            self.INFO: """
                QWidget#NotificationContainer {
                    background: #3B82F6;
                    border-color: #2563EB;
                }
                QLabel#NotificationTitle {
                    background: #2563EB;
                }
                QLabel#NotificationMessage {
                    background: #1D4ED8;
                }
            """
        }

        full_style = base_style + type_styles.get(self.notification_type, type_styles[self.INFO])
        self.setStyleSheet(full_style)

    def _setup_animations(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏"""
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¢–û–õ–¨–ö–û –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.opacity_effect = QGraphicsOpacityEffect()
        self.opacity_effect.setOpacity(0.0)
        self.setGraphicsEffect(self.opacity_effect)

        # –ê–Ω–∏–º–∞—Ü–∏–∏
        self.opacity_animation = QPropertyAnimation(self.opacity_effect, b"opacity")
        self.slide_animation = QPropertyAnimation(self, b"geometry")

        # –ì—Ä—É–ø–ø–∞ –∞–Ω–∏–º–∞—Ü–∏–π
        self.animation_group = QParallelAnimationGroup()
        self.animation_group.addAnimation(self.opacity_animation)
        self.animation_group.addAnimation(self.slide_animation)

    def show_at_position(self, x, y):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –í–ù–£–¢–†–ò —Ä–æ–¥–∏—Ç–µ–ª—è"""
        # x, y - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞

        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–ø—Ä–∞–≤–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è)
        start_x = x + 50
        start_rect = QRect(start_x, y, self.notification_width, self.notification_height)
        end_rect = QRect(x, y, self.notification_width, self.notification_height)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        self.setGeometry(start_rect)
        self.show()
        self.raise_()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.opacity_animation.setDuration(200)
        self.opacity_animation.setStartValue(0.0)
        self.opacity_animation.setEndValue(1.0)
        self.opacity_animation.setEasingCurve(QEasingCurve.Type.OutCubic)

        self.slide_animation.setDuration(200)
        self.slide_animation.setStartValue(start_rect)
        self.slide_animation.setEndValue(end_rect)
        self.slide_animation.setEasingCurve(QEasingCurve.Type.OutCubic)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animation_group.start()

        logger.debug(f"üìç –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})")

    def animate_out(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è"""
        if self.is_closing:
            return

        self.is_closing = True
        logger.debug("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        # –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–≤–ø—Ä–∞–≤–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—è)
        current_rect = self.geometry()
        end_rect = QRect(
            current_rect.x() + 50,
            current_rect.y(),
            current_rect.width(),
            current_rect.height()
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        self.opacity_animation.setDuration(150)
        self.opacity_animation.setStartValue(1.0)
        self.opacity_animation.setEndValue(0.0)
        self.opacity_animation.setEasingCurve(QEasingCurve.Type.InCubic)

        self.slide_animation.setDuration(150)
        self.slide_animation.setStartValue(current_rect)
        self.slide_animation.setEndValue(end_rect)
        self.slide_animation.setEasingCurve(QEasingCurve.Type.InCubic)

        # –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
        self.animation_group.finished.connect(self._on_animation_finished)
        self.animation_group.start()

    def _on_animation_finished(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        logger.debug("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.closed.emit()
        self.hide()
        self.deleteLater()

    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.clicked.emit()
        super().mousePressEvent(event)

    def move_to_position(self, x, y):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if self.is_closing:
            return

        current_rect = self.geometry()
        new_rect = QRect(x, y, current_rect.width(), current_rect.height())

        # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        move_animation = QPropertyAnimation(self, b"geometry")
        move_animation.setDuration(150)
        move_animation.setStartValue(current_rect)
        move_animation.setEndValue(new_rect)
        move_animation.setEasingCurve(QEasingCurve.Type.OutCubic)
        move_animation.start()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
        self._move_animation = move_animation