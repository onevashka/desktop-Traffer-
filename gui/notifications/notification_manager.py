"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –°–¢–†–û–ì–û –í–ù–£–¢–†–ò –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

from PySide6.QtCore import QObject, QTimer
from .notification_widget import NotificationWidget  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –ò–ú–Ø
from log_config import logger


class NotificationManager(QObject):  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –ò–ú–Ø
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –°–¢–†–û–ì–û –í–ù–£–¢–†–ò –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, main_window=None, parent=None):
        super().__init__(parent)
        self.main_window = main_window
        self.active_notifications = []
        self.notification_spacing = 10
        self.margin_from_edge = 15

    def set_main_window(self, main_window):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        self.main_window = main_window
        logger.info("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–ù–£–¢–†–ò –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    def show_success(self, title, message, duration=4000):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        return self._show_notification(title, message, NotificationWidget.SUCCESS, duration)

    def show_error(self, title, message, duration=6000):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return self._show_notification(title, message, NotificationWidget.ERROR, duration)

    def show_warning(self, title, message, duration=5000):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        return self._show_notification(title, message, NotificationWidget.WARNING, duration)

    def show_info(self, title, message, duration=4000):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        return self._show_notification(title, message, NotificationWidget.INFO, duration)

    def _show_notification(self, title, message, notification_type, duration):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –í–ù–£–¢–†–ò –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        if not self.main_window:
            logger.warning("‚ùå –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return None

        try:
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –î–û–ß–ï–†–ù–ò–ô –≤–∏–¥–∂–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            notification = NotificationWidget(
                title, message, notification_type, duration, self.main_window
            )
            notification.closed.connect(lambda: self._on_notification_closed(notification))

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –í–ù–£–¢–†–ò –æ–∫–Ω–∞
            x, y = self._calculate_internal_position()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ü–û–°–õ–ï –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
            self.active_notifications.append(notification)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            notification.show_at_position(x, y)

            logger.info(f"üì® –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{title}' –ø–æ–∫–∞–∑–∞–Ω–æ –≤ ({x}, {y})")
            return notification

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return None

    def _calculate_internal_position(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –í–ù–£–¢–†–ò –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            if not self.main_window:
                return 10, 10

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            window_width = self.main_window.width()
            window_height = self.main_window.height()

            notification_width = 380
            notification_height = 90

            # –ü–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –í–ù–£–¢–†–ò –æ–∫–Ω–∞
            x = window_width - notification_width - self.margin_from_edge
            y = self.margin_from_edge

            # –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            visible_count = len([n for n in self.active_notifications if n and not n.is_closing])
            y += visible_count * (notification_height + self.notification_spacing)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–∫–Ω–∞
            max_y = window_height - notification_height - self.margin_from_edge
            if y > max_y:
                y = max_y

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
            if x < self.margin_from_edge:
                x = self.margin_from_edge

            logger.debug(f"üìç –ü–æ–∑–∏—Ü–∏—è –í–ù–£–¢–†–ò –æ–∫–Ω–∞: ({x}, {y}), –≤–∏–¥–∏–º—ã—Ö: {visible_count}")
            return x, y

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 10, 10

    def _on_notification_closed(self, notification):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if notification in self.active_notifications:
                self.active_notifications.remove(notification)
                logger.debug(f"üóëÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å: {len(self.active_notifications)}")

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.active_notifications:
                QTimer.singleShot(50, self._reposition_all_notifications)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _reposition_all_notifications(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –í–ù–£–¢–†–ò –æ–∫–Ω–∞"""
        try:
            if not self.main_window or not self.active_notifications:
                return

            window_width = self.main_window.width()
            window_height = self.main_window.height()

            notification_width = 380
            notification_height = 90

            # –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
            base_x = window_width - notification_width - self.margin_from_edge
            base_y = self.margin_from_edge

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞
            if base_x < self.margin_from_edge:
                base_x = self.margin_from_edge

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            current_y = base_y

            for i, notification in enumerate(self.active_notifications):
                if notification and not notification.is_closing:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ Y
                    max_y = window_height - notification_height - self.margin_from_edge
                    if current_y > max_y:
                        current_y = max_y

                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if hasattr(notification, 'move_to_position'):
                        notification.move_to_position(base_x, current_y)
                    else:
                        notification.move(base_x, current_y)

                    logger.debug(f"üìç –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ ({base_x}, {current_y})")

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º Y –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    current_y += notification_height + self.notification_spacing

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")

    def clear_all(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            notifications_to_close = self.active_notifications[:]
            for notification in notifications_to_close:
                if notification and not notification.is_closing:
                    notification.animate_out()
            logger.info(f"üßπ –ù–∞—á–∞—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ {len(notifications_to_close)} –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    def update_positions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        try:
            self._reposition_all_notifications()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_notification_manager = None


def get_notification_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _notification_manager
    if _notification_manager is None:
        _notification_manager = NotificationManager()  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô –∫–ª–∞—Å—Å
    return _notification_manager


def init_notification_manager(main_window):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        manager = get_notification_manager()
        manager.set_main_window(main_window)

        # –í–ê–ñ–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if hasattr(main_window, 'resizeEvent'):
            original_resize = main_window.resizeEvent

            def new_resize_event(event):
                original_resize(event)
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
                QTimer.singleShot(100, manager.update_positions)

            main_window.resizeEvent = new_resize_event

        logger.info("‚úÖ NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return manager
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationManager: {e}")
        return None


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def show_success(title, message, duration=4000):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –í–ù–£–¢–†–ò –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        result = get_notification_manager().show_success(title, message, duration)
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ success —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None


def show_error(title, message, duration=6000):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –í–ù–£–¢–†–ò –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        result = get_notification_manager().show_error(title, message, duration)
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ error —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None


def show_warning(title, message, duration=5000):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –í–ù–£–¢–†–ò –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        result = get_notification_manager().show_warning(title, message, duration)
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ warning —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None


def show_info(title, message, duration=4000):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –í–ù–£–¢–†–ò –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        result = get_notification_manager().show_info(title, message, duration)
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ info —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None