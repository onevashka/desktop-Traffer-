# gui/workers/background_workers.py - –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –§–û–ù–û–í–´–• –†–ê–ë–û–ß–ò–•
"""
–°–∏—Å—Ç–µ–º–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ GUI
"""

from PySide6.QtCore import QThread, Signal, QTimer, QMutex, QMutexLocker
from typing import Dict, List, Optional, Callable
from loguru import logger
import time
import threading
from collections import defaultdict


class ProfileStatsWorker(QThread):
    """–§–æ–Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π"""

    # –°–∏–≥–Ω–∞–ª—ã
    stats_updated = Signal(str, dict)  # profile_name, stats_data
    error_occurred = Signal(str, str)  # profile_name, error_message

    def __init__(self):
        super().__init__()
        self.mutex = QMutex()
        self.profiles_to_update = set()
        self.update_interval = 2.0  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        self.running = True
        self.stats_cache = {}
        self.last_update_times = {}

        # –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
        self.max_concurrent_updates = 3
        self.current_updates = 0

    def add_profile(self, profile_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        with QMutexLocker(self.mutex):
            self.profiles_to_update.add(profile_name)

    def remove_profile(self, profile_name: str):
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        with QMutexLocker(self.mutex):
            self.profiles_to_update.discard(profile_name)
            self.stats_cache.pop(profile_name, None)
            self.last_update_times.pop(profile_name, None)

    def stop_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫"""
        self.running = False
        self.quit()
        self.wait()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        logger.info("üìä ProfileStatsWorker –∑–∞–ø—É—â–µ–Ω")

        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
                with QMutexLocker(self.mutex):
                    profiles_copy = list(self.profiles_to_update)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                for profile_name in profiles_copy:
                    if not self.running:
                        break

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å
                    if self._should_update_profile(profile_name):
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        if self.current_updates < self.max_concurrent_updates:
                            self._update_profile_stats(profile_name)

                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
                    self.msleep(100)

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                self.msleep(int(self.update_interval * 1000))

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ProfileStatsWorker: {e}")
                self.msleep(1000)

        logger.info("üìä ProfileStatsWorker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _should_update_profile(self, profile_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        current_time = time.time()
        last_update = self.last_update_times.get(profile_name, 0)

        return (current_time - last_update) >= self.update_interval

    def _update_profile_stats(self, profile_name: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            self.current_updates += 1
            start_time = time.time()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–æ–¥—É–ª—è
            stats_data = self._get_profile_stats_from_module(profile_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            old_stats = self.stats_cache.get(profile_name, {})
            if stats_data != old_stats:
                # –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                self.stats_cache[profile_name] = stats_data
                self.stats_updated.emit(profile_name, stats_data)

            self.last_update_times[profile_name] = time.time()

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = time.time() - start_time
            if duration > 0.5:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ
                logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {profile_name}: {duration:.2f}s")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {profile_name}: {e}")
            self.error_occurred.emit(profile_name, str(e))
        finally:
            self.current_updates -= 1

    def _get_profile_stats_from_module(self, profile_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–æ–¥—É–ª—è - –ë–´–°–¢–†–û"""
        try:
            from src.modules.impl.inviter import get_profile_progress

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è UI
            progress_data = get_profile_progress(profile_name)

            if progress_data:
                return {
                    'success': progress_data.get('success', 0),
                    'errors': progress_data.get('errors', 0),
                    'total_goal': progress_data.get('total_goal', 0),
                    'speed': progress_data.get('speed', 0),
                    'status': progress_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'is_running': self._check_if_running(profile_name)
                }
            else:
                return {
                    'success': 0,
                    'errors': 0,
                    'total_goal': 0,
                    'speed': 0,
                    'status': '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    'is_running': False
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª—è: {e}")
            return {}

    def _check_if_running(self, profile_name: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if _inviter_module_manager:
                return profile_name in _inviter_module_manager.active_processes
            return False
        except:
            return False


class ChatStatsWorker(QThread):
    """–§–æ–Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤ (–±–æ–ª–µ–µ —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)"""

    chat_stats_updated = Signal(str, dict)  # profile_name, chat_stats

    def __init__(self):
        super().__init__()
        self.mutex = QMutex()
        self.profiles_to_update = set()
        self.update_interval = 5.0  # –†–µ–∂–µ —á–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.running = True

    def add_profile(self, profile_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤"""
        with QMutexLocker(self.mutex):
            self.profiles_to_update.add(profile_name)

    def remove_profile(self, profile_name: str):
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤"""
        with QMutexLocker(self.mutex):
            self.profiles_to_update.discard(profile_name)

    def stop_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫"""
        self.running = False
        self.quit()
        self.wait()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤"""
        logger.info("üí¨ ChatStatsWorker –∑–∞–ø—É—â–µ–Ω")

        while self.running:
            try:
                with QMutexLocker(self.mutex):
                    profiles_copy = list(self.profiles_to_update)

                for profile_name in profiles_copy:
                    if not self.running:
                        break

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤
                    chat_stats = self._get_chat_stats_from_module(profile_name)
                    if chat_stats:
                        self.chat_stats_updated.emit(profile_name, chat_stats)

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
                    self.msleep(500)

                # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                self.msleep(int(self.update_interval * 1000))

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ChatStatsWorker: {e}")
                self.msleep(2000)

        logger.info("üí¨ ChatStatsWorker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _get_chat_stats_from_module(self, profile_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤"""
        try:
            # –¢—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if not _inviter_module_manager:
                return {}

            if profile_name not in _inviter_module_manager.active_processes:
                return {}

            process = _inviter_module_manager.active_processes[profile_name]

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤
            chat_stats = {}

            if hasattr(process, 'processed_users') and process.processed_users:
                # –¢—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                chat_stats = self._process_chat_statistics(process)

            return chat_stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤: {e}")
            return {}

    def _process_chat_statistics(self, process) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤ - —Ç—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"""
        # –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç GUI
        try:
            from src.entities.moduls.inviter import UserStatus

            chat_stats = {}

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chat_list = []
            if hasattr(process, 'chats_list') and process.chats_list:
                chat_list = process.chats_list[:5]
            else:
                chat_list = ["@test_chat"]

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for chat_link in chat_list:
                chat_stats[chat_link] = {
                    'success': 0,
                    'errors': 0,
                    'total': 0,
                    'goal': getattr(process.config, 'success_per_chat', 100) if hasattr(process, 'config') else 100
                }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for username, user_data in process.processed_users.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                user_chat = chat_list[0]  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç

                if user_chat in chat_stats:
                    chat_stats[user_chat]['total'] += 1

                    if hasattr(user_data, 'status'):
                        if user_data.status == UserStatus.INVITED:
                            chat_stats[user_chat]['success'] += 1
                        else:
                            chat_stats[user_chat]['errors'] += 1

            return chat_stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


class WorkerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤"""

    def __init__(self):
        self.profile_stats_worker = None
        self.chat_stats_worker = None
        self.is_initialized = False

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö"""
        if self.is_initialized:
            return

        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏—Ö
            self.profile_stats_worker = ProfileStatsWorker()
            self.chat_stats_worker = ChatStatsWorker()

            # –ó–∞–ø—É—Å–∫–∞–µ–º
            self.profile_stats_worker.start()
            self.chat_stats_worker.start()

            self.is_initialized = True
            logger.info("‚úÖ WorkerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WorkerManager: {e}")

    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö"""
        if not self.is_initialized:
            return

        try:
            if self.profile_stats_worker:
                self.profile_stats_worker.stop_worker()

            if self.chat_stats_worker:
                self.chat_stats_worker.stop_worker()

            self.is_initialized = False
            logger.info("‚úÖ WorkerManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WorkerManager: {e}")

    def add_profile_monitoring(self, profile_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.profile_stats_worker:
            self.profile_stats_worker.add_profile(profile_name)
        if self.chat_stats_worker:
            self.chat_stats_worker.add_profile(profile_name)

    def remove_profile_monitoring(self, profile_name: str):
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.profile_stats_worker:
            self.profile_stats_worker.remove_profile(profile_name)
        if self.chat_stats_worker:
            self.chat_stats_worker.remove_profile(profile_name)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
_worker_manager = None


def get_worker_manager() -> WorkerManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–∏—Ö"""
    global _worker_manager
    if _worker_manager is None:
        _worker_manager = WorkerManager()
    return _worker_manager


def init_worker_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    manager = get_worker_manager()
    manager.initialize()
    return manager


def shutdown_worker_manager():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    global _worker_manager
    if _worker_manager:
        _worker_manager.shutdown()
        _worker_manager = None