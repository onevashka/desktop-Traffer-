# gui/workers/background_workers.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø 100+ –ü–†–û–§–ò–õ–ï–ô
"""
–°–∏—Å—Ç–µ–º–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ GUI
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: QThreadPool –≤–º–µ—Å—Ç–æ QThread, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
"""

from PySide6.QtCore import QObject, Signal, QTimer, QMutex, QMutexLocker, QRunnable, QThreadPool
from typing import Dict, List, Optional, Callable, Set
from loguru import logger
import time
import threading
from collections import defaultdict, deque


class ProfileStatsTask(QRunnable):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""

    def __init__(self, profile_name: str, callback: Callable, signals: QObject):
        super().__init__()
        self.profile_name = profile_name
        self.callback = callback
        self.signals = signals
        self.setAutoDelete(True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    def run(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            start_time = time.time()

            # –í—ã–ø–æ–ª–Ω—è–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            result = self.callback(self.profile_name)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤ —É –æ–±—ä–µ–∫—Ç–∞
            if result:
                if hasattr(self.signals, 'stats_updated'):
                    self.signals.stats_updated.emit(self.profile_name, result)
                elif hasattr(self.signals, 'chat_stats_updated'):
                    self.signals.chat_stats_updated.emit(self.profile_name, result)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            duration = time.time() - start_time
            if duration > 1.0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {self.profile_name}: {duration:.2f}s")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {self.profile_name}: {e}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—à–∏–±–∫–∏
            if hasattr(self.signals, 'error_occurred'):
                self.signals.error_occurred.emit(self.profile_name, str(e))


class BatchStatsTask(QRunnable):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""

    def __init__(self, profiles: List[str], callback: Callable, signals: QObject):
        super().__init__()
        self.profiles = profiles
        self.callback = callback
        self.signals = signals
        self.setAutoDelete(True)

    def run(self):
        """–ü–∞–∫–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            batch_results = {}
            start_time = time.time()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
            for i in range(0, len(self.profiles), 10):  # –ü–æ 10 –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–∞–∫–µ—Ç–µ
                batch = self.profiles[i:i + 10]

                for profile_name in batch:
                    try:
                        result = self.callback(profile_name)
                        if result:
                            batch_results[profile_name] = result
                    except Exception as e:
                        # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É - —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
                        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ –¥–ª—è {profile_name}: {e}")
                        continue

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
                if i + 10 < len(self.profiles):
                    time.sleep(0.05)  # 50–º—Å –ø–∞—É–∑–∞

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if batch_results:
                if hasattr(self.signals, 'batch_updated'):
                    self.signals.batch_updated.emit(batch_results)
                else:
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                    for profile_name, stats in batch_results.items():
                        if hasattr(self.signals, 'stats_updated'):
                            self.signals.stats_updated.emit(profile_name, stats)
                        elif hasattr(self.signals, 'chat_stats_updated'):
                            self.signals.chat_stats_updated.emit(profile_name, stats)

            duration = time.time() - start_time
            if len(self.profiles) > 20:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã
                logger.info(f"üìä –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(self.profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞ {duration:.2f}s")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


class ProfileStatsWorker(QObject):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞–±–æ—á–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç QThreadPool"""

    # –°–∏–≥–Ω–∞–ª—ã
    stats_updated = Signal(str, dict)  # profile_name, stats_data
    batch_updated = Signal(dict)  # {profile_name: stats_data}
    error_occurred = Signal(str, str)  # profile_name, error_message

    def __init__(self):
        super().__init__()

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –≤–º–µ—Å—Ç–æ QThread
        self.thread_pool = QThreadPool.globalInstance()

        # –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ø—É–ª –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        original_max = self.thread_pool.maxThreadCount()
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 16 –ø–æ—Ç–æ–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        optimized_max = min(16, max(4, original_max))
        self.thread_pool.setMaxThreadCount(optimized_max)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Ç–æ–∫–æ–≤
        self.thread_pool.setExpiryTimeout(30000)  # 30 —Å–µ–∫—É–Ω–¥

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        self.mutex = QMutex()
        self.active_profiles: Set[str] = set()
        self.last_update_times: Dict[str, float] = {}

        # –ê–î–ê–ü–¢–ò–í–ù–´–ï –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.base_update_interval = 5.0  # –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        self.current_update_interval = 5.0
        self.batch_size_threshold = 20  # –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.stats_cache: Dict[str, dict] = {}
        self.performance_metrics = {
            'tasks_completed': 0,
            'average_duration': 0.0,
            'errors_count': 0
        }

        # –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.scheduler_timer = QTimer()
        self.scheduler_timer.timeout.connect(self._schedule_stats_updates)
        self.scheduler_timer.start(int(self.current_update_interval * 1000))

        logger.info(f"üìä ProfileStatsWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {optimized_max} –ø–æ—Ç–æ–∫–æ–≤, "
                    f"–∏–Ω—Ç–µ—Ä–≤–∞–ª {self.current_update_interval}s")

    def add_profile(self, profile_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        with QMutexLocker(self.mutex):
            self.active_profiles.add(profile_name)
            self.last_update_times[profile_name] = 0.0

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self._auto_optimize_intervals()

    def remove_profile(self, profile_name: str):
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        with QMutexLocker(self.mutex):
            self.active_profiles.discard(profile_name)
            self.last_update_times.pop(profile_name, None)
            self.stats_cache.pop(profile_name, None)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        self._auto_optimize_intervals()

    def _auto_optimize_intervals(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        with QMutexLocker(self.mutex):
            profile_count = len(self.active_profiles)

        # –ê–î–ê–ü–¢–ò–í–ù–´–ï –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if profile_count > 100:
            # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π - —Ä–µ–¥–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_interval = 20.0
        elif profile_count > 50:
            # –ú–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π - —É–º–µ—Ä–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_interval = 15.0
        elif profile_count > 20:
            # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_interval = 10.0
        else:
            # –ú–∞–ª–æ –ø—Ä–æ—Ñ–∏–ª–µ–π - —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_interval = 5.0

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if new_interval != self.current_update_interval:
            self.current_update_interval = new_interval

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            self.scheduler_timer.stop()
            self.scheduler_timer.start(int(new_interval * 1000))

            logger.info(f"üéØ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {profile_count} –ø—Ä–æ—Ñ–∏–ª–µ–π ‚Üí –∏–Ω—Ç–µ—Ä–≤–∞–ª {new_interval}s")

    def _schedule_stats_updates(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        current_time = time.time()
        profiles_to_update = []

        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        with QMutexLocker(self.mutex):
            for profile_name in list(self.active_profiles):
                last_update = self.last_update_times.get(profile_name, 0)
                if (current_time - last_update) >= self.current_update_interval:
                    profiles_to_update.append(profile_name)
                    self.last_update_times[profile_name] = current_time

        if not profiles_to_update:
            return

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if len(profiles_to_update) >= self.batch_size_threshold:
            # –ú–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            self._schedule_batch_update(profiles_to_update)
        else:
            # –ú–∞–ª–æ –ø—Ä–æ—Ñ–∏–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            self._schedule_individual_updates(profiles_to_update)

    def _schedule_batch_update(self, profiles: List[str]):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º self –∫–∞–∫ signals –æ–±—ä–µ–∫—Ç
        batch_task = BatchStatsTask(profiles, self._get_optimized_profile_stats, self)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        self.thread_pool.start(batch_task)

        logger.debug(f"üì¶ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")

    def _schedule_individual_updates(self, profiles: List[str]):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        for profile_name in profiles:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º self –∫–∞–∫ signals –æ–±—ä–µ–∫—Ç
            task = ProfileStatsTask(profile_name, self._get_optimized_profile_stats, self)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
            self.thread_pool.start(task)

    def _get_optimized_profile_stats(self, profile_name: str) -> Optional[dict]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if not self._quick_running_check(profile_name):
                # –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                return {
                    'success': 0,
                    'errors': 0,
                    'total_goal': 0,
                    'speed': 0,
                    'status': '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    'is_running': False,
                    'timestamp': time.time()
                }

            # –ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            from src.modules.impl.inviter import get_profile_progress

            progress_data = get_profile_progress(profile_name)
            if not progress_data:
                return None

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            return {
                'success': progress_data.get('success', 0),
                'errors': progress_data.get('errors', 0),
                'total_goal': progress_data.get('total_goal', 0),
                'speed': progress_data.get('speed', 0),
                'status': progress_data.get('status', '–†–∞–±–æ—Ç–∞–µ—Ç'),
                'is_running': True,
                'last_action': progress_data.get('last_action', ''),
                'timestamp': time.time()
            }

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {profile_name}: {e}")
            return None

    def _quick_running_check(self, profile_name: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å (–±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if not _inviter_module_manager:
                return False

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
            return profile_name in _inviter_module_manager.active_processes

        except Exception:
            return False

    def get_performance_metrics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        active_threads = self.thread_pool.activeThreadCount()
        max_threads = self.thread_pool.maxThreadCount()

        with QMutexLocker(self.mutex):
            profile_count = len(self.active_profiles)

        return {
            'active_threads': active_threads,
            'max_threads': max_threads,
            'thread_utilization': f"{(active_threads / max_threads * 100):.1f}%",
            'monitored_profiles': profile_count,
            'update_interval': self.current_update_interval,
            'cache_size': len(self.stats_cache),
            **self.performance_metrics
        }

    def stop_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ProfileStatsWorker...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler_timer.stop()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã)
        if self.thread_pool.activeThreadCount() > 0:
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {self.thread_pool.activeThreadCount()} –∑–∞–¥–∞—á...")
            self.thread_pool.waitForDone(3000)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with QMutexLocker(self.mutex):
            self.active_profiles.clear()
            self.last_update_times.clear()
            self.stats_cache.clear()

        logger.info("‚úÖ ProfileStatsWorker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class ChatStatsWorker(QObject):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞–±–æ—á–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤"""

    chat_stats_updated = Signal(str, dict)

    def __init__(self):
        super().__init__()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        self.thread_pool = QThreadPool.globalInstance()

        self.mutex = QMutex()
        self.active_profiles: Set[str] = set()

        # –î–ª—è —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_interval = 30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self._schedule_chat_updates)
        self.update_timer.start(int(self.update_interval * 1000))

    def add_profile(self, profile_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤"""
        with QMutexLocker(self.mutex):
            self.active_profiles.add(profile_name)

    def remove_profile(self, profile_name: str):
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤"""
        with QMutexLocker(self.mutex):
            self.active_profiles.discard(profile_name)

    def _schedule_chat_updates(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤"""
        with QMutexLocker(self.mutex):
            profiles = list(self.active_profiles)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º self –∫–∞–∫ signals –æ–±—ä–µ–∫—Ç
        for profile_name in profiles:
            if self._is_profile_running(profile_name):
                task = ProfileStatsTask(profile_name, self._get_chat_stats, self)
                self.thread_pool.start(task)

    def _is_profile_running(self, profile_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if not _inviter_module_manager:
                return False

            return profile_name in _inviter_module_manager.active_processes

        except Exception:
            return False

    def _get_chat_stats(self, profile_name: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º —Å–ª–∏—à–∫–æ–º —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∞—è –¥–ª—è 100+ –ø—Ä–æ—Ñ–∏–ª–µ–π
            return {
                'total_chats': 0,
                'active_chats': 0,
                'completed_chats': 0
            }
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤ {profile_name}: {e}")
            return None

    def stop_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π —á–∞—Ç–æ–≤"""
        self.update_timer.stop()
        with QMutexLocker(self.mutex):
            self.active_profiles.clear()


class WorkerManager:
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤"""

    def __init__(self):
        self.profile_stats_worker: Optional[ProfileStatsWorker] = None
        self.chat_stats_worker: Optional[ChatStatsWorker] = None
        self.is_initialized = False

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ —Å–∏—Å—Ç–µ–º—É —Ä–∞–±–æ—á–∏—Ö"""
        if self.is_initialized:
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö
            self.profile_stats_worker = ProfileStatsWorker()
            self.chat_stats_worker = ChatStatsWorker()

            self.is_initialized = True

            logger.info("‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô WorkerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if self.profile_stats_worker:
                metrics = self.profile_stats_worker.get_performance_metrics()
                logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {metrics['max_threads']} –ø–æ—Ç–æ–∫–æ–≤, "
                            f"–∏–Ω—Ç–µ—Ä–≤–∞–ª {metrics['update_interval']}s")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û WorkerManager: {e}")

    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö"""
        if not self.is_initialized:
            return

        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û WorkerManager...")

            if self.profile_stats_worker:
                self.profile_stats_worker.stop_worker()

            if self.chat_stats_worker:
                self.chat_stats_worker.stop_worker()

            self.is_initialized = False
            logger.info("‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô WorkerManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WorkerManager: {e}")

    def add_profile_monitoring(self, profile_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.profile_stats_worker:
            self.profile_stats_worker.add_profile(profile_name)
        if self.chat_stats_worker:
            self.chat_stats_worker.add_profile(profile_name)

    def remove_profile_monitoring(self, profile_name: str):
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.profile_stats_worker:
            self.profile_stats_worker.remove_profile(profile_name)
        if self.chat_stats_worker:
            self.chat_stats_worker.remove_profile(profile_name)

    def get_performance_metrics(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        if self.profile_stats_worker:
            return self.profile_stats_worker.get_performance_metrics()
        return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ò–ú–ï–ù–ò
_worker_manager: Optional[WorkerManager] = None


def get_worker_manager() -> WorkerManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–∏—Ö"""
    global _worker_manager
    if _worker_manager is None:
        _worker_manager = WorkerManager()
    return _worker_manager


def init_worker_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    manager = get_worker_manager()
    manager.initialize()
    return manager


def shutdown_worker_manager():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
    global _worker_manager
    if _worker_manager:
        _worker_manager.shutdown()
        _worker_manager = None