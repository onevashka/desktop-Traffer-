# TeleCRM/gui/account_manager.py
"""
–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–∫–ª–∞–¥–æ–∫
"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTabWidget, QLabel
)
from PySide6.QtCore import Qt
from gui.component_account_manager.traffic_accounts import TrafficAccountsTab
from gui.component_account_manager.sales_accounts import SalesAccountsTab
from loguru import logger


class AccountManagerTab(QWidget):
    """–ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""

    def __init__(self):
        super().__init__()
        self.setObjectName("AccountManagerTab")

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        self._create_header(layout)

        # –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
        self._create_tabs(layout)

        logger.debug("AccountManager with tabs initialized")

    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
        header_container = QWidget()
        header_layout = QHBoxLayout(header_container)
        header_layout.setContentsMargins(0, 0, 0, 10)

        # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        breadcrumb = QLabel("–ì–ª–∞–≤–Ω–∞—è / –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        breadcrumb.setObjectName("Breadcrumb")
        breadcrumb.setStyleSheet("""
            QLabel#Breadcrumb {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.6);
                font-weight: 400;
            }
        """)

        header_layout.addWidget(breadcrumb)
        header_layout.addStretch()

        layout.addWidget(header_container)

    def _create_tabs(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setObjectName("AccountTabs")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget.setStyleSheet("""
            QTabWidget#AccountTabs::pane {
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                background: transparent;
                top: -1px;
            }

            QTabBar::tab {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-bottom: none;
                padding: 12px 24px;
                margin: 0 2px;
                border-radius: 8px 8px 0 0;
                color: rgba(255, 255, 255, 0.7);
                font-size: 14px;
                font-weight: 500;
                min-width: 120px;
            }

            QTabBar::tab:selected {
                background: rgba(59, 130, 246, 0.15);
                border: 1px solid rgba(59, 130, 246, 0.3);
                color: #FFFFFF;
                font-weight: 600;
            }

            QTabBar::tab:hover:!selected {
                background: rgba(255, 255, 255, 0.08);
                color: rgba(255, 255, 255, 0.9);
            }
        """)

        # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        self.traffic_tab = TrafficAccountsTab()
        self.tab_widget.addTab(self.traffic_tab, "üöÄ –¢—Ä–∞—Ñ–∏–∫")

        # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø)
        if self._has_sales_access():
            self.sales_tab = SalesAccountsTab()
            self.tab_widget.addTab(self.sales_tab, "üí∞ –ü—Ä–æ–¥–∞–∂–∏")
        else:
            logger.info("–î–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é –ø—Ä–æ–¥–∞–∂ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        layout.addWidget(self.tab_widget)

    def _has_sales_access(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é –ø—Ä–æ–¥–∞–∂
        –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        """
        # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        # user_permissions = get_user_permissions_from_server()
        # return "sales_module" in user_permissions

        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return True  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

    def refresh_permissions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∫–ª–∞–¥–∫–∞–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        current_count = self.tab_widget.count()
        has_sales = self._has_sales_access()

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥–∞–∂–∞–º, –Ω–æ –≤–∫–ª–∞–¥–∫–∞ –µ—Å—Ç—å - —É–¥–∞–ª—è–µ–º
        if not has_sales and current_count > 1:
            self.tab_widget.removeTab(1)
            logger.info("–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–¥–∞–∂ —É–¥–∞–ª–µ–Ω–∞ - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–∞–∂–∞–º, –Ω–æ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
        elif has_sales and current_count == 1:
            self.sales_tab = SalesAccountsTab()
            self.tab_widget.addTab(self.sales_tab, "üí∞ –ü—Ä–æ–¥–∞–∂–∏")
            logger.info("–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–¥–∞–∂ –¥–æ–±–∞–≤–ª–µ–Ω–∞")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
def test_sales_access(enable_sales: bool):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥–∞–∂–∞–º"""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    original_method = AccountManagerTab._has_sales_access
    AccountManagerTab._has_sales_access = lambda self: enable_sales

    print(f"–¢–µ—Å—Ç: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–∞–∂–∞–º = {enable_sales}")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    AccountManagerTab._has_sales_access = original_method