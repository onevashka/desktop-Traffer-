# gui/component_inviter/inviter_table.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–û–ú–ü–ê–ö–¢–ù–û–ô –®–ê–ü–ö–û–ô

from gui.dialogs.inviter_dialogs import (
    show_users_base_dialog,
    show_chats_base_dialog,
    show_extended_settings_dialog
)
from gui.dialogs.main_admins_dialog import show_main_admins_dialog
from gui.dialogs.bot_token_dialog import show_bot_token_dialog, load_bot_token_from_profile

from src.modules.impl.inviter.profile_manager import InviterProfileManager

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QScrollArea, QFrame,
    QLabel, QPushButton, QComboBox, QSpinBox, QCheckBox,
    QProgressBar, QSizePolicy, QGraphicsOpacityEffect, QLineEdit,
    QGridLayout
)
from PySide6.QtCore import (
    Qt, QTimer, QPropertyAnimation, QEasingCurve, Signal,
    QParallelAnimationGroup
)
from PySide6.QtGui import QFont, QColor, QPainter, QPen, QBrush
from loguru import logger
from typing import Optional, Dict, List


class ChatStatWidget(QWidget):
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —á–µ—Ç–∫–∏–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏"""

    def __init__(self, chat_link: str, stats: Dict):
        super().__init__()
        self.chat_link = chat_link
        self.stats = stats

        # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        self.setFixedHeight(140)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 110 –¥–æ 140 –¥–ª—è –±–æ–ª—å—à–µ–π –æ–±–ª–∞—Å—Ç–∏
        self.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(31, 41, 55, 0.95), stop:1 rgba(17, 24, 39, 0.95));
                border-radius: 8px;
                margin: 2px;
            }
            QWidget:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(45, 55, 71, 1), stop:1 rgba(25, 35, 49, 1));
            }
        """)

        self._create_layout()

    def _create_layout(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π layout —Å –¥–≤—É–º—è —Å–µ–∫—Ü–∏—è–º–∏"""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(8, 4, 8, 4)
        main_layout.setSpacing(4)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ + –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        top_layout = QHBoxLayout()
        top_layout.setSpacing(8)

        # 1. –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ + —Å—Ç–∞—Ç—É—Å (160px)
        left_widget = self._create_chat_name_section()
        left_widget.setFixedWidth(160)
        top_layout.addWidget(left_widget)

        # 2. –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è)
        progress_widget = self._create_progress_section()
        top_layout.addWidget(progress_widget)

        main_layout.addLayout(top_layout)

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º (—É–≤–µ–ª–∏—á–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å)
        counters_widget = self._create_all_counters_section()
        main_layout.addWidget(counters_widget)

    def _create_chat_name_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(1)

        # –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
        chat_name = self.chat_link.split('/')[-1] if '/' in self.chat_link else self.chat_link
        if len(chat_name) > 20:
            chat_name = chat_name[:17] + "..."

        name_label = QLabel(f"üí¨ {chat_name}")
        name_label.setStyleSheet("""
            QLabel {
                font-size: 11px;
                font-weight: 700;
                color: #FFFFFF;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 rgba(59, 130, 246, 0.25), stop:1 rgba(139, 92, 246, 0.25));
                padding: 2px 6px;
                border-radius: 3px;
                border: 1px solid rgba(59, 130, 246, 0.3);
            }
        """)

        # –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞
        status = self.stats.get('status', 'active')
        if status == 'blocked':
            status_text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            status_color = "#EF4444"
        elif status == 'completed':
            status_text = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
            status_color = "#10B981"
        else:
            status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
            status_color = "#10B981"

        status_label = QLabel(status_text)
        status_label.setStyleSheet(f"""
            QLabel {{
                font-size: 9px;
                color: {status_color};
                font-weight: 600;
                padding: 1px 4px;
                background: {status_color}15;
                border-radius: 2px;
            }}
        """)

        layout.addWidget(name_label)
        layout.addWidget(status_label)
        layout.addStretch()

        return widget

    def _create_progress_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 2, 0, 2)
        layout.setSpacing(2)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_header = QLabel("–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:")
        progress_header.setStyleSheet("""
            QLabel {
                font-size: 9px;
                color: rgba(255, 255, 255, 0.7);
                font-weight: 600;
            }
        """)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        progress = QProgressBar()
        progress.setFixedHeight(16)

        success = self.stats.get('success', 0)
        goal = self.stats.get('goal', 100)
        total_attempts = self.stats.get('total', 0)

        progress.setRange(0, goal)
        progress.setValue(success)

        # –§–æ—Ä–º–∞—Ç: —É—Å–ø–µ—à–Ω–æ/—Ü–µ–ª—å (–≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫)
        if total_attempts > success:
            progress.setFormat(f"{success}/{goal} (–≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts})")
        else:
            progress.setFormat(f"{success}/{goal}")

        progress.setStyleSheet("""
            QProgressBar {
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 7px;
                background: rgba(0, 0, 0, 0.3);
                text-align: center;
                color: #FFFFFF;
                font-size: 9px;
                font-weight: 700;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #3B82F6, stop:1 #8B5CF6);
                border-radius: 6px;
            }
        """)

        layout.addWidget(progress_header)
        layout.addWidget(progress)
        layout.addStretch()

        return widget

    def _create_all_counters_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ –≤—Å–µ–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        widget = QWidget()
        main_layout = QHBoxLayout(widget)
        main_layout.setContentsMargins(0, 12, 0, 0)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –µ—â–µ –±–æ–ª—å—à–µ
        main_layout.setSpacing(2)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

        # –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
        counters_data = [
            ("‚úÖ", self.stats.get('success', 0), "#10B981", "–£—Å–ø–µ—à–Ω–æ\n–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏"),
            ("‚ùå", self.stats.get('errors', 0), "#EF4444", "–û—à–∏–±–æ–∫\n–≤—Å–µ–≥–æ"),
            ("üë•", self.stats.get('accounts_used', 0), "#3B82F6", "–ê–∫–∫–∞—É–Ω—Ç–æ–≤\n—É—á–∞—Å—Ç–≤—É–µ—Ç"),
            ("üìä", self.stats.get('total', 0), "#6B7280", "–ü–æ–ø—ã—Ç–æ–∫\n–≤—Å–µ–≥–æ"),
            ("ü•∂", self.stats.get('frozen', 0), "#6366F1", "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ\n–∞–∫–∫–∞—É–Ω—Ç–æ–≤"),
            ("üö´", self.stats.get('spam_blocks', 0), "#F59E0B", "–°–ø–∞–º-–±–ª–æ–∫–æ–≤\n–ø–æ–ª—É—á–µ–Ω–æ"),
            ("üìù", self.stats.get('writeoff', 0), "#8B5CF6", "–°–ø–∏—Å–∞–Ω–æ\n–∞–∫–∫–∞—É–Ω—Ç–æ–≤"),
            ("üîí", self.stats.get('privacy', 0), "#EC4899", "–ü—Ä–∏–≤–∞—Ç–Ω—ã—Ö\n–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"),
            ("‚ö°", f"{self.stats.get('speed', 0)}/–º–∏–Ω", "#22C55E", "–°–∫–æ—Ä–æ—Å—Ç—å\n–∏–Ω–≤–∞–π—Ç–æ–≤")
        ]

        for icon, value, color, label_text in counters_data:
            counter = self._create_counter_with_label(icon, value, color, label_text)
            main_layout.addWidget(counter)

        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º stretch - –ø—É—Å—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞–Ω–∏–º–∞—é—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ

        return widget

    def _create_counter_with_label(self, icon: str, value, color: str, label_text: str) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å –æ–≥—Ä–æ–º–Ω—ã–º –º–µ—Å—Ç–æ–º –¥–ª—è —á–∏—Å–µ–ª"""
        widget = QWidget()
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —É–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã - —Ç–µ–ø–µ—Ä—å —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞–Ω–∏–º–∞—é—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        widget.setMinimumSize(120, 70)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ
        widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)  # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ

        layout = QVBoxLayout(widget)
        layout.setContentsMargins(8, 5, 8, 5)  # –ï—â–µ –±–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø–æ–≤
        layout.setSpacing(5)  # –ë–æ–ª—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —á–∏—Å–ª–æ–º

        # –£–±—Ä–∞–ª–∏ —Ñ–æ–Ω –∏ –æ–±–≤–æ–¥–∫–∏ - –≤–∏–¥–∂–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        widget.setStyleSheet("""
            QWidget {
                background: transparent;
            }
        """)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞)
        label = QLabel(label_text)
        label.setStyleSheet("""
            QLabel {
                font-size: 9px;
                color: rgba(255, 255, 255, 0.7);
                font-weight: 600;
                line-height: 1.2;
            }
        """)
        label.setAlignment(Qt.AlignCenter)
        label.setWordWrap(True)  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –∏–∫–æ–Ω–∫–∞ + –∑–Ω–∞—á–µ–Ω–∏–µ (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —É–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª)
        value_layout = QHBoxLayout()
        value_layout.setContentsMargins(0, 0, 0, 0)
        value_layout.setSpacing(8)  # –ï—â–µ –±–æ–ª—å—à–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–æ–π –∏ —á–∏—Å–ª–æ–º
        value_layout.setAlignment(Qt.AlignCenter)

        icon_label = QLabel(icon)
        icon_label.setStyleSheet("font-size: 22px;")  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–∫–æ–Ω–∫—É –µ—â–µ –±–æ–ª—å—à–µ

        value_label = QLabel(str(value))
        value_label.setStyleSheet(f"""
            QLabel {{
                font-size: 22px;
                color: {color};
                font-weight: 800;
                qproperty-alignment: AlignCenter;
            }}
        """)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –û–ß–ï–ù–¨ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
        value_label.setMinimumWidth(60)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 45 –¥–æ 60
        value_label.setWordWrap(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è —á–∏—Å–µ–ª
        value_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è

        value_layout.addWidget(icon_label)
        value_layout.addWidget(value_label)

        layout.addWidget(label)
        layout.addLayout(value_layout)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        tooltip_text = label_text.replace('\n', ' ')
        widget.setToolTip(f"{tooltip_text}: {value}")

        return widget

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _create_status_badge(self, icon: str, text: str, color: str) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–µ–π–¥–∂ —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        widget = QWidget()
        widget.setFixedHeight(22)
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(6, 2, 6, 2)
        layout.setSpacing(2)

        widget.setStyleSheet(f"""
            QWidget {{
                background: {color}25;
                border: 1px solid {color}60;
                border-radius: 11px;
            }}
        """)

        icon_label = QLabel(icon)
        icon_label.setStyleSheet("font-size: 11px;")

        text_label = QLabel(text)
        text_label.setStyleSheet(f"""
            font-size: 10px;
            color: {color};
            font-weight: 700;
        """)

        layout.addWidget(icon_label)
        layout.addWidget(text_label)

        return widget

    def _create_stat_badge(self, icon: str, value: str, color: str) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–µ–π–¥–∂ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        widget = QWidget()
        widget.setFixedWidth(45)
        widget.setFixedHeight(20)
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(4, 1, 4, 1)
        layout.setSpacing(2)

        widget.setStyleSheet(f"""
            QWidget {{
                background: {color}20;
                border: 1px solid {color}40;
                border-radius: 10px;
            }}
        """)

        icon_label = QLabel(icon)
        icon_label.setStyleSheet("font-size: 10px;")

        value_label = QLabel(value)
        value_label.setStyleSheet(f"""
            font-size: 9px;
            color: {color};
            font-weight: 700;
        """)

        layout.addWidget(icon_label)
        layout.addWidget(value_label)

        return widget

class ExpandButton(QPushButton):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.is_expanded = False
        self.rotation_angle = 0

        self.setFixedSize(24, 24)
        self.setCursor(Qt.PointingHandCursor)
        self.setStyleSheet("""
            QPushButton {
                background: rgba(59, 130, 246, 0.2);
                border: 1px solid rgba(59, 130, 246, 0.4);
                border-radius: 4px;
            }
            QPushButton:hover {
                background: rgba(59, 130, 246, 0.3);
                border-color: rgba(59, 130, 246, 0.6);
            }
        """)

        self.rotation_animation = QPropertyAnimation(self, b"rotation")
        self.rotation_animation.setDuration(250)
        self.rotation_animation.setEasingCurve(QEasingCurve.OutCubic)

    def paintEvent(self, event):
        super().paintEvent(event)
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        center = self.rect().center()
        painter.save()
        painter.translate(center)
        painter.rotate(self.rotation_angle)
        painter.translate(-center)

        pen = QPen(QColor(255, 255, 255, 200), 2)
        painter.setPen(pen)

        arrow_size = 4
        x = center.x()
        y = center.y()

        painter.drawLine(x - arrow_size, y - 1, x, y + 2)
        painter.drawLine(x, y + 2, x + arrow_size, y - 1)
        painter.restore()

    def toggle(self):
        self.is_expanded = not self.is_expanded
        self.rotation_animation.setStartValue(self.rotation_angle)
        self.rotation_animation.setEndValue(180 if self.is_expanded else 0)
        self.rotation_animation.start()

    def set_rotation(self, angle):
        self.rotation_angle = angle
        self.update()

    rotation = property(lambda self: self.rotation_angle, set_rotation)


class InviterProfileRow(QWidget):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —á–∞—Ç–æ–≤"""

    # –°–∏–≥–Ω–∞–ª—ã
    profile_started = Signal(str)
    profile_stopped = Signal(str)
    profile_deleted = Signal(str)
    settings_changed = Signal(str, dict)

    def __init__(self, profile_data):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º layout"""
        super().__init__()
        self.setAttribute(Qt.WA_StyledBackground, True)
        self.profile_data = profile_data
        self.profile_name = profile_data.get('name', '–ü—Ä–æ—Ñ–∏–ª—å')
        self.is_running = profile_data.get('is_running', False)

        self.users_list = profile_data.get('users_list', [])
        self.chats_list = profile_data.get('chats_list', [])
        self.extended_settings = profile_data.get('extended_settings', {})

        self.process_stats = profile_data.get('process_stats', {})
        self.saved_progress = {
            'success': 0,
            'errors': 0,
            'total_goal': 0,
            'stop_reason': None
        }

        # –§–ª–∞–≥–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è —Å–µ–∫—Ü–∏–∏
        self.is_expanded = False
        self.expandable_widget = None
        self.chat_stats_container = None
        self.chat_widgets = []
        self.expand_animation = None
        self.expand_button = None

        self.manually_stopped = False

        self.bot_account = profile_data.get('bot_account', None)
        if not self.bot_account and profile_data.get('config', {}).get('bot_account'):
            self.bot_account = profile_data['config']['bot_account']

        # –¢–∞–π–º–µ—Ä—ã
        self.progress_timer = QTimer()
        self.progress_timer.timeout.connect(self._update_progress_from_module)

        self.completion_timer = QTimer()
        self.completion_timer.timeout.connect(self._check_process_completion)

        self.chat_stats_timer = QTimer()
        self.chat_stats_timer.timeout.connect(self._update_chat_stats)

        self.setObjectName("InviterProfileRow")

        # –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É!
        self.setMinimumHeight(85)
        # self.setFixedHeight(85) - —É–±–∏—Ä–∞–µ–º —ç—Ç–æ!

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        self.users_btn = None
        self.chats_btn = None
        self.settings_btn = None
        self.delete_btn = None
        self.start_stop_btn = None
        self.name_edit = None
        self.invite_type_combo = None
        self.manage_admins_btn = None
        self.bot_token_btn = None

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 6, 10, 6)
        main_layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏

        # –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
        self.header_widget = QWidget()
        self.header_widget.setFixedHeight(85)
        self._create_compact_header_content(self.header_widget)

        main_layout.addWidget(self.header_widget)

        # –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ü–û–°–õ–ï —à–∞–ø–∫–∏
        self._create_expandable_section(main_layout)

        # –°—Ç–∏–ª–∏
        self._apply_styles()
        self._connect_signals()

        if self.is_running:
            self.progress_timer.start(1000)
            self.completion_timer.start(500)

        QTimer.singleShot(500, self.sync_with_module_state)

    def _create_compact_header_content(self, header_widget):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        layout = QHBoxLayout(header_widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        self.expand_button = ExpandButton()
        self.expand_button.clicked.connect(self.toggle_expansion)
        layout.addWidget(self.expand_button)

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–ø–∫–∏
        status_widget = self._create_compact_status()
        layout.addWidget(status_widget)

        start_widget = self._create_compact_start_button()
        layout.addWidget(start_widget)

        name_widget = self._create_compact_name()
        layout.addWidget(name_widget)

        type_widget = self._create_compact_invite_type()
        layout.addWidget(type_widget)

        users_widget = self._create_compact_users_base()
        layout.addWidget(users_widget)

        chats_widget = self._create_compact_chats_base()
        layout.addWidget(chats_widget)

        progress_widget = self._create_inline_progress()
        layout.addWidget(progress_widget)

        self.control_buttons_widget = self._create_compact_control_buttons()
        layout.addWidget(self.control_buttons_widget)

    def _create_compact_header(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —à–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        header_widget = QWidget()
        header_widget.setFixedHeight(70)

        layout = QHBoxLayout(header_widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        self.expand_button = ExpandButton()
        self.expand_button.clicked.connect(self.toggle_expansion)
        layout.addWidget(self.expand_button)

        # –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        status_widget = self._create_compact_status()
        layout.addWidget(status_widget)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        start_widget = self._create_compact_start_button()
        layout.addWidget(start_widget)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        name_widget = self._create_compact_name()
        layout.addWidget(name_widget)

        # –¢–∏–ø –∏–Ω–≤–∞–π—Ç–∞
        type_widget = self._create_compact_invite_type()
        layout.addWidget(type_widget)

        # –ë–∞–∑—ã
        users_widget = self._create_compact_users_base()
        layout.addWidget(users_widget)

        chats_widget = self._create_compact_chats_base()
        layout.addWidget(chats_widget)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        progress_widget = self._create_inline_progress()
        layout.addWidget(progress_widget)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_buttons_widget = self._create_compact_control_buttons()
        layout.addWidget(self.control_buttons_widget)

        main_layout.addWidget(header_widget)

    def _create_compact_status(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
        widget = QWidget()
        widget.setFixedWidth(40)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setAlignment(Qt.AlignCenter)

        self.status_indicator = QLabel("‚óè")
        self.status_indicator.setAlignment(Qt.AlignCenter)
        self.status_indicator.setStyleSheet(f"""
            QLabel {{
                font-size: 14px;
                color: {'#10B981' if self.is_running else '#6B7280'};
                font-weight: bold;
            }}
        """)

        layout.addWidget(self.status_indicator)
        return widget

    def _create_compact_start_button(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞"""
        widget = QWidget()
        widget.setFixedWidth(80)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setAlignment(Qt.AlignCenter)

        self.start_stop_btn = QPushButton()
        self._update_start_button()
        self.start_stop_btn.setFixedSize(70, 28)

        layout.addWidget(self.start_stop_btn)
        return widget

    def _create_compact_name(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        widget = QWidget()
        widget.setFixedWidth(150)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        name_label = QLabel("–ü—Ä–æ—Ñ–∏–ª—å:")
        name_label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        self.name_edit = QLineEdit(self.profile_name)
        self.name_edit.setFixedWidth(140)
        self.name_edit.setFixedHeight(24)
        self.name_edit.setStyleSheet("""
            QLineEdit {
                background: #111827;
                border: 1px solid #374151;
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 12px;
                padding: 2px 4px;
            }
            QLineEdit:focus {
                border-color: #2563EB;
            }
        """)

        layout.addWidget(name_label)
        layout.addWidget(self.name_edit)
        return widget

    def _create_compact_invite_type(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞"""
        widget = QWidget()
        widget.setFixedWidth(120)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        type_label = QLabel("–¢–∏–ø:")
        type_label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        self.invite_type_combo = QComboBox()
        self.invite_type_combo.addItems(["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"])
        self.invite_type_combo.setFixedWidth(110)
        self.invite_type_combo.setFixedHeight(24)
        self.invite_type_combo.setStyleSheet("""
            QComboBox {
                background: #111827;
                border: 1px solid #374151;
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 11px;
                padding: 2px 4px;
            }
            QComboBox:focus {
                border-color: #2563EB;
            }
            QComboBox QAbstractItemView {
                background: #1F2937;
                border: 1px solid #374151;
                selection-background-color: #2563EB;
                color: #FFFFFF;
                font-size: 11px;
            }
        """)

        current_type = self.profile_data.get('config', {}).get('invite_type', 'classic')
        if current_type == 'admin':
            self.invite_type_combo.setCurrentText("–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
        else:
            self.invite_type_combo.setCurrentText("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π")

        layout.addWidget(type_label)
        layout.addWidget(self.invite_type_combo)
        return widget

    def _create_compact_users_base(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        widget = QWidget()
        widget.setFixedWidth(80)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        label = QLabel("–Æ–∑–µ—Ä—ã:")
        label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        users_count = len(self.users_list)
        if users_count >= 1000000:
            button_text = f"{users_count // 1000000}.{(users_count % 1000000) // 100000}M"
        elif users_count >= 1000:
            button_text = f"{users_count // 1000}K"
        else:
            button_text = f"{users_count}"

        self.users_btn = QPushButton(f"üë•{button_text}")
        self.users_btn.setFixedHeight(24)
        self.users_btn.setFixedWidth(70)
        self.users_btn.setToolTip(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count:,}")
        self.users_btn.setStyleSheet("""
            QPushButton {
                background: rgba(59, 130, 246, 0.2);
                border: 1px solid rgba(59, 130, 246, 0.5);
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 11px;
                font-weight: 600;
                padding: 0 4px;
            }
            QPushButton:hover {
                background: rgba(59, 130, 246, 0.3);
            }
        """)

        layout.addWidget(label)
        layout.addWidget(self.users_btn)
        return widget

    def _create_compact_chats_base(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –±–∞–∑–∞ —á–∞—Ç–æ–≤"""
        widget = QWidget()
        widget.setFixedWidth(80)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        label = QLabel("–ß–∞—Ç—ã:")
        label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        chats_count = len(self.chats_list)
        if chats_count >= 1000:
            button_text = f"{chats_count // 1000}K"
        else:
            button_text = f"{chats_count}"

        self.chats_btn = QPushButton(f"üí¨{button_text}")
        self.chats_btn.setFixedHeight(24)
        self.chats_btn.setFixedWidth(70)
        self.chats_btn.setToolTip(f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chats_count:,}")
        self.chats_btn.setStyleSheet("""
            QPushButton {
                background: rgba(16, 185, 129, 0.2);
                border: 1px solid rgba(16, 185, 129, 0.5);
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 11px;
                font-weight: 600;
                padding: 0 4px;
            }
            QPushButton:hover {
                background: rgba(16, 185, 129, 0.3);
            }
        """)

        layout.addWidget(label)
        layout.addWidget(self.chats_btn)
        return widget

    def _create_inline_progress(self):
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        widget = QWidget()
        widget.setFixedWidth(200)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        # –ú–µ—Ç–∫–∞
        progress_label = QLabel("–ü—Ä–æ–≥—Ä–µ—Å—Å:")
        progress_label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        progress_layout = QHBoxLayout()
        progress_layout.setSpacing(4)

        # –ú–∏–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setFixedHeight(16)
        self.progress_bar.setFixedWidth(100)
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setFormat("%v/%m")
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 6px;
                background: rgba(255, 255, 255, 0.1);
                text-align: center;
                color: #FFFFFF;
                font-size: 8px;
                font-weight: 600;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #3B82F6, stop:1 #8B5CF6);
                border-radius: 5px;
            }
        """)

        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.success_label = QLabel("‚úÖ0")
        self.success_label.setStyleSheet("font-size: 10px; color: #10B981; font-weight: 600;")

        self.errors_label = QLabel("‚ùå0")
        self.errors_label.setStyleSheet("font-size: 10px; color: #EF4444; font-weight: 600;")

        self.speed_label = QLabel("‚ö°0")
        self.speed_label.setStyleSheet("font-size: 10px; color: #F59E0B; font-weight: 600;")

        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.success_label)
        progress_layout.addWidget(self.errors_label)
        progress_layout.addWidget(self.speed_label)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ...")
        self.status_label.setStyleSheet("font-size: 9px; color: rgba(255,255,255,0.5);")

        layout.addWidget(progress_label)
        layout.addLayout(progress_layout)
        layout.addWidget(self.status_label)

        return widget

    def _create_compact_control_buttons(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(3)

        current_type = self.profile_data.get('config', {}).get('invite_type', 'classic')
        is_admin_mode = current_type == 'admin' or (
                self.invite_type_combo and self.invite_type_combo.currentText() == "–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"
        )

        if is_admin_mode:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
            self.manage_admins_btn = QPushButton("üëë")
            self.manage_admins_btn.setFixedSize(28, 28)
            self.manage_admins_btn.setToolTip("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")

            self.bot_token_btn = QPushButton("ü§ñ")
            self.bot_token_btn.setFixedSize(28, 28)
            self.bot_token_btn.setToolTip("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")

            layout.addWidget(self.manage_admins_btn)
            layout.addWidget(self.bot_token_btn)
            widget.setFixedWidth(120)
        else:
            self.manage_admins_btn = None
            self.bot_token_btn = None
            widget.setFixedWidth(80)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
        self.settings_btn = QPushButton("‚öôÔ∏è")
        self.settings_btn.setFixedSize(28, 28)
        self.settings_btn.setToolTip("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.delete_btn = QPushButton("üóëÔ∏è")
        self.delete_btn.setFixedSize(28, 28)
        self.delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")

        # –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        button_style = """
            QPushButton {
                background: rgba(156, 163, 175, 0.2);
                border: 1px solid rgba(156, 163, 175, 0.5);
                border-radius: 4px;
                color: #FFFFFF;
                font-size: 11px;
            }
            QPushButton:hover {
                background: rgba(156, 163, 175, 0.3);
            }
        """

        if hasattr(self, 'manage_admins_btn') and self.manage_admins_btn:
            self.manage_admins_btn.setStyleSheet(button_style.replace("156, 163, 175", "139, 92, 246"))
        if hasattr(self, 'bot_token_btn') and self.bot_token_btn:
            self.bot_token_btn.setStyleSheet(button_style.replace("156, 163, 175", "245, 158, 11"))

        self.settings_btn.setStyleSheet(button_style)
        self.delete_btn.setStyleSheet(button_style.replace("156, 163, 175", "239, 68, 68"))

        layout.addWidget(self.settings_btn)
        layout.addWidget(self.delete_btn)

        return widget

    def _create_expandable_section(self, main_layout):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â—É—é—Å—è —Å–µ–∫—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        self.expandable_widget = QWidget()
        self.expandable_widget.setMaximumHeight(0)
        self.expandable_widget.setMinimumHeight(0)
        self.expandable_widget.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è —Å–µ–∫—Ü–∏–∏
        self.expandable_widget.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(17, 24, 39, 0.95), stop:1 rgba(31, 41, 55, 0.85));
                border: 1px solid rgba(75, 85, 99, 0.5);
                border-top: 2px solid rgba(59, 130, 246, 0.3);
                border-radius: 0 0 8px 8px;
                margin-left: 10px;
                margin-right: 10px;
                margin-bottom: 4px;
            }
        """)

        layout = QVBoxLayout(self.expandable_widget)
        layout.setContentsMargins(12, 8, 12, 8)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(6)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ (–±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
        header = QLabel("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º")
        header.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-weight: 700;
                color: #FFFFFF;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 rgba(59, 130, 246, 0.3), stop:1 rgba(139, 92, 246, 0.3));
                padding: 6px 10px;
                border-radius: 4px;
                border: 1px solid rgba(59, 130, 246, 0.4);
                margin-bottom: 4px;
            }
        """)
        layout.addWidget(header)

        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å —Å —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFixedHeight(140)  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –ø–æ–¥ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã (55px –∫–∞–∂–¥—ã–π)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setStyleSheet("""
            QScrollArea {
                background: rgba(0, 0, 0, 0.2);
                border: 1px solid rgba(75, 85, 99, 0.3);
                border-radius: 4px;
            }
            QScrollBar:vertical {
                background: rgba(255, 255, 255, 0.05);
                width: 6px;
                border-radius: 3px;
            }
            QScrollBar::handle:vertical {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 rgba(59, 130, 246, 0.6), stop:1 rgba(139, 92, 246, 0.6));
                border-radius: 3px;
                min-height: 15px;
            }
            QScrollBar::handle:vertical:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 rgba(59, 130, 246, 0.8), stop:1 rgba(139, 92, 246, 0.8));
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
        """)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–æ–≤ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        self.chat_stats_container = QWidget()
        self.chats_layout = QVBoxLayout(self.chat_stats_container)
        self.chats_layout.setContentsMargins(4, 4, 4, 4)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        self.chats_layout.setSpacing(2)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –≤–∏–¥–∂–µ—Ç–∞–º–∏

        scroll.setWidget(self.chat_stats_container)
        layout.addWidget(scroll)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â—É—é—Å—è —Å–µ–∫—Ü–∏—é –≤ main_layout
        main_layout.addWidget(self.expandable_widget)

        # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        self.expand_animation = QPropertyAnimation(self.expandable_widget, b"maximumHeight")
        self.expand_animation.setDuration(300)
        self.expand_animation.setEasingCurve(QEasingCurve.OutCubic)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._load_chat_stats()

    def toggle_expansion(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        self.is_expanded = not self.is_expanded
        self.expand_button.toggle()

        if self.is_expanded:
            logger.info(f"üìÇ –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {self.profile_name}")

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._load_chat_stats()

            # –í—ã—Å–æ—Ç–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ (30px) + —Å–∫—Ä–æ–ª–ª (200px) + –æ—Ç—Å—Ç—É–ø—ã (24px) = 254px
            target_height = 254

            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º
            self.expand_animation.setStartValue(0)
            self.expand_animation.setEndValue(target_height)
            self.expand_animation.start()

            if self.is_running:
                self.chat_stats_timer.start(3000)

        else:
            logger.info(f"üìÅ –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {self.profile_name}")

            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            current_height = self.expandable_widget.maximumHeight()
            self.expand_animation.setStartValue(current_height)
            self.expand_animation.setEndValue(0)
            self.expand_animation.start()

            self.chat_stats_timer.stop()

    def _load_chat_stats(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.chat_widgets:
            widget.deleteLater()
        self.chat_widgets.clear()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        chats_data = self._get_chats_statistics()

        if not chats_data:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
            empty_widget = QWidget()
            empty_widget.setFixedHeight(60)
            empty_layout = QVBoxLayout(empty_widget)
            empty_layout.setAlignment(Qt.AlignCenter)
            empty_layout.setSpacing(4)

            empty_widget.setStyleSheet("""
                QWidget {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                        stop:0 rgba(59, 130, 246, 0.1), stop:1 rgba(139, 92, 246, 0.1));
                    border: 2px dashed rgba(59, 130, 246, 0.3);
                    border-radius: 6px;
                    margin: 2px;
                }
            """)

            icon_label = QLabel("üìä")
            icon_label.setAlignment(Qt.AlignCenter)
            icon_label.setStyleSheet("font-size: 18px; margin-bottom: 2px;")

            text_label = QLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Ç–∞–º")
            text_label.setAlignment(Qt.AlignCenter)
            text_label.setStyleSheet("""
                color: rgba(255, 255, 255, 0.8);
                font-size: 11px;
                font-weight: 600;
            """)

            hint_label = QLabel("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            hint_label.setAlignment(Qt.AlignCenter)
            hint_label.setStyleSheet("""
                color: rgba(255, 255, 255, 0.5);
                font-size: 9px;
            """)

            empty_layout.addWidget(icon_label)
            empty_layout.addWidget(text_label)
            empty_layout.addWidget(hint_label)

            self.chats_layout.addWidget(empty_widget)
            self.chat_widgets.append(empty_widget)

        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —á–∞—Ç–æ–≤
            for i, (chat_link, stats) in enumerate(chats_data.items()):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ChatStatWidget
                chat_widget = ChatStatWidget(chat_link, stats)
                self.chats_layout.addWidget(chat_widget)
                self.chat_widgets.append(chat_widget)

                # –û—á–µ–Ω—å —Ç–æ–Ω–∫–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 1)
                if i < len(chats_data) - 1:
                    separator = QFrame()
                    separator.setFrameShape(QFrame.HLine)
                    separator.setFixedHeight(1)
                    separator.setStyleSheet("""
                        QFrame {
                            background: rgba(75, 85, 99, 0.15);
                            border: none;
                            margin: 1px 2px;
                        }
                    """)
                    self.chats_layout.addWidget(separator)

        # –î–æ–±–∞–≤–ª—è–µ–º stretch –≤ –∫–æ–Ω—Ü–µ
        self.chats_layout.addStretch()

    def _get_chats_statistics(self) -> Dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç–∞–º"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if _inviter_module_manager and self.profile_name in _inviter_module_manager.active_processes:
                process = _inviter_module_manager.active_processes[self.profile_name]

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                goal = 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if hasattr(process, 'config'):
                    if hasattr(process.config, 'success_per_chat'):
                        goal = process.config.success_per_chat
                    elif isinstance(process.config, dict):
                        goal = process.config.get('success_per_chat', 100)


                chat_stats = {}

                if hasattr(process, 'processed_users') and process.processed_users:
                    from src.entities.moduls.inviter import UserStatus

                    # –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –ß–ê–¢–û–í
                    chat_list = []
                    if hasattr(process, 'chat_threads') and process.chat_threads:
                        chat_list = [thread.chat_link for thread in process.chat_threads if
                                     hasattr(thread, 'chat_link')]
                    elif hasattr(process, 'chats_list') and process.chats_list:
                        chat_list = process.chats_list[:5]
                    elif hasattr(self, 'chats_list'):
                        chat_list = self.chats_list[:3]

                    if not chat_list:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —á–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {self.profile_name}")
                        chat_list = ["@test_chat"]

                    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ß–ê–¢–ê
                    for chat_link in chat_list:
                        chat_stats[chat_link] = {
                            'success': 0,
                            'privacy': 0,
                            'spam_blocks': 0,
                            'writeoff': 0,
                            'errors': 0,
                            'not_found': 0,
                            'already_in': 0,
                            'flood_wait': 0,
                            'total': 0,
                            'goal': goal,
                            'status': 'active',
                            'accounts_used': 0,
                            'frozen': 0,
                            'speed': 0
                        }

                    # –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –†–ê–°–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ß–ê–¢–ê–ú

                    for username, user_data in process.processed_users.items():
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–º—É —á–∞—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        user_chat = None

                        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ï—Å–ª–∏ –≤ user_data –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
                        if hasattr(user_data, 'chat_link'):
                            user_chat = user_data.chat_link
                        elif hasattr(user_data, 'target_chat'):
                            user_chat = user_data.target_chat
                        elif isinstance(user_data, dict):
                            user_chat = user_data.get('chat_link') or user_data.get('target_chat')

                        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
                        if not user_chat:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                            import hashlib
                            hash_val = int(hashlib.md5(username.encode()).hexdigest(), 16)
                            chat_index = hash_val % len(chat_list)
                            user_chat = chat_list[chat_index]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                        if user_chat not in chat_stats:
                            # –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                            user_chat = chat_list[0]

                        # –ü–û–î–°–ß–ò–¢–´–í–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ß–ê–¢–ê
                        chat_stats[user_chat]['total'] += 1

                        if hasattr(user_data, 'status'):
                            if user_data.status == UserStatus.INVITED:
                                chat_stats[user_chat]['success'] += 1
                                logger.debug(f"  ‚úÖ {username} ‚Üí {user_chat}: SUCCESS")
                            elif user_data.status == UserStatus.PRIVACY:
                                chat_stats[user_chat]['privacy'] += 1
                                logger.debug(f"  üîí {username} ‚Üí {user_chat}: PRIVACY")
                            elif user_data.status == UserStatus.SPAM_BLOCK:
                                chat_stats[user_chat]['spam_blocks'] += 1
                                logger.debug(f"  üö´ {username} ‚Üí {user_chat}: SPAM_BLOCK")
                            elif user_data.status == UserStatus.ERROR:
                                chat_stats[user_chat]['writeoff'] += 1
                                logger.debug(f"  ‚ùå {username} ‚Üí {user_chat}: ERROR")
                            elif user_data.status == UserStatus.NOT_FOUND:
                                chat_stats[user_chat]['not_found'] += 1
                                logger.debug(f"  üëª {username} ‚Üí {user_chat}: NOT_FOUND")
                            elif user_data.status == UserStatus.ALREADY_IN:
                                chat_stats[user_chat]['already_in'] += 1
                                logger.debug(f"  üë• {username} ‚Üí {user_chat}: ALREADY_IN")
                            elif user_data.status == UserStatus.FLOOD_WAIT:
                                chat_stats[user_chat]['flood_wait'] += 1
                                logger.debug(f"  ‚è≥ {username} ‚Üí {user_chat}: FLOOD_WAIT")
                            else:
                                chat_stats[user_chat]['errors'] += 1
                                logger.debug(f"  üí• {username} ‚Üí {user_chat}: OTHER_ERROR")

                    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–©–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ß–ê–¢–ê
                    total_accounts_used = len(getattr(process, 'finished_successfully_accounts', []))
                    total_frozen = len(getattr(process, 'frozen_accounts', []))

                    for chat_link in chat_stats:
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
                        if chat_stats[chat_link]['total'] > 0:
                            total_activity = sum(stats['total'] for stats in chat_stats.values())
                            if total_activity > 0:
                                activity_ratio = chat_stats[chat_link]['total'] / total_activity
                                chat_stats[chat_link]['accounts_used'] = int(total_accounts_used * activity_ratio)
                                chat_stats[chat_link]['frozen'] = int(total_frozen * activity_ratio)
                            else:
                                chat_stats[chat_link]['accounts_used'] = 0
                                chat_stats[chat_link]['frozen'] = 0

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
                        if hasattr(process, 'chat_protection_manager'):
                            if process.chat_protection_manager.is_chat_blocked(chat_link):
                                chat_stats[chat_link]['status'] = 'blocked'

                        if chat_stats[chat_link]['success'] >= chat_stats[chat_link]['goal'] and chat_stats[chat_link][
                            'goal'] > 0:
                            chat_stats[chat_link]['status'] = 'completed'

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                        if hasattr(process, 'started_at') and process.started_at:
                            from datetime import datetime
                            elapsed = (datetime.now() - process.started_at).total_seconds() / 60
                            if elapsed > 0:
                                chat_stats[chat_link]['speed'] = int(chat_stats[chat_link]['success'] / elapsed)

                    return chat_stats

                # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ processed_users –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                elif hasattr(process, 'chat_stats') and process.chat_stats:
                    logger.debug(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É chat_stats")

                    for chat_link, stats in process.chat_stats.items():
                        chat_data = {
                            'success': stats.get('success', 0),
                            'total': stats.get('total', 0),
                            'goal': goal,
                            'status': 'active',
                            'accounts_used': len(getattr(process, 'finished_successfully_accounts', [])),
                            'privacy': stats.get('privacy', 0),
                            'frozen': len(getattr(process, 'frozen_accounts', [])),
                            'writeoff': stats.get('writeoff', 0),
                            'spam_blocks': stats.get('spam_blocks', 0),
                            'errors': stats.get('errors', 0),
                            'speed': 0,
                            'not_found': stats.get('not_found', 0),
                            'already_in': stats.get('already_in', 0),
                            'flood_wait': stats.get('flood_wait', 0)
                        }

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
                        if hasattr(process, 'chat_protection_manager'):
                            if process.chat_protection_manager.is_chat_blocked(chat_link):
                                chat_data['status'] = 'blocked'

                        if chat_data['success'] >= chat_data['goal'] and chat_data['goal'] > 0:
                            chat_data['status'] = 'completed'

                        chat_stats[chat_link] = chat_data

                    logger.debug(f"üéØ –í–û–ó–í–†–ê–©–ê–ï–ú –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(chat_stats)} —á–∞—Ç–æ–≤")
                    return chat_stats

                # –í–∞—Ä–∏–∞–Ω—Ç 3: –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —á–∞—Ç–æ–≤
                else:
                    logger.debug(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")

                    # –ë–µ—Ä–µ–º —á–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    chat_list = []
                    if hasattr(process, 'chat_queue'):
                        # –ö–æ–ø–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
                        temp_queue = []
                        try:
                            while not process.chat_queue.empty():
                                chat = process.chat_queue.get_nowait()
                                chat_list.append(chat)
                                temp_queue.append(chat)
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                            for chat in temp_queue:
                                process.chat_queue.put(chat)
                        except:
                            pass

                    if not chat_list and hasattr(self, 'chats_list'):
                        chat_list = self.chats_list[:3]

                    if not chat_list:
                        chat_list = ["@test_chat"]

                    for chat in chat_list:
                        chat_stats[chat] = {
                            'success': 0,
                            'total': 0,
                            'goal': goal,
                            'status': 'active',
                            'accounts_used': 0,
                            'privacy': 0,
                            'frozen': 0,
                            'writeoff': 0,
                            'spam_blocks': 0,
                            'errors': 0,
                            'speed': 0,
                            'not_found': 0,
                            'already_in': 0,
                            'flood_wait': 0
                        }

                    return chat_stats

            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
            return self._load_stats_from_file()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return {}

    def _load_stats_from_file(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–ª—è —á–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            from pathlib import Path
            profile_folder = Path(self.profile_data.get('folder_path', ''))

            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_files = [
                profile_folder / "chat_statistics.json",
                profile_folder / "–û—Ç—á–µ—Ç—ã" / "chat_stats.json",
                profile_folder / "processed_users.json",
            ]

            for stats_file in stats_files:
                if stats_file.exists():
                    logger.debug(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞: {stats_file}")
                    import json
                    with open(stats_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        if data:
                            return data

            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
            if self.chats_list:
                initial_stats = {}
                for i, chat in enumerate(self.chats_list[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —á–∞—Ç–∞
                    initial_stats[chat] = {
                        'success': 0,
                        'total': 0,
                        'goal': 100,
                        'status': 'active',
                        'accounts_used': 0,
                        'privacy': 0,
                        'frozen': 0,
                        'writeoff': 0,
                        'spam_blocks': 0,
                        'errors': 0,
                        'speed': 0,
                        'not_found': 0,
                        'already_in': 0,
                        'flood_wait': 0
                    }
                return initial_stats
            else:
                logger.debug(f"‚ö†Ô∏è –ù–µ—Ç —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {self.profile_name}")
                return {}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            return {}

    def _update_chat_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤"""
        if self.is_expanded and self.is_running:

            new_stats = self._get_chats_statistics()

            if new_stats:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
                if len(new_stats) != len(self.chat_widgets) - 1:  # -1 –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ stretch
                    self._load_chat_stats()
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
                    for widget in self.chat_widgets:
                        if isinstance(widget, ChatStatWidget):
                            if widget.chat_link in new_stats:
                                old_stats = widget.stats
                                new_data = new_stats[widget.chat_link]

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                if old_stats != new_data:
                                    widget.stats = new_data
                                    # –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º layout
                                    while widget.layout().count():
                                        child = widget.layout().takeAt(0)
                                        if child.widget():
                                            child.widget().deleteLater()
                                    widget._create_layout()
                                    logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤–∏–¥–∂–µ—Ç –¥–ª—è {widget.chat_link}")

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∫ –∫–Ω–æ–ø–∫–∞–º"""
        try:
            if self.users_btn:
                self.users_btn.clicked.connect(self._on_users_settings)

            if self.chats_btn:
                self.chats_btn.clicked.connect(self._on_chats_settings)

            if self.start_stop_btn:
                self.start_stop_btn.clicked.connect(self._toggle_profile)

            if self.name_edit:
                self.name_edit.textChanged.connect(self._on_name_changed)

            if self.invite_type_combo:
                self.invite_type_combo.currentTextChanged.connect(self._on_invite_type_changed_simple)

            self._reconnect_control_signals()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {self.profile_name}: {e}")

    def _on_invite_type_changed_simple(self, new_type: str):
        """–ü—Ä–æ—Å—Ç–∞—è —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫"""
        try:
            logger.debug(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –∏–Ω–≤–∞–π—Ç–∞ –Ω–∞: {new_type}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if new_type == "–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É":
                self._save_invite_type_settings('admin')
            else:
                self._save_invite_type_settings('classic')

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
            self._update_control_buttons_visibility()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞: {e}")

    def _update_control_buttons_visibility(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞"""
        try:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'control_buttons_widget'):
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–π –≤–∏–¥–∂–µ—Ç –≤ layout
                header_widget = self.findChild(QWidget)
                if header_widget:
                    layout = header_widget.layout()
                    if layout:
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–∏–¥–∂–µ—Ç
                        old_widget = self.control_buttons_widget
                        layout.removeWidget(old_widget)
                        old_widget.deleteLater()

                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫
                        self.control_buttons_widget = self._create_compact_control_buttons()
                        layout.addWidget(self.control_buttons_widget)

                        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
                        self._reconnect_control_signals()


        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    def _reconnect_control_signals(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è"""
        try:
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
            if hasattr(self, 'manage_admins_btn') and self.manage_admins_btn:
                self.manage_admins_btn.clicked.connect(self._on_manage_admins)

            if hasattr(self, 'bot_token_btn') and self.bot_token_btn:
                self.bot_token_btn.clicked.connect(self._on_bot_token_settings)

            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            if self.settings_btn:
                self.settings_btn.clicked.connect(self._on_extended_settings)

            if self.delete_btn:
                self.delete_btn.clicked.connect(self._delete_profile)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–Ω–æ–ø–æ–∫: {e}")

    def _save_invite_type_settings(self, invite_type: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞"""
        try:
            config_update = {
                'invite_type': invite_type
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å
            from src.modules.impl.inviter import update_profile_config
            success = update_profile_config(self.profile_name, config_update)

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'config' not in self.profile_data:
                    self.profile_data['config'] = {}
                self.profile_data['config'].update(config_update)

                logger.debug(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {invite_type}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞: {e}")

    def _on_name_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.name_edit:
            return

        new_name = self.name_edit.text().strip() or self.profile_name
        if new_name != self.profile_name:
            self.profile_name = new_name
            self.settings_changed.emit(self.profile_name, {'name': new_name})

    def _update_start_button(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not hasattr(self, 'start_stop_btn') or not self.start_stop_btn:
            return

        if self.is_running:
            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø"
            self.start_stop_btn.setText("–°—Ç–æ–ø")
            self.start_stop_btn.setStyleSheet("""
                QPushButton {
                    background: #EF4444;
                    color: white;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background: #DC2626;
                }
                QPushButton:pressed {
                    background: #B91C1C;
                }
            """)
        else:
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫"
            self.start_stop_btn.setText("–ó–∞–ø—É—Å–∫")
            self.start_stop_btn.setStyleSheet("""
                QPushButton {
                    background: #10B981;
                    color: white;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background: #059669;
                }
                QPushButton:pressed {
                    background: #047857;
                }
            """)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤
    def _on_manage_admins(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏"""
        try:
            logger.info(f"üëë –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

            from src.modules.impl.inviter.profile_manager import InviterProfileManager
            profile_manager = InviterProfileManager()
            profile_manager.load_all_profiles()
            profile = profile_manager.get_profile(self.profile_name)

            if not profile:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {self.profile_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            selected_admins = show_main_admins_dialog(self, self.profile_name)

            if selected_admins:
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(selected_admins)}")

                try:
                    from gui.notifications import show_success
                    show_success(
                        "–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã",
                        f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ {len(selected_admins)} –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{self.profile_name}/–ê–¥–º–∏–Ω—ã/'"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏: {e}")

    def _on_bot_token_settings(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤"""
        try:
            logger.info(f"ü§ñ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

            from gui.dialogs import show_bot_tokens_dialog
            saved_tokens = show_bot_tokens_dialog(self, self.profile_name)

            if saved_tokens:
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

                try:
                    from gui.notifications import show_success
                    show_success(
                        "–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤",
                        f"ü§ñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤\n"
                        f"–§–∞–π–ª: {self.profile_name}/bot_tokens.txt"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤: {e}")

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —Å—Ç—Ä–æ–∫–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.setStyleSheet("""
            QWidget#InviterProfileRow {
                background: #1F2937;
                border: 1px solid #4B5563;
                border-radius: 8px;
                padding: 8px;
                margin: 6px 0;
            }
            QWidget#InviterProfileRow:hover {
                background: #374151;
                border: 1px solid #2563EB;
            }
        """)

    def _toggle_profile(self):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if self.is_running:
            logger.info(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å: {self.profile_name}")
            self.manually_stopped = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            self.profile_stopped.emit(self.profile_name)
        else:
            logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å: {self.profile_name}")
            self.manually_stopped = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            self.profile_started.emit(self.profile_name)

    def update_running_state(self, is_running: bool):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫–Ω–æ–ø–∫–∏"""
        old_state = self.is_running
        self.is_running = is_running

        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.profile_name}: {old_state} ‚Üí {is_running}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        if hasattr(self, 'status_indicator'):
            if is_running:
                self.status_indicator.setStyleSheet("""
                    QLabel {
                        font-size: 14px;
                        color: #10B981;
                        font-weight: bold;
                    }
                """)
            else:
                self.status_indicator.setStyleSheet("""
                    QLabel {
                        font-size: 14px;
                        color: #6B7280;
                        font-weight: bold;
                    }
                """)

        # –ì–õ–ê–í–ù–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._update_start_button()

        # –£–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä–∞–º–∏
        if self.is_running:
            if hasattr(self, 'progress_timer'):
                self.progress_timer.start(1000)
            if hasattr(self, 'completion_timer'):
                self.completion_timer.start(2000)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            if hasattr(self, 'status_label'):
                self.status_label.setText("üöÄ –ó–∞–ø—É—â–µ–Ω...")
        else:
            if hasattr(self, 'progress_timer'):
                self.progress_timer.stop()
            if hasattr(self, 'completion_timer'):
                self.completion_timer.stop()
            if hasattr(self, 'chat_stats_timer'):
                self.chat_stats_timer.stop()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if hasattr(self, 'status_label'):
                if self.manually_stopped:
                    self.status_label.setText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                else:
                    self.status_label.setText("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _update_progress_from_module(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è"""
        try:
            from src.modules.impl.inviter import get_profile_progress

            progress_data = get_profile_progress(self.profile_name)

            if progress_data:
                total_goal = progress_data.get('total_goal', 0)
                success = progress_data.get('success', 0)
                errors = progress_data.get('errors', 0)

                self.saved_progress['success'] = success
                self.saved_progress['errors'] = errors
                self.saved_progress['total_goal'] = total_goal

                if total_goal > 0:
                    self.progress_bar.setRange(0, total_goal)
                    self.progress_bar.setValue(success)
                    self.progress_bar.setFormat(f"{success}/{total_goal}")

                    self.success_label.setText(f"‚úÖ{success}")
                    self.errors_label.setText(f"‚ùå{errors}")

                    speed = progress_data.get('speed', 0)
                    self.speed_label.setText(f"‚ö°{speed}")

                    status = progress_data.get('status', '–†–∞–±–æ—Ç–∞–µ—Ç...')
                    if hasattr(self, 'status_label'):
                        self.status_label.setText(status)

                    if success >= total_goal:
                        if hasattr(self, 'status_label'):
                            self.status_label.setText("‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                        self.saved_progress['stop_reason'] = "–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {self.profile_name}: {e}")

    def _check_process_completion(self):
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if not _inviter_module_manager:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            is_actually_running = self.profile_name in _inviter_module_manager.active_processes

            # –ï—Å–ª–∏ UI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≤ –º–æ–¥—É–ª–µ –µ–≥–æ –Ω–µ—Ç
            if self.is_running and not is_actually_running:
                logger.info(f"üèÅ –ü—Ä–æ—Ü–µ—Å—Å {self.profile_name} –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –º–æ–¥—É–ª–µ, –æ–±–Ω–æ–≤–ª—è–µ–º UI")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if not self.manually_stopped:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º (—Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞)
                    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {self.profile_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    if hasattr(self, 'status_label'):
                        self.status_label.setText("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    # –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
                    logger.info(f"‚èπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å {self.profile_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    if hasattr(self, 'status_label'):
                        self.status_label.setText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                self.update_running_state(False)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.manually_stopped = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è {self.profile_name}: {e}")

    def sync_with_module_state(self):
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –º–æ–¥—É–ª–µ–º"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if not _inviter_module_manager:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–æ–¥—É–ª–µ
            is_actually_running = self.profile_name in _inviter_module_manager.active_processes

            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            if self.is_running != is_actually_running:
                logger.info(
                    f"üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {self.profile_name}: UI={self.is_running}, Module={is_actually_running}")

                # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∞ UI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω
                if self.is_running and not is_actually_running:
                    self.manually_stopped = False  # –≠—Ç–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

                self.update_running_state(is_actually_running)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _delete_profile(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        self.profile_deleted.emit(self.profile_name)

    def _load_actual_users_from_file(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            from src.modules.impl.inviter import get_profile_users_from_file

            actual_users = get_profile_users_from_file(self.profile_name)

            if actual_users is not None:
                return actual_users
            else:
                return getattr(self, 'users_list', [])

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è {self.profile_name}: {e}")
            return getattr(self, 'users_list', [])

    def _load_actual_chats_from_file(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            from src.modules.impl.inviter import get_profile_chats_from_file

            actual_chats = get_profile_chats_from_file(self.profile_name)

            if actual_chats is not None:
                return actual_chats
            else:
                return getattr(self, 'chats_list', [])

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è {self.profile_name}: {e}")
            return getattr(self, 'chats_list', [])

    def _on_users_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            actual_users = self._load_actual_users_from_file()
            users = show_users_base_dialog(self, actual_users, self.profile_name)

            if users is not None:
                from src.modules.impl.inviter import update_profile_users

                success = update_profile_users(self.profile_name, users)

                if success:
                    self.users_list = users
                    users_count = len(users)

                    if users_count >= 1000000:
                        button_text = f"üë•{users_count // 1000000}.{(users_count % 1000000) // 100000}M"
                    elif users_count >= 1000:
                        button_text = f"üë•{users_count // 1000}K"
                    else:
                        button_text = f"üë•{users_count}"

                    if self.users_btn:
                        self.users_btn.setText(button_text)
                        self.users_btn.setToolTip(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count:,}")

                    logger.info(f"‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {self.profile_name}: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                    try:
                        from gui.notifications import show_success
                        show_success(
                            "–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {users_count:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–í —Ñ–∞–π–ª: –ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
                        )
                    except:
                        pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    def _on_chats_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã —á–∞—Ç–æ–≤"""
        try:
            current_chats = getattr(self, 'chats_list', [])
            chats = show_chats_base_dialog(self, current_chats)

            if chats is not None:
                from src.modules.impl.inviter import update_profile_chats

                success = update_profile_chats(self.profile_name, chats)

                if success:
                    self.chats_list = chats
                    chats_count = len(chats)

                    if chats_count >= 1000:
                        button_text = f"üí¨{chats_count // 1000}K"
                    else:
                        button_text = f"üí¨{chats_count}"

                    if self.chats_btn:
                        self.chats_btn.setText(button_text)
                        self.chats_btn.setToolTip(f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chats_count:,}")

                    logger.info(f"‚úÖ –ë–∞–∑–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {self.profile_name}: {chats_count} —á–∞—Ç–æ–≤")

                    try:
                        from gui.notifications import show_success
                        show_success(
                            "–ë–∞–∑–∞ —á–∞—Ç–æ–≤",
                            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {chats_count:,} —á–∞—Ç–æ–≤\n–í —Ñ–∞–π–ª: –ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
                        )
                    except:
                        pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤: {e}")

    def _on_extended_settings(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if _inviter_module_manager:
                fresh_profile = _inviter_module_manager.profile_manager.get_profile(self.profile_name)
                if fresh_profile:
                    current_config = fresh_profile.get('config', {})
                else:
                    current_config = self.profile_data.get('config', {})
            else:
                current_config = self.profile_data.get('config', {})

            new_settings = show_extended_settings_dialog(self, current_config)

            if new_settings is not None:
                self._save_extended_settings_to_module(new_settings)
                logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {self.profile_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def _save_extended_settings_to_module(self, settings: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å"""
        try:
            from src.modules.impl.inviter import update_profile_config

            success = update_profile_config(self.profile_name, settings)

            if success:
                if 'config' not in self.profile_data:
                    self.profile_data['config'] = {}

                self.profile_data['config'].update(settings)
                self.extended_settings = settings

                logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON –¥–ª—è {self.profile_name}")

                try:
                    from gui.notifications import show_success
                    show_success(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è '{self.profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –º–æ–¥—É–ª—å: {e}")

    def update_progress(self, done: int, total: int):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞–ø—Ä—è–º—É—é"""
        if self.progress_bar:
            self.progress_bar.setRange(0, total)
            self.progress_bar.setValue(done)

    def update_counters(self, success, errors, total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏"""
        if hasattr(self, 'success_label'):
            self.success_label.setText(f"‚úÖ{success}")
        if hasattr(self, 'errors_label'):
            self.errors_label.setText(f"‚ùå{errors}")

    def update_last_action(self, action_text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if hasattr(self, 'status_label'):
            self.status_label.setText(action_text)


# –ö–ª–∞—Å—Å InviterTableWidget –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class InviterTableWidget(QWidget):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""

    def __init__(self):
        super().__init__()
        self.setObjectName("InviterTableWidget")
        self.profile_rows = {}

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª –æ–±–ª–∞—Å—Ç—å
        self._create_scroll_area(layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª—è
        self._load_profiles_from_module()

        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        effect = QGraphicsOpacityEffect()
        effect.setOpacity(0.0)
        self.setGraphicsEffect(effect)

        self.sync_timer = QTimer()
        self.sync_timer.timeout.connect(self.force_sync_all_profiles)
        self.sync_timer.start(5000)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def set_parent_manager(self, manager):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.parent_manager = manager

    def force_sync_all_profiles(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –º–æ–¥—É–ª–µ–º"""
        logger.debug("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")

        for profile_name, profile_row in self.profile_rows.items():
            try:
                profile_row.sync_with_module_state()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {profile_name}: {e}")

    def _create_scroll_area(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å"""
        self.scroll_area = QScrollArea()
        self.scroll_area.setObjectName("InviterScroll")
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profiles_container = QWidget()
        self.profiles_layout = QVBoxLayout(self.profiles_container)
        self.profiles_layout.setContentsMargins(10, 10, 10, 10)
        self.profiles_layout.setSpacing(8)

        self.scroll_area.setWidget(self.profiles_container)
        layout.addWidget(self.scroll_area)

        # –°—Ç–∏–ª–∏ —Å–∫—Ä–æ–ª–ª –±–∞—Ä–∞
        self.scroll_area.setStyleSheet("""
            QScrollArea#InviterScroll {
                background: transparent;
                border: none;
            }
            QScrollBar:vertical {
                background: rgba(255, 255, 255, 0.05);
                width: 8px;
                border-radius: 4px;
                margin: 0;
            }
            QScrollBar::handle:vertical {
                background: rgba(255, 255, 255, 0.2);
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: rgba(59, 130, 246, 0.6);
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
        """)

    def _load_profiles_from_module(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –º–æ–¥—É–ª—è"""
        try:
            from src.modules.impl.inviter import get_all_profiles_for_gui
            from src.modules.impl.inviter.profile_manager import InviterProfileManager

            profile_manager = InviterProfileManager()
            profile_manager.load_all_profiles()

            profiles_data = get_all_profiles_for_gui()

            logger.info(f"üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –º–æ–¥—É–ª—è: {len(profiles_data)}")

            if not profiles_data:
                self._show_empty_state()
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
            for i, profile_data in enumerate(profiles_data):
                row = InviterProfileRow(profile_data)

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                row.profile_started.connect(self._on_profile_started)
                row.profile_stopped.connect(self._on_profile_stopped)
                row.profile_deleted.connect(self._on_profile_deleted)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.profile_rows[profile_data['name']] = row
                self.profiles_layout.addWidget(row)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏
                if i < len(profiles_data) - 1:
                    sep = QFrame()
                    sep.setFrameShape(QFrame.HLine)
                    sep.setFrameShadow(QFrame.Sunken)
                    sep.setStyleSheet("color: rgba(255,255,255,0.1);")
                    sep.setFixedHeight(1)
                    self.profiles_layout.addWidget(sep)

            self.profiles_layout.addStretch()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –º–æ–¥—É–ª—è: {e}")
            self._show_error_state(str(e))

    def _show_empty_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        empty_widget = QWidget()
        empty_layout = QVBoxLayout(empty_widget)
        empty_layout.setAlignment(Qt.AlignCenter)
        empty_layout.setSpacing(20)

        # –ì–ª–∞–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç
        empty_label = QLabel("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        empty_label.setAlignment(Qt.AlignCenter)
        empty_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.6);
                font-size: 24px;
                font-weight: 600;
                margin-bottom: 10px;
            }
        """)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = QLabel("–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–º")
        desc_label.setAlignment(Qt.AlignCenter)
        desc_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.4);
                font-size: 16px;
                margin-bottom: 20px;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        create_btn = QPushButton("+ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        create_btn.setFixedSize(200, 50)
        create_btn.setStyleSheet("""
            QPushButton {
                background: #22C55E;
                border: none;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 16px;
                font-weight: 600;
            }
            QPushButton:hover {
                background: #16A34A;
            }
            QPushButton:pressed {
                background: #15803D;
            }
        """)
        create_btn.clicked.connect(self._create_first_profile)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        container = QWidget()
        container.setStyleSheet("""
            QWidget {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 12px;
                border: 2px dashed rgba(255, 255, 255, 0.2);
                padding: 40px;
            }
        """)
        container_layout = QVBoxLayout(container)
        container_layout.addWidget(empty_label)
        container_layout.addWidget(desc_label)
        container_layout.addWidget(create_btn, 0, Qt.AlignCenter)

        empty_layout.addWidget(container)
        self.profiles_layout.addWidget(empty_widget)
        self.profiles_layout.addStretch()

    def _create_first_profile(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            from gui.dialogs.inviter_dialogs import show_create_profile_dialog
            from src.modules.impl.inviter import create_profile

            profile_data = show_create_profile_dialog(self)

            if profile_data and profile_data.get('name'):
                profile_name = profile_data['name']
                logger.info(f"üì® –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")

                result = create_profile(profile_name, profile_data)

                if result.get('success'):
                    logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile_name}")

                    self.reload_profiles()

                    if hasattr(self, 'parent_manager') and self.parent_manager:
                        self.parent_manager._reload_all_data()

                    try:
                        from gui.notifications import show_success
                        show_success(
                            "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω",
                            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–∫–µ–Ω—ã."
                        )
                    except:
                        pass
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {result.get('message')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def _show_error_state(self, error_message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        error_label = QLabel(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n{error_message}")
        error_label.setAlignment(Qt.AlignCenter)
        error_label.setStyleSheet("""
            QLabel {
                color: #EF4444;
                font-size: 14px;
                padding: 30px;
                background: rgba(239, 68, 68, 0.1);
                border-radius: 12px;
                border: 1px solid rgba(239, 68, 68, 0.3);
            }
        """)
        self.profiles_layout.addWidget(error_label)
        self.profiles_layout.addStretch()

    def _on_profile_started(self, profile_name):
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")

        # –°–†–ê–ó–£ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–°—Ç–æ–ø" –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if profile_name in self.profile_rows:
            profile_row = self.profile_rows[profile_name]
            profile_row.manually_stopped = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            profile_row.update_running_state(True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        import threading
        def start_task():
            try:
                from src.modules.impl.inviter import start_profile
                success = start_profile(profile_name)

                # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ "–ó–∞–ø—É—Å–∫"
                if not success and profile_name in self.profile_rows:
                    from PySide6.QtCore import QTimer
                    def reset_button():
                        if profile_name in self.profile_rows:
                            self.profile_rows[profile_name].update_running_state(False)
                            if hasattr(self.profile_rows[profile_name], 'status_label'):
                                self.profile_rows[profile_name].status_label.setText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")

                    QTimer.singleShot(100, reset_button)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ "–ó–∞–ø—É—Å–∫"
                if profile_name in self.profile_rows:
                    from PySide6.QtCore import QTimer
                    def reset_button_error():
                        if profile_name in self.profile_rows:
                            self.profile_rows[profile_name].update_running_state(False)
                            if hasattr(self.profile_rows[profile_name], 'status_label'):
                                self.profile_rows[profile_name].status_label.setText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")

                    QTimer.singleShot(100, reset_button_error)

        threading.Thread(target=start_task, daemon=True).start()

    def _on_profile_stopped(self, profile_name):
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        logger.info(f"‚è∏Ô∏è –†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")

        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ü–ï–†–ï–î –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º UI
        if profile_name in self.profile_rows:
            profile_row = self.profile_rows[profile_name]
            profile_row.manually_stopped = True  # –≠—Ç–æ —Ä—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            profile_row.update_running_state(False)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
        import threading
        def stop_task():
            try:
                from src.modules.impl.inviter import stop_profile
                result = stop_profile(profile_name)
                logger.info(f"‚èπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {profile_name}: {result}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

        threading.Thread(target=stop_task, daemon=True).start()


    def _on_profile_deleted(self, profile_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")

        try:
            from src.modules.impl.inviter import delete_profile
            result = delete_profile(profile_name)

            if result.get('success'):
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å")
                self.remove_profile(profile_name)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {profile_name}: {result.get('message')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")

    def add_profile(self, profile_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        profile_name = profile_data.get('name')

        if profile_name in self.profile_rows:
            self.remove_profile(profile_name)

        profile_row = InviterProfileRow(profile_data)

        profile_row.profile_started.connect(self._on_profile_started)
        profile_row.profile_stopped.connect(self._on_profile_stopped)
        profile_row.profile_deleted.connect(self._on_profile_deleted)

        self.profile_rows[profile_name] = profile_row

        self.profiles_layout.insertWidget(len(self.profile_rows) - 1, profile_row)

    def remove_profile(self, profile_name):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if profile_name in self.profile_rows:
            profile_row = self.profile_rows[profile_name]
            profile_row.deleteLater()
            del self.profile_rows[profile_name]
            logger.info(f"üóëÔ∏è –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {profile_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    def clear_profiles(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        for profile_row in self.profile_rows.values():
            profile_row.deleteLater()
        self.profile_rows.clear()
        logger.info("üßπ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    def start_all_profiles(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        for profile_row in self.profile_rows.values():
            if not profile_row.is_running:
                profile_row._toggle_profile()

    def stop_all_profiles(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        for profile_row in self.profile_rows.values():
            if profile_row.is_running:
                profile_row._toggle_profile()

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")

        try:
            from src.modules.impl.inviter import get_all_profiles_for_gui

            profiles_data = get_all_profiles_for_gui()

            self.clear_profiles()

            for profile_data in profiles_data:
                self.add_profile(profile_data)

            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(profiles_data)} –ø—Ä–æ—Ñ–∏–ª–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

    def reload_profiles(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –º–æ–¥—É–ª—è"""
        try:
            self.clear_profiles()

            for i in reversed(range(self.profiles_layout.count())):
                item = self.profiles_layout.itemAt(i)
                if item.widget():
                    item.widget().deleteLater()

            self._load_profiles_from_module()

            logger.info("üîÑ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –º–æ–¥—É–ª—è")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

    def animate_appearance(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        effect = self.graphicsEffect()
        if effect:
            self.opacity_animation = QPropertyAnimation(effect, b"opacity")
            self.opacity_animation.setDuration(800)
            self.opacity_animation.setStartValue(0.0)
            self.opacity_animation.setEndValue(1.0)
            self.opacity_animation.setEasingCurve(QEasingCurve.OutCubic)
            self.opacity_animation.start()