# gui/component_inviter/inviter_table_optimized.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ GUI
"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QScrollArea, QFrame,
    QLabel, QPushButton, QComboBox, QSpinBox, QCheckBox,
    QProgressBar, QSizePolicy, QGraphicsOpacityEffect, QLineEdit,
    QGridLayout
)
from PySide6.QtCore import (
    Qt, QTimer, QPropertyAnimation, QEasingCurve, Signal,
    QParallelAnimationGroup, QMutex, QMutexLocker
)
from PySide6.QtGui import QFont, QColor, QPainter, QPen, QBrush
from loguru import logger
from typing import Optional, Dict, List
import time


class OptimizedInviterProfileRow(QWidget):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è - –º–∏–Ω–∏–º—É–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""

    # –°–∏–≥–Ω–∞–ª—ã
    profile_started = Signal(str)
    profile_stopped = Signal(str)
    profile_deleted = Signal(str)
    settings_changed = Signal(str, dict)

    def __init__(self, profile_data):
        super().__init__()
        self.setAttribute(Qt.WA_StyledBackground, True)
        self.profile_data = profile_data
        self.profile_name = profile_data.get('name', '–ü—Ä–æ—Ñ–∏–ª—å')
        self.is_running = profile_data.get('is_running', False)

        # –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._cached_stats = {}
        self._last_update_time = 0
        self._update_interval = 2.0  # –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

        # –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤
        self.mutex = QMutex()

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.manually_stopped = False
        self.is_expanded = False
        self.is_updating = False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        self.users_list = profile_data.get('users_list', [])
        self.chats_list = profile_data.get('chats_list', [])
        self.extended_settings = profile_data.get('extended_settings', {})
        self.process_stats = profile_data.get('process_stats', {})

        self.bot_account = profile_data.get('bot_account', None)
        if not self.bot_account and profile_data.get('config', {}).get('bot_account'):
            self.bot_account = profile_data['config']['bot_account']

        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Ç–∞–π–º–µ—Ä—ã - –†–ï–ñ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø
        self.progress_timer = QTimer()
        self.progress_timer.timeout.connect(self._optimized_update_progress)
        self.progress_timer.setSingleShot(False)

        self.completion_timer = QTimer()
        self.completion_timer.timeout.connect(self._optimized_check_completion)
        self.completion_timer.setSingleShot(False)

        # –£–ë–ò–†–ê–ï–ú chat_stats_timer - —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π

        self.setObjectName("InviterProfileRow")
        self.setMinimumHeight(85)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.users_btn = None
        self.chats_btn = None
        self.settings_btn = None
        self.delete_btn = None
        self.start_stop_btn = None
        self.name_edit = None
        self.invite_type_combo = None
        self.manage_admins_btn = None
        self.bot_token_btn = None

        # –°–æ–∑–¥–∞–µ–º UI
        self._create_optimized_ui()
        self._apply_styles()
        self._connect_signals()

        # –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –≤ —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        self._register_for_background_monitoring()

        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º –†–ï–î–ö–ò–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.is_running:
            self.progress_timer.start(3000)  # –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 1
            self.completion_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 0.5

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–æ–¥—É–ª–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        QTimer.singleShot(1000, self.sync_with_module_state)

    def _register_for_background_monitoring(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            from gui.workers.background_workers import get_worker_manager

            worker_manager = get_worker_manager()
            if worker_manager and worker_manager.is_initialized:
                worker_manager.add_profile_monitoring(self.profile_name)

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏–≥–Ω–∞–ª–∞–º —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
                if worker_manager.profile_stats_worker:
                    worker_manager.profile_stats_worker.stats_updated.connect(
                        self._on_background_stats_updated
                    )

                logger.debug(f"üìä –ü—Ä–æ—Ñ–∏–ª—å {self.profile_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    def _on_background_stats_updated(self, profile_name: str, stats_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ"""
        if profile_name != self.profile_name:
            return

        try:
            with QMutexLocker(self.mutex):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                if stats_data != self._cached_stats:
                    self._cached_stats = stats_data

                    # –û–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –ë–ï–ó –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –º–æ–¥—É–ª—é
                    self._update_ui_from_cached_stats(stats_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {e}")

    def _update_ui_from_cached_stats(self, stats_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if hasattr(self, 'progress_bar') and self.progress_bar:
                total_goal = stats_data.get('total_goal', 0)
                success = stats_data.get('success', 0)

                if total_goal > 0:
                    self.progress_bar.setRange(0, total_goal)
                    self.progress_bar.setValue(success)
                    self.progress_bar.setFormat(f"{success}/{total_goal}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if hasattr(self, 'success_label') and self.success_label:
                self.success_label.setText(f"‚úÖ{stats_data.get('success', 0)}")

            if hasattr(self, 'errors_label') and self.errors_label:
                self.errors_label.setText(f"‚ùå{stats_data.get('errors', 0)}")

            if hasattr(self, 'speed_label') and self.speed_label:
                self.speed_label.setText(f"‚ö°{stats_data.get('speed', 0)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if hasattr(self, 'status_label') and self.status_label:
                status = stats_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                self.status_label.setText(status)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            is_running = stats_data.get('is_running', False)
            if self.is_running != is_running:
                self.update_running_state(is_running)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –∫—ç—à–∞: {e}")

    def _create_optimized_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UI"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 6, 10, 6)
        main_layout.setSpacing(0)

        # –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
        self.header_widget = QWidget()
        self.header_widget.setFixedHeight(85)
        self._create_compact_header_content(self.header_widget)

        main_layout.addWidget(self.header_widget)

        # –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–µ–∫—Ü–∏—è (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        self.expandable_widget = None

    def _create_compact_header_content(self, header_widget):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        layout = QHBoxLayout(header_widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        self.expand_button = self._create_expand_button()
        layout.addWidget(self.expand_button)

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–ø–∫–∏
        status_widget = self._create_compact_status()
        layout.addWidget(status_widget)

        start_widget = self._create_compact_start_button()
        layout.addWidget(start_widget)

        name_widget = self._create_compact_name()
        layout.addWidget(name_widget)

        type_widget = self._create_compact_invite_type()
        layout.addWidget(type_widget)

        users_widget = self._create_compact_users_base()
        layout.addWidget(users_widget)

        chats_widget = self._create_compact_chats_base()
        layout.addWidget(chats_widget)

        progress_widget = self._create_inline_progress()
        layout.addWidget(progress_widget)

        self.control_buttons_widget = self._create_compact_control_buttons()
        layout.addWidget(self.control_buttons_widget)

    def _create_expand_button(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è"""
        button = QPushButton("‚ñº")
        button.setFixedSize(24, 24)
        button.setObjectName("ExpandButton")
        button.clicked.connect(self._toggle_expansion_optimized)
        button.setStyleSheet("""
            QPushButton#ExpandButton {
                background: rgba(59, 130, 246, 0.2);
                border: 1px solid rgba(59, 130, 246, 0.4);
                border-radius: 4px;
                color: #FFFFFF;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton#ExpandButton:hover {
                background: rgba(59, 130, 246, 0.3);
            }
        """)
        return button

    def _toggle_expansion_optimized(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è"""
        self.is_expanded = not self.is_expanded

        if self.is_expanded:
            self.expand_button.setText("‚ñ≤")
            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
            if not self.expandable_widget:
                self._create_expandable_section_lazy()
        else:
            self.expand_button.setText("‚ñº")
            # –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
            if self.expandable_widget:
                self.expandable_widget.hide()

    def _create_expandable_section_lazy(self):
        """–õ–ï–ù–ò–í–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è —Å–µ–∫—Ü–∏–∏"""
        if self.expandable_widget:
            return

        self.expandable_widget = QWidget()
        self.expandable_widget.setFixedHeight(200)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞

        layout = QVBoxLayout(self.expandable_widget)
        layout.setContentsMargins(12, 8, 12, 8)
        layout.setSpacing(6)

        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤
        placeholder = QLabel("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        placeholder.setAlignment(Qt.AlignCenter)
        placeholder.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.6);
                font-size: 14px;
                padding: 20px;
                background: rgba(59, 130, 246, 0.1);
                border-radius: 8px;
                border: 1px solid rgba(59, 130, 246, 0.2);
            }
        """)

        layout.addWidget(placeholder)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout = self.layout()
        main_layout.addWidget(self.expandable_widget)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
        self.expandable_widget.show()

    def _create_compact_status(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
        widget = QWidget()
        widget.setFixedWidth(40)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setAlignment(Qt.AlignCenter)

        self.status_indicator = QLabel("‚óè")
        self.status_indicator.setAlignment(Qt.AlignCenter)
        self.status_indicator.setStyleSheet(f"""
            QLabel {{
                font-size: 14px;
                color: {'#10B981' if self.is_running else '#6B7280'};
                font-weight: bold;
            }}
        """)

        layout.addWidget(self.status_indicator)
        return widget

    def _create_compact_start_button(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞"""
        widget = QWidget()
        widget.setFixedWidth(80)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setAlignment(Qt.AlignCenter)

        self.start_stop_btn = QPushButton()
        self._update_start_button()
        self.start_stop_btn.setFixedSize(70, 28)

        layout.addWidget(self.start_stop_btn)
        return widget

    def _create_compact_name(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        widget = QWidget()
        widget.setFixedWidth(150)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        name_label = QLabel("–ü—Ä–æ—Ñ–∏–ª—å:")
        name_label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        self.name_edit = QLineEdit(self.profile_name)
        self.name_edit.setFixedWidth(140)
        self.name_edit.setFixedHeight(24)
        self.name_edit.setStyleSheet("""
            QLineEdit {
                background: #111827;
                border: 1px solid #374151;
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 12px;
                padding: 2px 4px;
            }
            QLineEdit:focus {
                border-color: #2563EB;
            }
        """)

        layout.addWidget(name_label)
        layout.addWidget(self.name_edit)
        return widget

    def _create_compact_invite_type(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞"""
        widget = QWidget()
        widget.setFixedWidth(120)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        type_label = QLabel("–¢–∏–ø:")
        type_label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        self.invite_type_combo = QComboBox()
        self.invite_type_combo.addItems(["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"])
        self.invite_type_combo.setFixedWidth(110)
        self.invite_type_combo.setFixedHeight(24)
        self.invite_type_combo.setStyleSheet("""
            QComboBox {
                background: #111827;
                border: 1px solid #374151;
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 11px;
                padding: 2px 4px;
            }
            QComboBox:focus {
                border-color: #2563EB;
            }
            QComboBox QAbstractItemView {
                background: #1F2937;
                border: 1px solid #374151;
                selection-background-color: #2563EB;
                color: #FFFFFF;
                font-size: 11px;
            }
        """)

        current_type = self.profile_data.get('config', {}).get('invite_type', 'classic')
        if current_type == 'admin':
            self.invite_type_combo.setCurrentText("–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
        else:
            self.invite_type_combo.setCurrentText("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π")

        layout.addWidget(type_label)
        layout.addWidget(self.invite_type_combo)
        return widget

    def _create_compact_users_base(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        widget = QWidget()
        widget.setFixedWidth(80)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        label = QLabel("–Æ–∑–µ—Ä—ã:")
        label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        users_count = len(self.users_list)
        if users_count >= 1000000:
            button_text = f"{users_count // 1000000}.{(users_count % 1000000) // 100000}M"
        elif users_count >= 1000:
            button_text = f"{users_count // 1000}K"
        else:
            button_text = f"{users_count}"

        self.users_btn = QPushButton(f"üë•{button_text}")
        self.users_btn.setFixedHeight(24)
        self.users_btn.setFixedWidth(70)
        self.users_btn.setToolTip(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count:,}")
        self.users_btn.setStyleSheet("""
            QPushButton {
                background: rgba(59, 130, 246, 0.2);
                border: 1px solid rgba(59, 130, 246, 0.5);
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 11px;
                font-weight: 600;
                padding: 0 4px;
            }
            QPushButton:hover {
                background: rgba(59, 130, 246, 0.3);
            }
        """)

        layout.addWidget(label)
        layout.addWidget(self.users_btn)
        return widget

    def _create_compact_chats_base(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –±–∞–∑–∞ —á–∞—Ç–æ–≤"""
        widget = QWidget()
        widget.setFixedWidth(80)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        label = QLabel("–ß–∞—Ç—ã:")
        label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        chats_count = len(self.chats_list)
        if chats_count >= 1000:
            button_text = f"{chats_count // 1000}K"
        else:
            button_text = f"{chats_count}"

        self.chats_btn = QPushButton(f"üí¨{button_text}")
        self.chats_btn.setFixedHeight(24)
        self.chats_btn.setFixedWidth(70)
        self.chats_btn.setToolTip(f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chats_count:,}")
        self.chats_btn.setStyleSheet("""
            QPushButton {
                background: rgba(16, 185, 129, 0.2);
                border: 1px solid rgba(16, 185, 129, 0.5);
                border-radius: 3px;
                color: #FFFFFF;
                font-size: 11px;
                font-weight: 600;
                padding: 0 4px;
            }
            QPushButton:hover {
                background: rgba(16, 185, 129, 0.3);
            }
        """)

        layout.addWidget(label)
        layout.addWidget(self.chats_btn)
        return widget

    def _create_inline_progress(self):
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        widget = QWidget()
        widget.setFixedWidth(200)
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)

        # –ú–µ—Ç–∫–∞
        progress_label = QLabel("–ü—Ä–æ–≥—Ä–µ—Å—Å:")
        progress_label.setStyleSheet("font-size: 10px; color: rgba(255,255,255,0.6);")

        # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        progress_layout = QHBoxLayout()
        progress_layout.setSpacing(4)

        # –ú–∏–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setFixedHeight(16)
        self.progress_bar.setFixedWidth(100)
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setFormat("%v/%m")
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 6px;
                background: rgba(255, 255, 255, 0.1);
                text-align: center;
                color: #FFFFFF;
                font-size: 8px;
                font-weight: 600;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #3B82F6, stop:1 #8B5CF6);
                border-radius: 5px;
            }
        """)

        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.success_label = QLabel("‚úÖ0")
        self.success_label.setStyleSheet("font-size: 10px; color: #10B981; font-weight: 600;")

        self.errors_label = QLabel("‚ùå0")
        self.errors_label.setStyleSheet("font-size: 10px; color: #EF4444; font-weight: 600;")

        self.speed_label = QLabel("‚ö°0")
        self.speed_label.setStyleSheet("font-size: 10px; color: #F59E0B; font-weight: 600;")

        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.success_label)
        progress_layout.addWidget(self.errors_label)
        progress_layout.addWidget(self.speed_label)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ...")
        self.status_label.setStyleSheet("font-size: 9px; color: rgba(255,255,255,0.5);")

        layout.addWidget(progress_label)
        layout.addLayout(progress_layout)
        layout.addWidget(self.status_label)

        return widget

    def _create_compact_control_buttons(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(3)

        current_type = self.profile_data.get('config', {}).get('invite_type', 'classic')
        is_admin_mode = current_type == 'admin' or (
                self.invite_type_combo and self.invite_type_combo.currentText() == "–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"
        )

        if is_admin_mode:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
            self.manage_admins_btn = QPushButton("üëë")
            self.manage_admins_btn.setFixedSize(28, 28)
            self.manage_admins_btn.setToolTip("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")

            self.bot_token_btn = QPushButton("ü§ñ")
            self.bot_token_btn.setFixedSize(28, 28)
            self.bot_token_btn.setToolTip("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")

            layout.addWidget(self.manage_admins_btn)
            layout.addWidget(self.bot_token_btn)
            widget.setFixedWidth(120)
        else:
            self.manage_admins_btn = None
            self.bot_token_btn = None
            widget.setFixedWidth(80)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
        self.settings_btn = QPushButton("‚öôÔ∏è")
        self.settings_btn.setFixedSize(28, 28)
        self.settings_btn.setToolTip("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.delete_btn = QPushButton("üóëÔ∏è")
        self.delete_btn.setFixedSize(28, 28)
        self.delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")

        # –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        button_style = """
            QPushButton {
                background: rgba(156, 163, 175, 0.2);
                border: 1px solid rgba(156, 163, 175, 0.5);
                border-radius: 4px;
                color: #FFFFFF;
                font-size: 11px;
            }
            QPushButton:hover {
                background: rgba(156, 163, 175, 0.3);
            }
        """

        if hasattr(self, 'manage_admins_btn') and self.manage_admins_btn:
            self.manage_admins_btn.setStyleSheet(button_style.replace("156, 163, 175", "139, 92, 246"))
        if hasattr(self, 'bot_token_btn') and self.bot_token_btn:
            self.bot_token_btn.setStyleSheet(button_style.replace("156, 163, 175", "245, 158, 11"))

        self.settings_btn.setStyleSheet(button_style)
        self.delete_btn.setStyleSheet(button_style.replace("156, 163, 175", "239, 68, 68"))

        layout.addWidget(self.settings_btn)
        layout.addWidget(self.delete_btn)

        return widget

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —Å—Ç—Ä–æ–∫–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.setStyleSheet("""
            QWidget#InviterProfileRow {
                background: #1F2937;
                border: 1px solid #4B5563;
                border-radius: 8px;
                padding: 8px;
                margin: 6px 0;
            }
            QWidget#InviterProfileRow:hover {
                background: #374151;
                border: 1px solid #2563EB;
            }
        """)

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∫ –∫–Ω–æ–ø–∫–∞–º"""
        try:
            if self.users_btn:
                self.users_btn.clicked.connect(self._on_users_settings)

            if self.chats_btn:
                self.chats_btn.clicked.connect(self._on_chats_settings)

            if self.start_stop_btn:
                self.start_stop_btn.clicked.connect(self._toggle_profile)

            if self.name_edit:
                self.name_edit.textChanged.connect(self._on_name_changed)

            if self.invite_type_combo:
                self.invite_type_combo.currentTextChanged.connect(self._on_invite_type_changed_simple)

            self._reconnect_control_signals()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {self.profile_name}: {e}")

    def _optimized_update_progress(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –ë–ï–ó –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –º–æ–¥—É–ª—é"""
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–µ–ª–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        pass

    def _optimized_check_completion(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π
        pass

    def sync_with_module_state(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –º–æ–¥—É–ª–µ–º"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if not _inviter_module_manager:
                return

            # –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            is_actually_running = self.profile_name in _inviter_module_manager.active_processes

            if self.is_running != is_actually_running:
                self.update_running_state(is_actually_running)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def update_running_state(self, is_running: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        old_state = self.is_running
        self.is_running = is_running

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        if hasattr(self, 'status_indicator'):
            if is_running:
                self.status_indicator.setStyleSheet("""
                    QLabel {
                        font-size: 14px;
                        color: #10B981;
                        font-weight: bold;
                    }
                """)
            else:
                self.status_indicator.setStyleSheet("""
                    QLabel {
                        font-size: 14px;
                        color: #6B7280;
                        font-weight: bold;
                    }
                """)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._update_start_button()

        # –£–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä–∞–º–∏ - –†–ï–î–ö–ò–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.is_running:
            if hasattr(self, 'progress_timer'):
                self.progress_timer.start(3000)  # –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            if hasattr(self, 'completion_timer'):
                self.completion_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            if hasattr(self, 'status_label'):
                self.status_label.setText("üöÄ –ó–∞–ø—É—â–µ–Ω...")
        else:
            if hasattr(self, 'progress_timer'):
                self.progress_timer.stop()
            if hasattr(self, 'completion_timer'):
                self.completion_timer.stop()

            if hasattr(self, 'status_label'):
                if self.manually_stopped:
                    self.status_label.setText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                else:
                    self.status_label.setText("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _update_start_button(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not hasattr(self, 'start_stop_btn') or not self.start_stop_btn:
            return

        if self.is_running:
            self.start_stop_btn.setText("–°—Ç–æ–ø")
            self.start_stop_btn.setStyleSheet("""
                QPushButton {
                    background: #EF4444;
                    color: white;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background: #DC2626;
                }
                QPushButton:pressed {
                    background: #B91C1C;
                }
            """)
        else:
            self.start_stop_btn.setText("–ó–∞–ø—É—Å–∫")
            self.start_stop_btn.setStyleSheet("""
                QPushButton {
                    background: #10B981;
                    color: white;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background: #059669;
                }
                QPushButton:pressed {
                    background: #047857;
                }
            """)

    def _toggle_profile(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if self.is_running:
            logger.info(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å: {self.profile_name}")
            self.manually_stopped = True
            self.profile_stopped.emit(self.profile_name)
        else:
            logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å: {self.profile_name}")
            self.manually_stopped = False
            self.profile_started.emit(self.profile_name)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def _on_name_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.name_edit:
            return

        new_name = self.name_edit.text().strip() or self.profile_name
        if new_name != self.profile_name:
            self.profile_name = new_name
            self.settings_changed.emit(self.profile_name, {'name': new_name})

    def _on_invite_type_changed_simple(self, new_type: str):
        """–ü—Ä–æ—Å—Ç–∞—è —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫"""
        try:
            logger.debug(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –∏–Ω–≤–∞–π—Ç–∞ –Ω–∞: {new_type}")

            if new_type == "–ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É":
                self._save_invite_type_settings('admin')
            else:
                self._save_invite_type_settings('classic')

            self._update_control_buttons_visibility()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞: {e}")

    def _update_control_buttons_visibility(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'control_buttons_widget'):
                header_widget = self.findChild(QWidget)
                if header_widget:
                    layout = header_widget.layout()
                    if layout:
                        old_widget = self.control_buttons_widget
                        layout.removeWidget(old_widget)
                        old_widget.deleteLater()

                        self.control_buttons_widget = self._create_compact_control_buttons()
                        layout.addWidget(self.control_buttons_widget)

                        self._reconnect_control_signals()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    def _reconnect_control_signals(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'manage_admins_btn') and self.manage_admins_btn:
                self.manage_admins_btn.clicked.connect(self._on_manage_admins)

            if hasattr(self, 'bot_token_btn') and self.bot_token_btn:
                self.bot_token_btn.clicked.connect(self._on_bot_token_settings)

            if self.settings_btn:
                self.settings_btn.clicked.connect(self._on_extended_settings)

            if self.delete_btn:
                self.delete_btn.clicked.connect(self._delete_profile)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–Ω–æ–ø–æ–∫: {e}")

    def _save_invite_type_settings(self, invite_type: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞"""
        try:
            config_update = {'invite_type': invite_type}

            from src.modules.impl.inviter import update_profile_config
            success = update_profile_config(self.profile_name, config_update)

            if success:
                if 'config' not in self.profile_data:
                    self.profile_data['config'] = {}
                self.profile_data['config'].update(config_update)

                logger.debug(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {invite_type}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–ø–∞ –∏–Ω–≤–∞–π—Ç–∞: {e}")

    def _on_users_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            from gui.dialogs.inviter_dialogs import show_users_base_dialog

            actual_users = self._load_actual_users_from_file()
            users = show_users_base_dialog(self, actual_users, self.profile_name)

            if users is not None:
                from src.modules.impl.inviter import update_profile_users

                success = update_profile_users(self.profile_name, users)

                if success:
                    self.users_list = users
                    users_count = len(users)

                    if users_count >= 1000000:
                        button_text = f"üë•{users_count // 1000000}.{(users_count % 1000000) // 100000}M"
                    elif users_count >= 1000:
                        button_text = f"üë•{users_count // 1000}K"
                    else:
                        button_text = f"üë•{users_count}"

                    if self.users_btn:
                        self.users_btn.setText(button_text)
                        self.users_btn.setToolTip(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count:,}")

                    logger.info(f"‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {self.profile_name}: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                    try:
                        from gui.notifications import show_success
                        show_success(
                            "–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {users_count:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–í —Ñ–∞–π–ª: –ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
                        )
                    except:
                        pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    def _on_chats_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã —á–∞—Ç–æ–≤"""
        try:
            from gui.dialogs.inviter_dialogs import show_chats_base_dialog

            current_chats = getattr(self, 'chats_list', [])
            chats = show_chats_base_dialog(self, current_chats)

            if chats is not None:
                from src.modules.impl.inviter import update_profile_chats

                success = update_profile_chats(self.profile_name, chats)

                if success:
                    self.chats_list = chats
                    chats_count = len(chats)

                    if chats_count >= 1000:
                        button_text = f"üí¨{chats_count // 1000}K"
                    else:
                        button_text = f"üí¨{chats_count}"

                    if self.chats_btn:
                        self.chats_btn.setText(button_text)
                        self.chats_btn.setToolTip(f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chats_count:,}")

                    logger.info(f"‚úÖ –ë–∞–∑–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {self.profile_name}: {chats_count} —á–∞—Ç–æ–≤")

                    try:
                        from gui.notifications import show_success
                        show_success(
                            "–ë–∞–∑–∞ —á–∞—Ç–æ–≤",
                            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {chats_count:,} —á–∞—Ç–æ–≤\n–í —Ñ–∞–π–ª: –ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
                        )
                    except:
                        pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤: {e}")

    def _on_extended_settings(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            from gui.dialogs.inviter_dialogs import show_extended_settings_dialog
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if _inviter_module_manager:
                fresh_profile = _inviter_module_manager.profile_manager.get_profile(self.profile_name)
                if fresh_profile:
                    current_config = fresh_profile.get('config', {})
                else:
                    current_config = self.profile_data.get('config', {})
            else:
                current_config = self.profile_data.get('config', {})

            new_settings = show_extended_settings_dialog(self, current_config)

            if new_settings is not None:
                self._save_extended_settings_to_module(new_settings)
                logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {self.profile_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def _save_extended_settings_to_module(self, settings: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å"""
        try:
            from src.modules.impl.inviter import update_profile_config

            success = update_profile_config(self.profile_name, settings)

            if success:
                if 'config' not in self.profile_data:
                    self.profile_data['config'] = {}

                self.profile_data['config'].update(settings)
                self.extended_settings = settings

                logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON –¥–ª—è {self.profile_name}")

                try:
                    from gui.notifications import show_success
                    show_success(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è '{self.profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –º–æ–¥—É–ª—å: {e}")

    def _on_manage_admins(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏"""
        try:
            from gui.dialogs.main_admins_dialog import show_main_admins_dialog

            logger.info(f"üëë –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

            selected_admins = show_main_admins_dialog(self, self.profile_name)

            if selected_admins:
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(selected_admins)}")

                try:
                    from gui.notifications import show_success
                    show_success(
                        "–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã",
                        f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ {len(selected_admins)} –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{self.profile_name}/–ê–¥–º–∏–Ω—ã/'"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏: {e}")

    def _on_bot_token_settings(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤"""
        try:
            from gui.dialogs.bot_token_dialog import show_bot_tokens_dialog

            logger.info(f"ü§ñ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

            saved_tokens = show_bot_tokens_dialog(self, self.profile_name)

            if saved_tokens:
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

                try:
                    from gui.notifications import show_success
                    show_success(
                        "–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤",
                        f"ü§ñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤\n"
                        f"–§–∞–π–ª: {self.profile_name}/bot_tokens.txt"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤: {e}")

    def _delete_profile(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        self.profile_deleted.emit(self.profile_name)

    def _load_actual_users_from_file(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            from src.modules.impl.inviter import get_profile_users_from_file

            actual_users = get_profile_users_from_file(self.profile_name)

            if actual_users is not None:
                return actual_users
            else:
                return getattr(self, 'users_list', [])

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è {self.profile_name}: {e}")
            return getattr(self, 'users_list', [])

    def update_progress(self, done: int, total: int):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞–ø—Ä—è–º—É—é"""
        if self.progress_bar:
            self.progress_bar.setRange(0, total)
            self.progress_bar.setValue(done)

    def update_counters(self, success, errors, total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏"""
        if hasattr(self, 'success_label'):
            self.success_label.setText(f"‚úÖ{success}")
        if hasattr(self, 'errors_label'):
            self.errors_label.setText(f"‚ùå{errors}")

    def update_last_action(self, action_text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if hasattr(self, 'status_label'):
            self.status_label.setText(action_text)

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            from gui.workers.background_workers import get_worker_manager

            worker_manager = get_worker_manager()
            if worker_manager:
                worker_manager.remove_profile_monitoring(self.profile_name)
        except:
            pass


class OptimizedInviterTableWidget(QWidget):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""

    def __init__(self):
        super().__init__()
        self.setObjectName("InviterTableWidget")
        self.profile_rows = {}

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª –æ–±–ª–∞—Å—Ç—å
        self._create_scroll_area(layout)

        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –§–û–ù–û–í–´–ï –†–ê–ë–û–ß–ò–ï
        self._init_background_workers()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª—è
        self._load_profiles_from_module()

        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        effect = QGraphicsOpacityEffect()
        effect.setOpacity(0.0)
        self.setGraphicsEffect(effect)

        # –£–ë–ò–†–ê–ï–ú —á–∞—Å—Ç—ã–π sync_timer - —Ç–µ–ø–µ—Ä—å –≤—Å—ë —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ
        # self.sync_timer = QTimer()
        # self.sync_timer.timeout.connect(self.force_sync_all_profiles)
        # self.sync_timer.start(5000)

    def _init_background_workers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
        try:
            from gui.workers.background_workers import init_worker_manager

            self.worker_manager = init_worker_manager()
            logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö: {e}")
            self.worker_manager = None

    def set_parent_manager(self, manager):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.parent_manager = manager

    def _create_scroll_area(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å"""
        self.scroll_area = QScrollArea()
        self.scroll_area.setObjectName("InviterScroll")
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profiles_container = QWidget()
        self.profiles_layout = QVBoxLayout(self.profiles_container)
        self.profiles_layout.setContentsMargins(10, 10, 10, 10)
        self.profiles_layout.setSpacing(8)

        self.scroll_area.setWidget(self.profiles_container)
        layout.addWidget(self.scroll_area)

        # –°—Ç–∏–ª–∏ —Å–∫—Ä–æ–ª–ª –±–∞—Ä–∞
        self.scroll_area.setStyleSheet("""
            QScrollArea#InviterScroll {
                background: transparent;
                border: none;
            }
            QScrollBar:vertical {
                background: rgba(255, 255, 255, 0.05);
                width: 8px;
                border-radius: 4px;
                margin: 0;
            }
            QScrollBar::handle:vertical {
                background: rgba(255, 255, 255, 0.2);
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: rgba(59, 130, 246, 0.6);
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
        """)

    def _load_profiles_from_module(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –º–æ–¥—É–ª—è"""
        try:
            from src.modules.impl.inviter import get_all_profiles_for_gui
            from src.modules.impl.inviter.profile_manager import InviterProfileManager

            profile_manager = InviterProfileManager()
            profile_manager.load_all_profiles()

            profiles_data = get_all_profiles_for_gui()

            logger.info(f"üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –º–æ–¥—É–ª—è: {len(profiles_data)}")

            if not profiles_data:
                self._show_empty_state()
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
            for i, profile_data in enumerate(profiles_data):
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é
                row = OptimizedInviterProfileRow(profile_data)

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                row.profile_started.connect(self._on_profile_started)
                row.profile_stopped.connect(self._on_profile_stopped)
                row.profile_deleted.connect(self._on_profile_deleted)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.profile_rows[profile_data['name']] = row
                self.profiles_layout.addWidget(row)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏
                if i < len(profiles_data) - 1:
                    sep = QFrame()
                    sep.setFrameShape(QFrame.HLine)
                    sep.setFrameShadow(QFrame.Sunken)
                    sep.setStyleSheet("color: rgba(255,255,255,0.1);")
                    sep.setFixedHeight(1)
                    self.profiles_layout.addWidget(sep)

            self.profiles_layout.addStretch()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –º–æ–¥—É–ª—è: {e}")
            self._show_error_state(str(e))

    def _show_empty_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        empty_widget = QWidget()
        empty_layout = QVBoxLayout(empty_widget)
        empty_layout.setAlignment(Qt.AlignCenter)
        empty_layout.setSpacing(20)

        # –ì–ª–∞–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç
        empty_label = QLabel("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        empty_label.setAlignment(Qt.AlignCenter)
        empty_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.6);
                font-size: 24px;
                font-weight: 600;
                margin-bottom: 10px;
            }
        """)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = QLabel("–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–º")
        desc_label.setAlignment(Qt.AlignCenter)
        desc_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.4);
                font-size: 16px;
                margin-bottom: 20px;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        create_btn = QPushButton("+ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        create_btn.setFixedSize(200, 50)
        create_btn.setStyleSheet("""
            QPushButton {
                background: #22C55E;
                border: none;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 16px;
                font-weight: 600;
            }
            QPushButton:hover {
                background: #16A34A;
            }
            QPushButton:pressed {
                background: #15803D;
            }
        """)
        create_btn.clicked.connect(self._create_first_profile)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        container = QWidget()
        container.setStyleSheet("""
            QWidget {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 12px;
                border: 2px dashed rgba(255, 255, 255, 0.2);
                padding: 40px;
            }
        """)
        container_layout = QVBoxLayout(container)
        container_layout.addWidget(empty_label)
        container_layout.addWidget(desc_label)
        container_layout.addWidget(create_btn, 0, Qt.AlignCenter)

        empty_layout.addWidget(container)
        self.profiles_layout.addWidget(empty_widget)
        self.profiles_layout.addStretch()

    def _create_first_profile(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            from gui.dialogs.inviter_dialogs import show_create_profile_dialog
            from src.modules.impl.inviter import create_profile

            profile_data = show_create_profile_dialog(self)

            if profile_data and profile_data.get('name'):
                profile_name = profile_data['name']
                logger.info(f"üì® –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")

                result = create_profile(profile_name, profile_data)

                if result.get('success'):
                    logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile_name}")

                    self.reload_profiles()

                    if hasattr(self, 'parent_manager') and self.parent_manager:
                        self.parent_manager._reload_all_data()

                    try:
                        from gui.notifications import show_success
                        show_success(
                            "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω",
                            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–∫–µ–Ω—ã."
                        )
                    except:
                        pass
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {result.get('message')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def _show_error_state(self, error_message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        error_label = QLabel(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n{error_message}")
        error_label.setAlignment(Qt.AlignCenter)
        error_label.setStyleSheet("""
            QLabel {
                color: #EF4444;
                font-size: 14px;
                padding: 30px;
                background: rgba(239, 68, 68, 0.1);
                border-radius: 12px;
                border: 1px solid rgba(239, 68, 68, 0.3);
            }
        """)
        self.profiles_layout.addWidget(error_label)
        self.profiles_layout.addStretch()

    def _on_profile_started(self, profile_name):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è - –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò GUI"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")

        # –°–†–ê–ó–£ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–°—Ç–æ–ø"
        if profile_name in self.profile_rows:
            profile_row = self.profile_rows[profile_name]
            profile_row.manually_stopped = False
            profile_row.update_running_state(True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò
        import threading
        def start_task():
            try:
                from src.modules.impl.inviter import start_profile
                success = start_profile(profile_name)

                # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É
                if not success and profile_name in self.profile_rows:
                    QTimer.singleShot(100, lambda: self._reset_button_on_error(profile_name))

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                QTimer.singleShot(100, lambda: self._reset_button_on_error(profile_name))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=start_task, daemon=True)
        thread.start()

    def _reset_button_on_error(self, profile_name):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞"""
        if profile_name in self.profile_rows:
            self.profile_rows[profile_name].update_running_state(False)
            if hasattr(self.profile_rows[profile_name], 'status_label'):
                self.profile_rows[profile_name].status_label.setText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")

    def _on_profile_stopped(self, profile_name):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è - –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò GUI"""
        logger.info(f"‚è∏Ô∏è –†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")

        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ü–ï–†–ï–î –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º UI
        if profile_name in self.profile_rows:
            profile_row = self.profile_rows[profile_name]
            profile_row.manually_stopped = True
            profile_row.update_running_state(False)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò
        import threading
        def stop_task():
            try:
                from src.modules.impl.inviter import stop_profile
                result = stop_profile(profile_name)
                logger.info(f"‚èπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {profile_name}: {result}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

        thread = threading.Thread(target=stop_task, daemon=True)
        thread.start()

    def _on_profile_deleted(self, profile_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")

        try:
            from src.modules.impl.inviter import delete_profile
            result = delete_profile(profile_name)

            if result.get('success'):
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å")
                self.remove_profile(profile_name)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {profile_name}: {result.get('message')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")

    def add_profile(self, profile_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        profile_name = profile_data.get('name')

        if profile_name in self.profile_rows:
            self.remove_profile(profile_name)

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é
        profile_row = OptimizedInviterProfileRow(profile_data)

        profile_row.profile_started.connect(self._on_profile_started)
        profile_row.profile_stopped.connect(self._on_profile_stopped)
        profile_row.profile_deleted.connect(self._on_profile_deleted)

        self.profile_rows[profile_name] = profile_row
        self.profiles_layout.insertWidget(len(self.profile_rows) - 1, profile_row)

    def remove_profile(self, profile_name):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if profile_name in self.profile_rows:
            profile_row = self.profile_rows[profile_name]
            profile_row.deleteLater()
            del self.profile_rows[profile_name]
            logger.info(f"üóëÔ∏è –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {profile_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    def clear_profiles(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        for profile_row in self.profile_rows.values():
            profile_row.deleteLater()
        self.profile_rows.clear()
        logger.info("üßπ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    def start_all_profiles(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò"""
        for profile_row in self.profile_rows.values():
            if not profile_row.is_running:
                profile_row._toggle_profile()

    def stop_all_profiles(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò"""
        for profile_row in self.profile_rows.values():
            if profile_row.is_running:
                profile_row._toggle_profile()

    def refresh_data(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        logger.info("üîÑ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")

        try:
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ - —Ñ–æ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ —Å–∞–º–∏ –æ–±–Ω–æ–≤—è—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            from src.modules.impl.inviter import get_all_profiles_for_gui

            profiles_data = get_all_profiles_for_gui()

            # –ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            self.clear_profiles()

            for profile_data in profiles_data:
                self.add_profile(profile_data)

            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(profiles_data)} –ø—Ä–æ—Ñ–∏–ª–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

    def reload_profiles(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            self.clear_profiles()

            # –û—á–∏—â–∞–µ–º layout
            for i in reversed(range(self.profiles_layout.count())):
                item = self.profiles_layout.itemAt(i)
                if item.widget():
                    item.widget().deleteLater()

            self._load_profiles_from_module()

            logger.info("üîÑ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –º–æ–¥—É–ª—è")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

    def animate_appearance(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        effect = self.graphicsEffect()
        if effect:
            self.opacity_animation = QPropertyAnimation(effect, b"opacity")
            self.opacity_animation.setDuration(800)
            self.opacity_animation.setStartValue(0.0)
            self.opacity_animation.setEndValue(1.0)
            self.opacity_animation.setEasingCurve(QEasingCurve.OutCubic)
            self.opacity_animation.start()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
        try:
            if hasattr(self, 'worker_manager') and self.worker_manager:
                from gui.workers.background_workers import shutdown_worker_manager
                shutdown_worker_manager()
        except:
            pass