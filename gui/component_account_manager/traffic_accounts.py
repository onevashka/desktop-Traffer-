# gui/component_account_manager/traffic_accounts.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

from PySide6.QtWidgets import QWidget, QVBoxLayout
from gui.component_account_manager.account_stats import AccountStatsWidget
from gui.component_account_manager.account_table import AccountTableWidget
from gui.component_account_manager.loading_animation import LoadingAnimationWidget
from src.accounts.manager import get_traffic_stats, get_table_data, get_default_status
from loguru import logger


class TrafficAccountsTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""

    def __init__(self):
        super().__init__()
        self.setObjectName("TrafficAccountsTab")
        self.category = "traffic"
        self.current_status = get_default_status(self.category)  # "active" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 15, 0, 0)
        layout.setSpacing(0)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.main_content = QWidget()
        self.main_content.setObjectName("MainContent")
        self.main_content_layout = QVBoxLayout(self.main_content)
        self.main_content_layout.setContentsMargins(0, 0, 0, 0)
        self.main_content_layout.setSpacing(15)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._create_components()

        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_widget = LoadingAnimationWidget("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞...")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ layout
        layout.addWidget(self.loading_widget)
        layout.addWidget(self.main_content)

        # –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        self.main_content.hide()
        self.loading_widget.start_animation(self._show_main_content)

    def _create_components(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∫–ª–∞–¥–∫–∏"""

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ AccountManager
        traffic_stats = get_traffic_stats()
        logger.debug(f"üìä –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {traffic_stats}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        stats_with_keys = [
            (title, value, color, status_key) for (title, value, color), status_key in zip(
                traffic_stats,
                ["active", "dead", "frozen", "invalid"]
            )
        ]

        self.stats_widget = AccountStatsWidget(stats_with_keys, self.category)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        self.stats_widget.stat_clicked.connect(self._on_stat_clicked)
        self.main_content_layout.addWidget(self.stats_widget)

        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
        table_data = get_table_data(self.category, self.current_status, limit=-1)
        logger.debug(f"üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞—Ñ–∏–∫–∞, –¥–∞–Ω–Ω—ã—Ö: {len(table_data)} —Å—Ç—Ä–æ–∫")

        table_config = {
            'title': 'üöÄ –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞',
            'add_button_text': '+ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
            'demo_data': table_data,
            'category': self.category,
            'current_status': self.current_status
        }

        self.table_widget = AccountTableWidget(table_config)
        self.main_content_layout.addWidget(self.table_widget)

    def _on_stat_clicked(self, status_key: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–ø–∫–∏"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–ø–∫—É: {status_key}")

        self.current_status = status_key

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
        self.table_widget.set_current_status(status_key)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        try:
            from gui.notifications import show_info
            from src.accounts.manager import get_status_display_name, get_folder_status_count

            folder_name = get_status_display_name(self.category, status_key)
            count = get_folder_status_count(self.category, status_key)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            pag_info = ""
            if hasattr(self.table_widget, 'get_pagination_info'):
                pag_data = self.table_widget.get_pagination_info()
                if pag_data['total_pages'] > 1:
                    pag_info = f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{pag_data['total_pages']}"

            show_info(
                "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–ø–∫–∏",
                f"–ü–æ–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}\n–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {count}{pag_info}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _show_main_content(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_widget.hide()
        self.main_content.show()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.stats_widget.animate_appearance()
        self.table_widget.animate_appearance()

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Ñ–∏–∫–∞...")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = get_traffic_stats()
            logger.debug(f"üìä –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {new_stats}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for i, (title, value, color) in enumerate(new_stats):
                if i < len(self.stats_widget.stat_boxes):
                    self.stats_widget.update_stat(i, value)
                    logger.debug(f"   üìä –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç {i}: {title} = {value}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            new_table_data = get_table_data(self.category, self.current_status, limit=-1)
            self.table_widget.update_table_data(new_table_data)

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if hasattr(self.table_widget, 'get_pagination_info'):
                pag_info = self.table_widget.get_pagination_info()
                logger.info(
                    f"üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞: {pag_info['current_page']}/{pag_info['total_pages']}, –≤—Å–µ–≥–æ {pag_info['total_items']}")

            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")

    def get_current_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫—É)"""
        return self.current_status