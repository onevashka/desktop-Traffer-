# gui/component_account_manager/account_table.py - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø

"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
"""
from typing import List
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QLabel, QHeaderView, QApplication, QGraphicsOpacityEffect,
    QComboBox, QSpacerItem, QSizePolicy
)
from PySide6.QtCore import Qt, QTimer, QPropertyAnimation, QEasingCurve, Signal
from PySide6.QtGui import QColor, QCursor
from loguru import logger

from gui.handlers import TableActionHandler

CHECKBOX_STYLE_ELEGANT = """
        QPushButton#RowCheckbox {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            color: transparent;
        }
        QPushButton#RowCheckbox:checked {
            background: rgba(59, 130, 246, 0.9);
            border: 1px solid #3B82F6;
            box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
        }
        QPushButton#RowCheckbox:checked::after {
            content: "‚úì";
            color: white;
            font-size: 11px;
            font-weight: 600;
        }
        QPushButton#RowCheckbox:hover {
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
        }
    """


class AccountTableWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""

    # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    data_requested = Signal(str, str, int, int)  # category, status, page, per_page

    def __init__(self, config):
        """
        config: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        {
            'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã',
            'add_button_text': '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
            'demo_data': [[...], [...]]  # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            'category': 'traffic' –∏–ª–∏ 'sales',
            'current_status': 'active' –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
        }
        """
        super().__init__()
        self.setObjectName("AccountTableWidget")
        self.config = config

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞
        self.current_status = config.get('current_status', 'active')
        self.category = config.get('category', 'traffic')

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self.current_page = 1
        self.per_page = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self.total_items = 0
        self.total_pages = 0
        self.all_data = []  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(15)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._create_actions_bar(layout)
        self._create_table(layout)
        self._create_pagination_controls(layout)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        self._load_initial_data()

        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        effect = QGraphicsOpacityEffect()
        effect.setOpacity(0.0)
        self.setGraphicsEffect(effect)

        logger.info(f"üìä AccountTableWidget —Å–æ–∑–¥–∞–Ω –¥–ª—è {self.category}/{self.current_status}")

    def _create_actions_bar(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_container = QWidget()
        actions_container.setObjectName("ActionsContainer")
        actions_layout = QHBoxLayout(actions_container)
        actions_layout.setContentsMargins(0, 5, 0, 10)
        actions_layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        self.section_title = QLabel()
        self.section_title.setObjectName("SectionTitle")
        self.section_title.setStyleSheet("""
            QLabel#SectionTitle {
                font-size: 16px;
                font-weight: 600;
                color: rgba(255, 255, 255, 0.9);
            }
        """)
        self._update_section_title()

        # –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.setObjectName("ActionButton")
        self.delete_btn.setFixedSize(100, 36)
        self.delete_btn.setStyleSheet("""
            QPushButton#ActionButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 6px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 13px;
                font-weight: 500;
            }
            QPushButton#ActionButton:hover {
                background: rgba(255, 255, 255, 0.12);
                border: 1px solid rgba(59, 130, 246, 0.5);
                color: #FFFFFF;
            }
        """)

        self.update_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.update_btn.setObjectName("ActionButton")
        self.update_btn.setFixedSize(110, 36)
        self.update_btn.setStyleSheet("""
            QPushButton#ActionButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 6px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 13px;
                font-weight: 500;
            }
            QPushButton#ActionButton:hover {
                background: rgba(255, 255, 255, 0.12);
                border: 1px solid rgba(59, 130, 246, 0.5);
                color: #FFFFFF;
            }
        """)

        self.move_btn = QPushButton("üì¶ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")
        self.move_btn.setObjectName("ActionButton")
        self.move_btn.setFixedSize(130, 36)
        self.move_btn.setStyleSheet("""
            QPushButton#ActionButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 6px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 13px;
                font-weight: 500;
            }
            QPushButton#ActionButton:hover {
                background: rgba(255, 255, 255, 0.12);
                border: 1px solid rgba(59, 130, 246, 0.5);
                color: #FFFFFF;
            }
        """)

        self.archive_btn = QPushButton("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        self.archive_btn.setObjectName("ActionButton")
        self.archive_btn.setFixedSize(140, 36)
        self.archive_btn.setStyleSheet("""
                    QPushButton#ActionButton {
                        background: rgba(255, 255, 255, 0.06);
                        border: 1px solid rgba(255, 255, 255, 0.15);
                        border-radius: 6px;
                        color: rgba(255, 255, 255, 0.9);
                        font-size: 13px;
                        font-weight: 500;
                    }
                    QPushButton#ActionButton:hover {
                        background: rgba(255, 255, 255, 0.12);
                        border: 1px solid rgba(59, 130, 246, 0.5);
                        color: #FFFFFF;
                    }
                """)

        # –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        per_page_label = QLabel("–ü–æ–∫–∞–∑–∞—Ç—å:")
        per_page_label.setObjectName("PerPageLabel")
        per_page_label.setStyleSheet("""
            QLabel#PerPageLabel {
                color: rgba(255, 255, 255, 0.8);
                font-size: 13px;
                font-weight: 500;
            }
        """)

        self.per_page_combo = QComboBox()
        self.per_page_combo.setObjectName("PerPageCombo")
        self.per_page_combo.addItems(["10", "25", "50", "100", "–í—Å–µ"])
        self.per_page_combo.setCurrentText("10")
        self.per_page_combo.setFixedSize(80, 36)
        self.per_page_combo.setStyleSheet("""
            QComboBox#PerPageCombo {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 6px;
                padding: 4px 8px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 13px;
            }
            QComboBox#PerPageCombo:hover {
                border-color: rgba(59, 130, 246, 0.5);
                background: rgba(255, 255, 255, 0.08);
            }
            QComboBox#PerPageCombo::drop-down {
                border: none;
                padding-right: 8px;
            }
            QComboBox#PerPageCombo QAbstractItemView {
                background: rgba(30, 30, 30, 0.95);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 6px;
                selection-background-color: rgba(59, 130, 246, 0.3);
                color: rgba(255, 255, 255, 0.9);
                padding: 4px;
            }
        """)
        self.per_page_combo.currentTextChanged.connect(self._on_per_page_changed)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_btn = QPushButton(self.config.get('add_button_text', '+ –î–æ–±–∞–≤–∏—Ç—å'))
        self.add_btn.setObjectName("AddButton")
        self.add_btn.setFixedSize(160, 36)
        self.add_btn.setStyleSheet("""
            QPushButton#AddButton {
                background: #3B82F6;
                border: none;
                border-radius: 6px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 500;
            }
            QPushButton#AddButton:hover {
                background: #2563EB;
            }
        """)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        actions_layout.addWidget(self.section_title)
        actions_layout.addWidget(self.delete_btn)
        actions_layout.addWidget(self.update_btn)
        actions_layout.addWidget(self.move_btn)
        actions_layout.addWidget(self.archive_btn)
        actions_layout.addStretch()
        actions_layout.addWidget(per_page_label)
        actions_layout.addWidget(self.per_page_combo)
        actions_layout.addWidget(self.add_btn)

        layout.addWidget(actions_container)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.action_handler = TableActionHandler(self)
        self.delete_btn.clicked.connect(self.action_handler.handle_delete_action)
        self.update_btn.clicked.connect(self.action_handler.handle_refresh_action)
        self.move_btn.clicked.connect(self.action_handler.handle_move_action)
        self.archive_btn.clicked.connect(self.action_handler.handle_archive_action)

    def _create_table(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
        table_container = QWidget()
        table_container.setObjectName("TableContainer")
        table_layout = QVBoxLayout(table_container)
        table_layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table = QTableWidget()
        self.table.setObjectName("ModernTable")

        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            "",  # –ß–µ–∫–±–æ–∫—Å—ã
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞",
            "üåç –ì–µ–æ",
            "üìÖ –î–Ω–µ–π\n—Å–æ–∑–¥–∞–Ω",  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            "üìä –°—Ç–∞—Ç—É—Å",
            "üë§ –ò–º—è",
            "üì± –¢–µ–ª–µ—Ñ–æ–Ω",
            "üíé –ü—Ä–µ–º–∏—É–º"
        ]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
        self.table.setColumnCount(len(headers))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.table.setHorizontalHeaderLabels(headers)

        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å {len(headers)} –∫–æ–ª–æ–Ω–∫–∞–º–∏")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.table.verticalHeader().setVisible(False)
        self.table.setAlternatingRowColors(True)
        self.table.setShowGrid(False)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.verticalHeader().setDefaultSectionSize(60)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)  # –ß–µ–∫–±–æ–∫—Å—ã
        header.setSectionResizeMode(1, QHeaderView.Stretch)  # –ù–∞–∑–≤–∞–Ω–∏–µ
        header.setSectionResizeMode(2, QHeaderView.Fixed)  # –ì–µ–æ
        header.setSectionResizeMode(3, QHeaderView.Fixed)  # –î–Ω–µ–π —Å–æ–∑–¥–∞–Ω
        header.setSectionResizeMode(4, QHeaderView.Stretch)  # –°—Ç–∞—Ç—É—Å
        header.setSectionResizeMode(5, QHeaderView.Stretch)  # –ò–º—è
        header.setSectionResizeMode(6, QHeaderView.Fixed)  # –¢–µ–ª–µ—Ñ–æ–Ω
        header.setSectionResizeMode(7, QHeaderView.Fixed)  # –ü—Ä–µ–º–∏—É–º

        self.table.setColumnWidth(0, 50)  # –ß–µ–∫–±–æ–∫—Å—ã
        self.table.setColumnWidth(1, 120)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ - –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        self.table.setColumnWidth(2, 90)  # –ì–µ–æ
        self.table.setColumnWidth(3, 200)  # –î–Ω–µ–π —Å–æ–∑–¥–∞–Ω
        self.table.setColumnWidth(4, 100)  # –°—Ç–∞—Ç—É—Å - –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        self.table.setColumnWidth(5, 120)  # –ò–º—è - –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        self.table.setColumnWidth(6, 200)  # –¢–µ–ª–µ—Ñ–æ–Ω
        self.table.setColumnWidth(7, 160)  # –ü—Ä–µ–º–∏—É–º

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —á–µ–∫–±–æ–∫—Å
        self._create_master_checkbox()

        table_layout.addWidget(self.table)
        layout.addWidget(table_container)

    def _create_pagination_controls(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        pagination_container = QWidget()
        pagination_container.setObjectName("PaginationContainer")
        pag_layout = QHBoxLayout(pagination_container)
        pag_layout.setContentsMargins(0, 10, 0, 0)
        pag_layout.setSpacing(15)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö
        self.info_label = QLabel()
        self.info_label.setObjectName("PaginationInfo")
        self.info_label.setStyleSheet("""
            QLabel#PaginationInfo {
                color: rgba(255, 255, 255, 0.6);
                font-size: 13px;
                font-weight: 400;
            }
        """)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_button_style = """
            QPushButton#PaginationNavButton {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 14px;
                font-weight: 500;
            }
            QPushButton#PaginationNavButton:hover:enabled {
                background: rgba(59, 130, 246, 0.2);
                border-color: rgba(59, 130, 246, 0.5);
                color: #FFFFFF;
            }
            QPushButton#PaginationNavButton:pressed:enabled {
                background: rgba(59, 130, 246, 0.3);
            }
            QPushButton#PaginationNavButton:disabled {
                background: rgba(255, 255, 255, 0.02);
                border-color: rgba(255, 255, 255, 0.05);
                color: rgba(255, 255, 255, 0.3);
            }
        """

        self.first_btn = QPushButton("‚èÆÔ∏è")
        self.first_btn.setObjectName("PaginationNavButton")
        self.first_btn.setFixedSize(36, 36)
        self.first_btn.setToolTip("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        self.first_btn.setStyleSheet(nav_button_style)
        self.first_btn.clicked.connect(self._go_to_first_page)

        self.prev_btn = QPushButton("‚óÄÔ∏è")
        self.prev_btn.setObjectName("PaginationNavButton")
        self.prev_btn.setFixedSize(36, 36)
        self.prev_btn.setToolTip("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        self.prev_btn.setStyleSheet(nav_button_style)
        self.prev_btn.clicked.connect(self._go_to_prev_page)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self.page_label = QLabel()
        self.page_label.setObjectName("PageLabel")
        self.page_label.setStyleSheet("""
            QLabel#PageLabel {
                color: rgba(255, 255, 255, 0.9);
                font-size: 14px;
                font-weight: 500;
                padding: 0 12px;
                min-width: 80px;
            }
        """)
        self.page_label.setAlignment(Qt.AlignCenter)

        self.next_btn = QPushButton("‚ñ∂Ô∏è")
        self.next_btn.setObjectName("PaginationNavButton")
        self.next_btn.setFixedSize(36, 36)
        self.next_btn.setToolTip("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        self.next_btn.setStyleSheet(nav_button_style)
        self.next_btn.clicked.connect(self._go_to_next_page)

        self.last_btn = QPushButton("‚è≠Ô∏è")
        self.last_btn.setObjectName("PaginationNavButton")
        self.last_btn.setFixedSize(36, 36)
        self.last_btn.setToolTip("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        self.last_btn.setStyleSheet(nav_button_style)
        self.last_btn.clicked.connect(self._go_to_last_page)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        pag_layout.addWidget(self.info_label)
        pag_layout.addStretch()
        pag_layout.addWidget(self.first_btn)
        pag_layout.addWidget(self.prev_btn)
        pag_layout.addWidget(self.page_label)
        pag_layout.addWidget(self.next_btn)
        pag_layout.addWidget(self.last_btn)

        layout.addWidget(pagination_container)

    def _create_master_checkbox(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å—Ç–∏–ª—å–Ω—ã–π —á–µ–∫–±–æ–∫—Å —Å –≥–∞–ª–æ—á–∫–æ–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ"""
        header_widget = QWidget()
        header_layout = QHBoxLayout(header_widget)
        header_layout.setContentsMargins(0, 0, 0, 0)

        self.master_checkbox = QPushButton()
        self.master_checkbox.setObjectName("MasterCheckbox")
        self.master_checkbox.setCheckable(True)
        self.master_checkbox.setFixedSize(20, 20)

        # –¢–æ—Ç –∂–µ —Å—Ç–∏–ª—å —á—Ç–æ –∏ —É –æ–±—ã—á–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        self.master_checkbox.setStyleSheet("""
            QPushButton#MasterCheckbox {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.12);
                border-radius: 5px;
                color: white;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton#MasterCheckbox:checked {
                background: #3B82F6;
                border: 1px solid #2563EB;
            }
            QPushButton#MasterCheckbox:hover {
                background: rgba(59, 130, 246, 0.12);
                border: 1px solid rgba(59, 130, 246, 0.25);
            }
        """)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
        def update_master_checkbox_text():
            if self.master_checkbox.isChecked():
                self.master_checkbox.setText("‚úì")
            else:
                self.master_checkbox.setText("")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.master_checkbox.toggled.connect(update_master_checkbox_text)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        self.master_checkbox.setText("")

        self.master_checkbox.clicked.connect(self._toggle_all_checkboxes)

        header_layout.addStretch()
        header_layout.addWidget(self.master_checkbox)
        header_layout.addStretch()

        # –†–∞–∑–º–µ—â–∞–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        timer = QTimer(self)
        timer.setSingleShot(True)
        timer.setInterval(200)
        timer.timeout.connect(lambda: self._place_header_checkbox(header_widget))
        timer.start()

    def _place_header_checkbox(self, widget):
        """–†–∞–∑–º–µ—â–∞–µ—Ç —á–µ–∫–±–æ–∫—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ"""
        header = self.table.horizontalHeader()
        x = header.sectionPosition(0)
        width = header.sectionSize(0)
        widget.setParent(header)
        widget.setGeometry(x, 0, width, header.height())
        widget.show()

    def _load_initial_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        demo_data = self.config.get('demo_data', [])
        self.all_data = demo_data
        self.total_items = len(demo_data)

        self._calculate_pagination()
        self._update_table_for_current_page()

        logger.info(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.total_items} –∑–∞–ø–∏—Å–µ–π")

    def _calculate_pagination(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if self.per_page == -1:  # "–í—Å–µ"
            self.total_pages = 1
            self.current_page = 1
        else:
            self.total_pages = max(1, (self.total_items + self.per_page - 1) // self.per_page)
            if self.current_page > self.total_pages:
                self.current_page = self.total_pages

        self._update_pagination_info()
        self._update_pagination_buttons()

    def _update_pagination_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if self.total_items == 0:
            self.info_label.setText("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            self.page_label.setText("0 / 0")
            return

        if self.per_page == -1:  # "–í—Å–µ"
            self.info_label.setText(f"–ü–æ–∫–∞–∑–∞–Ω–æ –≤—Å–µ {self.total_items} –∑–∞–ø–∏—Å–µ–π")
            self.page_label.setText("1 / 1")
        else:
            start_item = (self.current_page - 1) * self.per_page + 1
            end_item = min(self.current_page * self.per_page, self.total_items)

            self.info_label.setText(f"–ü–æ–∫–∞–∑–∞–Ω–æ {start_item}-{end_item} –∏–∑ {self.total_items} –∑–∞–ø–∏—Å–µ–π")
            self.page_label.setText(f"{self.current_page} / {self.total_pages}")

    def _update_pagination_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if self.per_page == -1:  # "–í—Å–µ"
            for btn in [self.first_btn, self.prev_btn, self.next_btn, self.last_btn]:
                btn.setEnabled(False)
        else:
            self.first_btn.setEnabled(self.current_page > 1)
            self.prev_btn.setEnabled(self.current_page > 1)
            self.next_btn.setEnabled(self.current_page < self.total_pages)
            self.last_btn.setEnabled(self.current_page < self.total_pages)

    def _get_current_page_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if self.per_page == -1:  # "–í—Å–µ"
            return self.all_data

        start_idx = (self.current_page - 1) * self.per_page
        end_idx = start_idx + self.per_page
        return self.all_data[start_idx:end_idx]

    def _update_table_for_current_page(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page_data = self._get_current_page_data()
        self._fill_table_with_data(page_data)

    def _fill_table_with_data(self, data):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table.clearContents()
        self.table.setRowCount(len(data))

        if len(data) == 0:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
        for row_idx, row_data in enumerate(data):
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
            self._create_row_checkbox(row_idx)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            for col_idx, cell_value in enumerate(row_data):
                if col_idx >= 7:  # –ú–∞–∫—Å–∏–º—É–º 7 –∫–æ–ª–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                    break

                # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã
                item = QTableWidgetItem(str(cell_value))
                item.setTextAlignment(Qt.AlignCenter | Qt.AlignVCenter)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
                self._apply_cell_styling(item, col_idx + 1, cell_value)

                # –†–∞–∑–º–µ—â–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ (col_idx + 1 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤)
                self.table.setItem(row_idx, col_idx + 1, item)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.table.viewport().update()
        QApplication.processEvents()

        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: {len(data)} —Å—Ç—Ä–æ–∫")

    def _create_row_checkbox(self, row):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª—å–Ω—ã–π —á–µ–∫–±–æ–∫—Å —Å –≥–∞–ª–æ—á–∫–æ–π –¥–ª—è —Å—Ç—Ä–æ–∫–∏"""
        checkbox_container = QWidget()
        checkbox_layout = QHBoxLayout(checkbox_container)
        checkbox_layout.setContentsMargins(0, 0, 0, 0)

        checkbox = QPushButton()
        checkbox.setObjectName("RowCheckbox")
        checkbox.setCheckable(True)
        checkbox.setFixedSize(20, 20)
        checkbox.setCursor(QCursor(Qt.PointingHandCursor))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        checkbox.setStyleSheet("""
            QPushButton#RowCheckbox {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.12);
                border-radius: 5px;
                color: white;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton#RowCheckbox:checked {
                background: #3B82F6;
                border: 1px solid #2563EB;
            }
            QPushButton#RowCheckbox:hover {
                background: rgba(59, 130, 246, 0.12);
                border: 1px solid rgba(59, 130, 246, 0.25);
            }
        """)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–±–æ–∫—Å–∞
        def update_checkbox_text():
            if checkbox.isChecked():
                checkbox.setText("‚úì")
            else:
                checkbox.setText("")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        checkbox.toggled.connect(update_checkbox_text)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        checkbox.setText("")

        checkbox.clicked.connect(lambda checked, r=row: self._handle_checkbox_click(r, checked))

        checkbox_layout.addStretch()
        checkbox_layout.addWidget(checkbox)
        checkbox_layout.addStretch()

        self.table.setCellWidget(row, 0, checkbox_container)

    def _apply_cell_styling(self, item, col, value):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —è—á–µ–π–∫–µ"""
        # –°—Ç–∏–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–∫–æ–ª–æ–Ω–∫–∞ 4)
        if col == 4:
            status_text = str(value)
            if "–ê–∫—Ç–∏–≤–Ω—ã–π" in status_text or "–≥–æ—Ç–æ–≤" in status_text:
                item.setForeground(QColor("#10B981"))
            elif "–ú–µ—Ä—Ç–≤—ã–π" in status_text:
                item.setForeground(QColor("#EF4444"))
            elif "–ó–∞–º–æ—Ä–æ–∂–µ–Ω" in status_text:
                item.setForeground(QColor("#F59E0B"))
            elif "–ù–µ–≤–µ—Ä–Ω—ã–π" in status_text:
                item.setForeground(QColor("#6B7280"))
            elif "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in status_text:
                item.setForeground(QColor("#3B82F6"))
            else:
                item.setForeground(QColor("#8B5CF6"))

        # –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ (–∫–æ–ª–æ–Ω–∫–∞ 7)
        elif col == 7:
            if value == "‚úÖ":
                item.setForeground(QColor("#10B981"))
            elif value == "‚ùå":
                item.setForeground(QColor("#EF4444"))
            else:
                item.setForeground(QColor("#FFFFFF"))

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        else:
            item.setForeground(QColor("#FFFFFF"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    def _on_per_page_changed(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if value == "–í—Å–µ":
            self.per_page = -1
        else:
            self.per_page = int(value)

        self.current_page = 1
        self._calculate_pagination()
        self._update_table_for_current_page()

    def _go_to_first_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        self.current_page = 1
        self._calculate_pagination()
        self._update_table_for_current_page()

    def _go_to_prev_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if self.current_page > 1:
            self.current_page -= 1
            self._calculate_pagination()
            self._update_table_for_current_page()

    def _go_to_next_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if self.current_page < self.total_pages:
            self.current_page += 1
            self._calculate_pagination()
            self._update_table_for_current_page()

    def _go_to_last_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        self.current_page = self.total_pages
        self._calculate_pagination()
        self._update_table_for_current_page()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _toggle_all_checkboxes(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        master_checked = self.master_checkbox.isChecked()

        for row in range(self.table.rowCount()):
            checkbox_container = self.table.cellWidget(row, 0)
            if checkbox_container:
                checkbox = checkbox_container.findChild(QPushButton)
                if checkbox:
                    checkbox.setChecked(master_checked)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≥–∞–ª–æ—á–∫–∏
                    if master_checked:
                        checkbox.setText("‚úì")
                    else:
                        checkbox.setText("")

    def _handle_checkbox_click(self, row, checked):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —á–µ–∫–±–æ–∫—Å—É"""
        self.last_clicked_row = row
        self._update_master_checkbox()

    def _update_master_checkbox(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        total_rows = self.table.rowCount()
        if total_rows == 0:
            return

        checked_rows = 0
        for row in range(total_rows):
            checkbox_container = self.table.cellWidget(row, 0)
            if checkbox_container:
                checkbox = checkbox_container.findChild(QPushButton)
                if checkbox and checkbox.isChecked():
                    checked_rows += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
        if checked_rows == total_rows:
            self.master_checkbox.setChecked(True)
            self.master_checkbox.setText("‚úì")
        elif checked_rows == 0:
            self.master_checkbox.setChecked(False)
            self.master_checkbox.setText("")
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω—É—Å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
            self.master_checkbox.setChecked(False)
            self.master_checkbox.setText("‚àí")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è

    def _update_section_title(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        if hasattr(self, 'section_title'):
            try:
                from src.accounts.manager import get_status_display_name
                folder_name = get_status_display_name(self.category, self.current_status)
                icon = "üöÄ" if self.category == "traffic" else "üí∞"
                self.section_title.setText(f"{icon} {folder_name}")
            except:
                self.section_title.setText(f"üìã {self.current_status}")

    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    def get_selected_account_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        selected_rows = self.get_selected_rows()
        account_names = []
        for row in selected_rows:
            item = self.table.item(row, 1)  # –ö–æ–ª–æ–Ω–∫–∞ —Å –∏–º–µ–Ω–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
            if item:
                account_names.append(item.text())
        return account_names

    def get_selected_rows(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        selected = []
        for row in range(self.table.rowCount()):
            checkbox_container = self.table.cellWidget(row, 0)
            if checkbox_container:
                checkbox = checkbox_container.findChild(QPushButton)
                if checkbox and checkbox.isChecked():
                    selected.append(row)
        return selected

    def get_table_category(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞–±–ª–∏—Ü—ã"""
        return self.category

    def get_current_status(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫—É) —Ç–∞–±–ª–∏—Ü—ã"""
        return self.current_status

    def set_current_status(self, status: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫—É) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.current_status = status
        self.config['current_status'] = status
        self._update_section_title()
        self.refresh_data()

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            from src.accounts.manager import get_table_data
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
            new_data = get_table_data(self.category, self.current_status, limit=-1)
            self.all_data = new_data
            self.total_items = len(new_data)
            self.config['demo_data'] = new_data

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            self.current_page = 1
            self._calculate_pagination()
            self._update_table_for_current_page()

            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {self.total_items} –∑–∞–ø–∏—Å–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ refresh_data: {e}")

    def update_table_data(self, new_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.all_data = new_data
        self.total_items = len(new_data)
        self.config['demo_data'] = new_data

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        self.current_page = 1
        self._calculate_pagination()
        self._update_table_for_current_page()

    def animate_appearance(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        effect = self.graphicsEffect()
        if effect:
            self.opacity_animation = QPropertyAnimation(effect, b"opacity")
            self.opacity_animation.setDuration(800)
            self.opacity_animation.setStartValue(0.0)
            self.opacity_animation.setEndValue(1.0)
            self.opacity_animation.setEasingCurve(QEasingCurve.OutCubic)
            self.opacity_animation.start()

    def get_pagination_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        return {
            'current_page': self.current_page,
            'total_pages': self.total_pages,
            'per_page': self.per_page,
            'total_items': self.total_items
        }