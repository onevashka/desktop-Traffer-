# gui/inviter_manager_optimized.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê
"""
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ GUI –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö
"""
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton
)
from PySide6.QtCore import QTimer, QThread, Signal
from gui.component_inviter.inviter_table_optimized import OptimizedInviterTableWidget
from gui.component_inviter.inviter_stats import InviterStatsWidget
from gui.dialogs.inviter_dialogs import show_create_profile_dialog
from loguru import logger
import threading
from paths import Path


class OptimizedInviterManagerTab(QWidget):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –≥–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞"""

    def __init__(self):
        super().__init__()
        self.setObjectName("InviterManagerTab")

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_mass_operation_running = False
        self.pending_operations = []

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(layout)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
        self._create_stats_section(layout)

        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self._create_profiles_section(layout)

        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –§–û–ù–û–í–´–ï –†–ê–ë–û–ß–ò–ï
        self._init_background_workers()

        logger.debug("–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô InviterManager GUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _init_background_workers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
        try:
            from gui.workers.background_workers import get_worker_manager

            self.worker_manager = get_worker_manager()
            if not self.worker_manager.is_initialized:
                self.worker_manager.initialize()

            logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è InviterManager")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö: {e}")

    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
        header_container = QWidget()
        header_layout = QHBoxLayout(header_container)
        header_layout.setContentsMargins(0, 0, 0, 10)

        # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        breadcrumb = QLabel("–ì–ª–∞–≤–Ω–∞—è / –ò–Ω–≤–∞–π—Ç–µ—Ä")
        breadcrumb.setObjectName("Breadcrumb")
        breadcrumb.setStyleSheet("""
            QLabel#Breadcrumb {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.6);
                font-weight: 400;
            }
        """)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = self._create_control_buttons()

        header_layout.addWidget(breadcrumb)
        header_layout.addStretch()
        header_layout.addLayout(control_buttons)

        layout.addWidget(header_container)

    def _create_control_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        self.create_profile_btn = QPushButton("+ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        self.create_profile_btn.setObjectName("CreateProfileButton")
        self.create_profile_btn.setFixedSize(150, 40)
        self.create_profile_btn.setStyleSheet("""
            QPushButton#CreateProfileButton {
                background: #10B981;
                border: 1px solid #059669;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
            }
            QPushButton#CreateProfileButton:hover {
                background: #059669;
                border-color: #047857;
            }
            QPushButton#CreateProfileButton:pressed {
                background: #047857;
            }
        """)
        self.create_profile_btn.clicked.connect(self._on_create_profile)

        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö
        self.start_all_btn = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ")
        self.start_all_btn.setObjectName("StartAllButton")
        self.start_all_btn.setFixedSize(140, 40)
        self.start_all_btn.setStyleSheet("""
            QPushButton#StartAllButton {
                background: #3B82F6;
                border: 1px solid #2563EB;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
            }
            QPushButton#StartAllButton:hover {
                background: #2563EB;
                border-color: #1D4ED8;
            }
        """)
        self.start_all_btn.clicked.connect(self._on_start_all_profiles_optimized)

        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö
        self.stop_all_btn = QPushButton("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ")
        self.stop_all_btn.setObjectName("StopAllButton")
        self.stop_all_btn.setFixedSize(150, 40)
        self.stop_all_btn.setStyleSheet("""
            QPushButton#StopAllButton {
                background: #EF4444;
                border: 1px solid #DC2626;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
            }
            QPushButton#StopAllButton:hover {
                background: #DC2626;
                border-color: #B91C1C;
            }
        """)
        self.stop_all_btn.clicked.connect(self._on_stop_all_profiles_optimized)

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        self.report_btn = QPushButton("üìä –û—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
        self.report_btn.setObjectName("ReportButton")
        self.report_btn.setFixedSize(170, 40)
        self.report_btn.setStyleSheet("""
            QPushButton#ReportButton {
                background: #8B5CF6;
                border: 1px solid #7C3AED;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
            }
            QPushButton#ReportButton:hover {
                background: #7C3AED;
                border-color: #6D28D9;
            }
            QPushButton#ReportButton:pressed {
                background: #6D28D9;
            }
        """)
        self.report_btn.clicked.connect(self._on_generate_accounts_report)

        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_btn.setObjectName("RefreshButton")
        self.refresh_btn.setFixedSize(120, 40)
        self.refresh_btn.setStyleSheet("""
            QPushButton#RefreshButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 14px;
                font-weight: 500;
            }
            QPushButton#RefreshButton:hover {
                background: rgba(255, 255, 255, 0.12);
                border: 1px solid rgba(59, 130, 246, 0.5);
                color: #FFFFFF;
            }
        """)
        self.refresh_btn.clicked.connect(self._on_refresh_profiles_optimized)

        buttons_layout.addWidget(self.create_profile_btn)
        buttons_layout.addWidget(self.start_all_btn)
        buttons_layout.addWidget(self.stop_all_btn)
        buttons_layout.addWidget(self.report_btn)
        buttons_layout.addWidget(self.refresh_btn)

        return buttons_layout

    def _on_create_profile(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            from gui.notifications import show_success, show_error, show_info
            from src.modules.impl.inviter import create_profile

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            profile_data = show_create_profile_dialog(self)

            if profile_data and profile_data.get('name'):
                profile_name = profile_data['name']

                show_info(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
                    f"–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'..."
                )

                # –ê–°–ò–ù–•–†–û–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                def create_task():
                    try:
                        result = create_profile(profile_name, profile_data)

                        # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        QTimer.singleShot(100, lambda: self._on_profile_created(result, profile_name))

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
                        QTimer.singleShot(100, lambda: self._on_profile_create_error(str(e)))

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
                thread = threading.Thread(target=create_task, daemon=True)
                thread.start()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ GUI: {e}")
            from gui.notifications import show_error
            show_error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}")

    def _on_profile_created(self, result, profile_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        from gui.notifications import show_success, show_error

        if result.get('success'):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._reload_all_data()

            show_success(
                "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω",
                f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n"
                f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞\n"
                f"üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
                f"üìã –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
            )

            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GUI –º–æ–¥—É–ª—å: {profile_name}")
        else:
            show_error(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
                f"‚ùå {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )

    def _on_profile_create_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        from gui.notifications import show_error
        show_error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è", f"‚ùå {error_message}")

    def _on_start_all_profiles_optimized(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ GUI"""
        if self.is_mass_operation_running:
            logger.warning("‚ö†Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return

        try:
            from gui.notifications import show_info

            self.is_mass_operation_running = True
            self._set_mass_operation_buttons_state(False)

            show_info("–ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫", "–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ñ–æ–Ω–µ...")

            # –ê–°–ò–ù–•–†–û–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            def start_all_task():
                try:
                    from src.modules.impl.inviter import start_all_profiles

                    results = start_all_profiles()

                    # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    QTimer.singleShot(100, lambda: self._on_start_all_completed(results))

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
                    QTimer.singleShot(100, lambda: self._on_mass_operation_error("–∑–∞–ø—É—Å–∫–∞", str(e)))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            thread = threading.Thread(target=start_all_task, daemon=True)
            thread.start()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ GUI: {e}")
            self._on_mass_operation_error("–∑–∞–ø—É—Å–∫–∞", str(e))

    def _on_start_all_completed(self, results):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        from gui.notifications import show_success, show_warning, show_error

        self.is_mass_operation_running = False
        self._set_mass_operation_buttons_state(True)

        success_count = sum(1 for success in results.values() if success)
        total_count = len(results)

        if success_count > 0:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._reload_all_data()

            if success_count == total_count:
                show_success(
                    "–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã",
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {success_count} –ø—Ä–æ—Ñ–∏–ª–µ–π"
                )
            else:
                show_warning(
                    "–ß–∞—Å—Ç–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫",
                    f"‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω–æ: {success_count}/{total_count} –ø—Ä–æ—Ñ–∏–ª–µ–π"
                )
        else:
            show_error(
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞",
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"
            )

        logger.info(f"üöÄ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ GUI –º–æ–¥—É–ª—å: {success_count}/{total_count}")

    def _on_stop_all_profiles_optimized(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ GUI"""
        if self.is_mass_operation_running:
            logger.warning("‚ö†Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return

        try:
            from gui.notifications import show_info

            self.is_mass_operation_running = True
            self._set_mass_operation_buttons_state(False)

            show_info("–ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ñ–æ–Ω–µ...")

            # –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            def stop_all_task():
                try:
                    from src.modules.impl.inviter import stop_all_profiles

                    results = stop_all_profiles()

                    # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    QTimer.singleShot(100, lambda: self._on_stop_all_completed(results))

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
                    QTimer.singleShot(100, lambda: self._on_mass_operation_error("–æ—Å—Ç–∞–Ω–æ–≤–∫–∏", str(e)))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            thread = threading.Thread(target=stop_all_task, daemon=True)
            thread.start()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ GUI: {e}")
            self._on_mass_operation_error("–æ—Å—Ç–∞–Ω–æ–≤–∫–∏", str(e))

    def _on_stop_all_completed(self, results):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        from gui.notifications import show_warning, show_info

        self.is_mass_operation_running = False
        self._set_mass_operation_buttons_state(True)

        success_count = sum(1 for success in results.values() if success)
        total_count = len(results)

        if success_count > 0:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._reload_all_data()

            show_warning(
                "–ü—Ä–æ—Ñ–∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
                f"‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success_count}/{total_count} –ø—Ä–æ—Ñ–∏–ª–µ–π"
            )
        else:
            show_info(
                "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–∂–µ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            )

        logger.info(f"‚è∏Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ GUI –º–æ–¥—É–ª—å: {success_count}/{total_count}")

    def _set_mass_operation_buttons_state(self, enabled: bool):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            if hasattr(self, 'start_all_btn'):
                self.start_all_btn.setEnabled(enabled)
                if not enabled:
                    self.start_all_btn.setText("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º...")
                else:
                    self.start_all_btn.setText("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ")

            if hasattr(self, 'stop_all_btn'):
                self.stop_all_btn.setEnabled(enabled)
                if not enabled:
                    self.stop_all_btn.setText("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
                else:
                    self.stop_all_btn.setText("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ")

            if hasattr(self, 'refresh_btn'):
                self.refresh_btn.setEnabled(enabled)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫: {e}")

    def _on_mass_operation_error(self, operation_type: str, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        from gui.notifications import show_error

        self.is_mass_operation_running = False
        self._set_mass_operation_buttons_state(True)

        show_error(f"–û—à–∏–±–∫–∞ {operation_type}", f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π {operation_type}: {error_message}")

    def _on_refresh_profiles_optimized(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ GUI"""
        try:
            from gui.notifications import show_info

            self._set_refresh_button_state(False)
            show_info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ...")

            # –ê–°–ò–ù–•–†–û–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            def refresh_task():
                try:
                    from src.modules.impl.inviter import refresh_inviter_module

                    refresh_inviter_module()

                    # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    QTimer.singleShot(100, self._on_refresh_completed)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    QTimer.singleShot(100, lambda: self._on_refresh_error(str(e)))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            thread = threading.Thread(target=refresh_task, daemon=True)
            thread.start()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GUI: {e}")
            self._on_refresh_error(str(e))

    def _on_refresh_completed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        from gui.notifications import show_success

        self._set_refresh_button_state(True)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._reload_all_data()

        show_success(
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
        )

        logger.info("üîÑ –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ GUI")

    def _on_refresh_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        from gui.notifications import show_error

        self._set_refresh_button_state(True)
        show_error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å: {error_message}")

    def _set_refresh_button_state(self, enabled: bool):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'refresh_btn'):
                self.refresh_btn.setEnabled(enabled)
                if not enabled:
                    self.refresh_btn.setText("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...")
                else:
                    self.refresh_btn.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def _create_stats_section(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            loading_stats = [
                ("–ó–∞–≥—Ä—É–∑–∫–∞...", "...", "#F59E0B", "loading"),
                ("–ü—Ä–æ—Ñ–∏–ª–µ–π", "...", "#3B82F6", "profiles"),
                ("–ê–∫—Ç–∏–≤–Ω—ã—Ö", "...", "#10B981", "active"),
                ("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "...", "#6B7280", "completed")
            ]

            self.stats_widget = InviterStatsWidget(loading_stats)
            layout.addWidget(self.stats_widget)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ê–°–ò–ù–•–†–û–ù–ù–û
            QTimer.singleShot(500, self._load_stats_async)

            logger.debug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∑–∞–≥–ª—É—à–∫–æ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _load_stats_async(self):
        """–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

        def load_task():
            try:
                from src.modules.impl.inviter import get_inviter_stats

                stats_data = get_inviter_stats()

                # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                QTimer.singleShot(0, lambda: self._update_stats_widget(stats_data))

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ GUI
                QTimer.singleShot(0, self._show_stats_error)

        thread = threading.Thread(target=load_task, daemon=True)
        thread.start()

    def _update_stats_widget(self, stats_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            for i, (title, value, color, key) in enumerate(stats_data):
                if i < len(self.stats_widget.stat_boxes):
                    self.stats_widget.update_stat(i, value)

            logger.debug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _show_stats_error(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        error_stats = [
            ("–û—à–∏–±–∫–∞", "‚ùå", "#EF4444", "error"),
            ("–ó–∞–≥—Ä—É–∑–∫–∏", "0", "#EF4444", "failed")
        ]

        for i, (title, value, color, key) in enumerate(error_stats):
            if i < len(self.stats_widget.stat_boxes):
                self.stats_widget.update_stat(i, value)

    def _create_profiles_section(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_header = QWidget()
        section_layout = QHBoxLayout(section_header)
        section_layout.setContentsMargins(0, 0, 0, 0)

        section_title = QLabel("üì® –ü—Ä–æ—Ñ–∏–ª–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞")
        section_title.setObjectName("SectionTitle")
        section_title.setStyleSheet("""
            QLabel#SectionTitle {
                font-size: 18px;
                font-weight: 600;
                color: rgba(255, 255, 255, 0.9);
                margin: 10px 0;
            }
        """)

        section_layout.addWidget(section_title)
        section_layout.addStretch()

        layout.addWidget(section_header)

        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profiles_table = OptimizedInviterTableWidget()
        self.profiles_table.set_parent_manager(self)
        layout.addWidget(self.profiles_table)

    def _on_generate_accounts_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º —Å –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ú –¥–∏–∞–ª–æ–≥–æ–º"""
        try:
            from gui.dialogs.report_progress_dialog import show_report_progress_dialog
            from PySide6.QtCore import QThread, Signal

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_dialog = show_report_progress_dialog(self)

            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            class OptimizedReportWorker(QThread):
                status_update = Signal(str, str)
                progress_update = Signal(int, int)
                finished = Signal(str, dict)
                error = Signal(str)

                def run(self):
                    try:
                        from src.services.account_report_service import AccountReportService

                        self.status_update.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤",
                                                "–°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

                        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤
                        report_service = AccountReportService()

                        self.status_update.emit("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                                "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")

                        folders_to_scan = [
                            ("–ê–∫–∫–∞—É–Ω—Ç—ã", "–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"),
                            ("–°–ø–∏—Å–∞–Ω–Ω—ã–µ", "–ê–∫–∫–∞—É–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Å–ø–∏—Å–∞–Ω–∏—è"),
                            ("–ú–µ—Ä—Ç–≤—ã–µ", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"),
                            ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ", "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"),
                            ("–°–ø–∞–º_–±–ª–æ–∫", "–ê–∫–∫–∞—É–Ω—Ç—ã —Å–æ —Å–ø–∞–º-–±–ª–æ–∫–∞–º–∏"),
                            ("–ë–ª–æ–∫_–∏–Ω–≤–∞–π—Ç–æ–≤", "–ê–∫–∫–∞—É–Ω—Ç—ã —Å –±–ª–æ–∫–∞–º–∏ –∏–Ω–≤–∞–π—Ç–æ–≤"),
                            ("–£—Å–ø–µ—à–Ω–æ_–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ", "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ —Ä–∞–±–æ—Ç—É"),
                            ("–§–ª—É–¥", "–ê–∫–∫–∞—É–Ω—Ç—ã —Å —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–∞–º–∏")
                        ]

                        total_folders = len(folders_to_scan)
                        self.progress_update.emit(0, total_folders)

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                        for i, (folder_name, folder_desc) in enumerate(folders_to_scan):
                            self.status_update.emit(
                                f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {folder_name}",
                                f"üìÅ {folder_desc}"
                            )

                            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                            import time
                            time.sleep(0.1)

                            self.progress_update.emit(i + 1, total_folders)

                        self.status_update.emit("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", "üìù –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞...")

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                        report_path = report_service.generate_report()

                        self.status_update.emit("–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É...")

                        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        stats = report_service.get_summary_stats()

                        self.status_update.emit("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

                        self.finished.emit(report_path, stats)

                    except Exception as e:
                        import traceback
                        error_details = f"{str(e)}\n\n–î–µ—Ç–∞–ª–∏:\n{traceback.format_exc()}"
                        self.error.emit(error_details)

            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫
            self.report_worker = OptimizedReportWorker()

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            def on_status_update(status: str, details: str):
                progress_dialog.update_status(status, details)

            def on_progress_update(current: int, total: int):
                progress_dialog.set_progress_range(0, total)
                progress_dialog.set_progress_value(current)

            def on_report_finished(file_path: str, stats: dict):
                progress_dialog.finish_success(file_path, stats)

                logger.info(f"üìä –û—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º —Å–æ–∑–¥–∞–Ω: {file_path}")

                from gui.notifications import show_success
                from paths import Path
                show_success(
                    "–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! üìä",
                    f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['total_accounts']:,}\n"
                    f"‚úÖ –° –∏–Ω–≤–∞–π—Ç–∞–º–∏: {stats['accounts_with_invites']:,}\n"
                    f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–π—Ç–æ–≤: {stats['total_invites']:,}\n"
                    f"üèÜ –õ—É—á—à–∏–π –∞–∫–∫–∞—É–Ω—Ç: {stats['top_account_name']} ({stats['top_account_invites']} –∏–Ω–≤–∞–π—Ç–æ–≤)\n"
                    f"üìÅ –ü–∞–ø–æ–∫ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['folders_scanned']}\n\n"
                    f"üìÑ –§–∞–π–ª: {Path(file_path).name}"
                )

                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –æ—Ç—á–µ—Ç–æ–º
                try:
                    import os
                    import platform
                    from pathlib import Path

                    report_folder = Path(file_path).parent

                    if platform.system() == "Windows":
                        os.startfile(report_folder)
                    elif platform.system() == "Darwin":
                        os.system(f"open '{report_folder}'")
                    else:
                        os.system(f"xdg-open '{report_folder}'")

                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

            def on_report_error(error_msg: str):
                progress_dialog.finish_error(error_msg)

                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º: {error_msg}")

                from gui.notifications import show_error
                show_error(
                    "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç:\n\n{error_msg}"
                )

            def on_progress_cancelled():
                if hasattr(self, 'report_worker') and self.report_worker.isRunning():
                    self.report_worker.terminate()
                    self.report_worker.wait()

                from gui.notifications import show_info
                show_info(
                    "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                    "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.report_worker.status_update.connect(on_status_update)
            self.report_worker.progress_update.connect(on_progress_update)
            self.report_worker.finished.connect(on_report_finished)
            self.report_worker.error.connect(on_report_error)
            progress_dialog.cancelled.connect(on_progress_cancelled)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            progress_dialog.show()
            self.report_worker.start()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            from gui.notifications import show_error
            show_error(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞:\n{e}"
            )

    def _reload_stats_from_module(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        QTimer.singleShot(0, self._load_stats_async)

    def _reload_all_data(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.debug("üîÑ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            self._reload_stats_from_module()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª–µ–π
            if hasattr(self, 'profiles_table'):
                self.profiles_table.refresh_data()

            logger.debug("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –º–æ–¥—É–ª—è")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥—É–ª—è: {e}")

    def refresh_data(self):
        """–û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô"""
        try:
            logger.info("üîÑ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö GUI –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ
            self._reload_all_data()

            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ GUI –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def start_animation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è"""
        try:
            # –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if hasattr(self, 'stats_widget'):
                QTimer.singleShot(100, self.stats_widget.animate_appearance)

            # –ê–Ω–∏–º–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            if hasattr(self, 'profiles_table'):
                QTimer.singleShot(300, self.profiles_table.animate_appearance)

            logger.debug("üé¨ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –∞–Ω–∏–º–∞—Ü–∏–∏ GUI –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π: {e}")

    def get_module_status(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            from src.modules.impl.inviter.inviter_manager import _inviter_module_manager

            if _inviter_module_manager:
                return {
                    'module_loaded': True,
                    'profiles_count': len(_inviter_module_manager.profile_manager.profiles),
                    'active_processes': len(_inviter_module_manager.active_processes),
                    'stats_cache': _inviter_module_manager._stats_cache,
                    'background_workers': hasattr(self, 'worker_manager') and self.worker_manager.is_initialized
                }
            else:
                return {
                    'module_loaded': False,
                    'error': '–ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }

        except Exception as e:
            return {
                'module_loaded': False,
                'error': str(e)
            }

    def show_module_diagnostics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        try:
            from gui.notifications import show_info

            status = self.get_module_status()

            if status.get('module_loaded'):
                show_info(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è",
                    f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω\n"
                    f"üì® –ü—Ä–æ—Ñ–∏–ª–µ–π: {status.get('profiles_count', 0)}\n"
                    f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {status.get('active_processes', 0)}\n"
                    f"üîß –§–æ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ: {'‚úÖ' if status.get('background_workers') else '‚ùå'}"
                )
            else:
                show_info(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è",
                    f"‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω\n"
                    f"–û—à–∏–±–∫–∞: {status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è: {e}")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.is_mass_operation_running = False

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö
            if hasattr(self, 'worker_manager') and self.worker_manager:
                from gui.workers.background_workers import shutdown_worker_manager
                shutdown_worker_manager()

            # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ GUI –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            from src.modules.impl.inviter import stop_all_profiles
            stop_all_profiles()

            logger.debug("üîÑ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô GUI –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç, –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏