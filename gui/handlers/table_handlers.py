# gui/handlers/table_handlers.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
"""

from typing import List, Dict, Optional
from PySide6.QtWidgets import QMessageBox
from PySide6.QtCore import QTimer
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from gui.notifications import show_success, show_error, show_warning, show_info

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
from gui.dialogs.custom_confirm_dialog import show_delete_confirmation


class TableActionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, table_widget):
        """
        table_widget: –°—Å—ã–ª–∫–∞ –Ω–∞ AccountTableWidget
        """
        self.table = table_widget

    def handle_delete_action(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            selected_accounts = self.table.get_selected_account_names()
            category = self.get_table_category()

            if not selected_accounts:
                show_info(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return

            if not category:
                show_error(
                    "–û—à–∏–±–∫–∞",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            from src.accounts.manager import _account_manager

            if not _account_manager:
                show_error(
                    "–û—à–∏–±–∫–∞",
                    "–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            accounts_info = _account_manager.get_account_info_for_deletion(selected_accounts, category)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if self._show_beautiful_confirmation(accounts_info):
                self._perform_deletion(selected_accounts, category)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            show_error(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}"
            )

    def _show_beautiful_confirmation(self, accounts_info: List[dict]) -> bool:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not accounts_info:
            show_warning("–û—à–∏–±–∫–∞", "–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        count = len(accounts_info)
        title = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"

        if count == 1:
            message = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç?"
        else:
            message = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {count} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)?"

        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        parent_window = self.table
        while parent_window.parent():
            parent_window = parent_window.parent()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        return show_delete_confirmation(
            parent=parent_window,
            title=title,
            message=message,
            accounts_info=accounts_info
        )

    def _perform_deletion(self, account_names: List[str], category: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        try:
            from src.accounts.manager import _account_manager

            logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ {len(account_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            results = _account_manager.delete_accounts(account_names, category)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self._show_deletion_results(results)

            # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã
            self._simple_refresh_after_deletion(category)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            show_error(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}"
            )

    def handle_move_action(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            selected_accounts = self.table.get_selected_account_names()
            category = self.get_table_category()

            if not selected_accounts:
                show_info(
                    "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
                )
                return

            if not category:
                show_error(
                    "–û—à–∏–±–∫–∞",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            from src.accounts.manager import _account_manager

            if not _account_manager:
                show_error(
                    "–û—à–∏–±–∫–∞",
                    "–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            accounts_info = []
            for account_name in selected_accounts:
                if category == "traffic":
                    account_data = _account_manager.traffic_accounts.get(account_name)
                elif category == "sales":
                    account_data = _account_manager.sales_accounts.get(account_name)
                else:
                    continue

                if account_data:
                    info = account_data.info
                    accounts_info.append({
                        'name': account_name,
                        'full_name': info.get('full_name', '?'),
                        'phone': info.get('phone', '?'),
                        'status': account_data.status,
                        'category': category
                    })

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–±–µ—Ä–µ–º –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
            current_status = accounts_info[0]['status'] if accounts_info else "unknown"
            destinations = _account_manager.get_move_destinations(category, current_status)

            if not destinations:
                show_warning(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π",
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            selected_destination = self._show_move_dialog(accounts_info, destinations, category)

            if selected_destination:
                self._perform_move(selected_accounts, category, selected_destination)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
            show_error(
                "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}"
            )

    def _show_move_dialog(self, accounts_info: List[Dict], destinations: List[Dict],
                         current_category: str) -> Optional[Dict]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            from gui.dialogs.move_accounts_dialog import show_move_accounts_dialog

            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            parent_window = self.table
            while parent_window.parent():
                parent_window = parent_window.parent()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            return show_move_accounts_dialog(
                parent=parent_window,
                accounts_info=accounts_info,
                destinations=destinations,
                current_category=current_category
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
            return None

    def _perform_move(self, account_names: List[str], source_category: str,
                     destination: Dict):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            from src.accounts.manager import _account_manager

            target_category = destination['category']
            target_status = destination['status']

            logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {len(account_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            logger.info(f"   –ò–∑: {source_category}")
            logger.info(f"   –í: {target_category}/{target_status}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            results = _account_manager.move_accounts(
                account_names, source_category, target_category, target_status
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._show_move_results(results, destination)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self._simple_refresh_after_move(source_category)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}")
            show_error(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}"
            )

    def _show_move_results(self, results: Dict[str, bool], destination: Dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        success_count = sum(1 for success in results.values() if success)
        failed_count = len(results) - success_count

        destination_name = destination['display_name']

        if failed_count == 0:
            # –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            show_success(
                "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ {success_count} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)\n"
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination_name}"
            )
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            failed_accounts = [name for name, success in results.items() if not success]
            show_error(
                "–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏",
                f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {failed_count}\n" +
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination_name}\n" +
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: {', '.join(failed_accounts[:3])}" +
                (f" –∏ –µ—â–µ {len(failed_accounts) - 3}" if len(failed_accounts) > 3 else "")
            )

    def handle_refresh_action(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from src.accounts.manager import _account_manager
            import asyncio

            if not _account_manager:
                show_error(
                    "–û—à–∏–±–∫–∞",
                    "–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self._set_refresh_state(True)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            show_info(
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ",
                "–ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏..."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ü–û–õ–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫)
            category = self.get_table_category()
            if category:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                task = asyncio.create_task(_account_manager.refresh_category(category))
            else:
                # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                task = asyncio.create_task(_account_manager.refresh_all_accounts())

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            task.add_done_callback(lambda t: self._on_manual_refresh_complete(t))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self._set_refresh_state(False)
            show_error(
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}"
            )


    def _simple_refresh_after_deletion(self, category: str):
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            QTimer.singleShot(300, lambda: self._update_table_only(category))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def _simple_refresh_after_move(self, category: str):
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            QTimer.singleShot(300, lambda: self._update_table_only(category))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def _update_table_only(self, category: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏"""
        try:
            from src.accounts.manager import get_table_data

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_status = self.get_current_status()
            logger.info(f"üìä –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}, —Å—Ç–∞—Ç—É—Å: {current_status}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
            new_data = get_table_data(category, current_status, limit=-1)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            if hasattr(self.table, 'update_table_data'):
                self.table.update_table_data(new_data)
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: {len(new_data)}")
            else:
                # Fallback - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self.table.config['demo_data'] = new_data
                if hasattr(self.table, '_load_initial_data'):
                    self.table._load_initial_data()
                elif hasattr(self.table, '_fill_table_data'):
                    self.table._fill_table_data()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ fallback –º–µ—Ç–æ–¥")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
            self._update_parent_stats_only(category)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if hasattr(self.table, 'get_pagination_info'):
                pag_info = self.table.get_pagination_info()
                logger.info(f"üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {pag_info['current_page']}/{pag_info['total_pages']}, –ø–æ–∫–∞–∑–∞–Ω–æ {pag_info['per_page']} –∏–∑ {pag_info['total_items']}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

    def _update_parent_stats_only(self, category: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"""
        try:
            from src.accounts.manager import get_traffic_stats, get_sales_stats

            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            parent = self.table.parent()
            while parent:
                if hasattr(parent, 'stats_widget'):
                    logger.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ")

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if category == "traffic":
                        new_stats = get_traffic_stats()
                    elif category == "sales":
                        new_stats = get_sales_stats()
                    else:
                        break

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    for i, (title, value, color) in enumerate(new_stats):
                        if i < len(parent.stats_widget.stat_boxes):
                            parent.stats_widget.update_stat(i, value)
                            logger.debug(f"   üìä –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç {i}: {title} = {value}")

                    break
                parent = parent.parent()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _show_deletion_results(self, results: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        success_count = sum(1 for success in results.values() if success)
        failed_count = len(results) - success_count

        if failed_count == 0:
            # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            show_success(
                "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {success_count} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)\n–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            failed_accounts = [name for name, success in results.items() if not success]
            show_error(
                "–û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
                f"–£–¥–∞–ª–µ–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {failed_count}\n" +
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {', '.join(failed_accounts[:3])}" +
                (f" –∏ –µ—â–µ {len(failed_accounts) - 3}" if len(failed_accounts) > 3 else "")
            )

    def _set_refresh_state(self, refreshing: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if hasattr(self.table, 'update_btn'):
            if refreshing:
                self.table.update_btn.setText("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                self.table.update_btn.setEnabled(False)
            else:
                self.table.update_btn.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
                self.table.update_btn.setEnabled(True)

    def _on_manual_refresh_complete(self, task):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –†–£–ß–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._set_refresh_state(False)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = task.result()

            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            category = self.get_table_category()
            if category:
                parent = self.table.parent()
                while parent:
                    if hasattr(parent, 'refresh_data'):
                        logger.info("üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
                        parent.refresh_data()
                        break
                    parent = parent.parent()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if isinstance(result, dict) and 'traffic_diff' in result:
                # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                traffic_diff = result['traffic_diff']
                sales_diff = result['sales_diff']

                if traffic_diff != 0 or sales_diff != 0:
                    show_success(
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö:\n–¢—Ä–∞—Ñ–∏–∫: {traffic_diff:+d}, –ü—Ä–æ–¥–∞–∂–∏: {sales_diff:+d}"
                    )
                else:
                    show_info(
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
                    )
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if isinstance(result, int):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    pag_info = ""
                    if hasattr(self.table, 'get_pagination_info'):
                        pag_data = self.table.get_pagination_info()
                        if pag_data['total_pages'] > 1:
                            pag_info = f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pag_data['current_page']}/{pag_data['total_pages']}"

                    show_success(
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {result}{pag_info}"
                    )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self._set_refresh_state(False)
            show_error(
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            )

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ - —É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ self.table.config
    def get_table_category(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞–±–ª–∏—Ü—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
        if hasattr(self.table, 'category'):
            return self.table.category
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ category, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ config
        if hasattr(self.table, 'config') and 'category' in self.table.config:
            return self.table.config['category']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        parent = self.table.parent()
        while parent:
            if hasattr(parent, 'category'):
                return parent.category
            parent = parent.parent()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º traffic –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞–±–ª–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'traffic' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return 'traffic'

    def get_current_status(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–ø–∞–ø–∫—É) —Ç–∞–±–ª–∏—Ü—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
        if hasattr(self.table, 'current_status'):
            return self.table.current_status
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ current_status, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ config
        if hasattr(self.table, 'config') and 'current_status' in self.table.config:
            return self.table.config['current_status']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        parent = self.table.parent()
        while parent:
            if hasattr(parent, 'current_status'):
                return parent.current_status
            parent = parent.parent()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = self.get_table_category()
        if category == "traffic":
            return "active"
        elif category == "sales":
            return "registration"
        else:
            return "active"