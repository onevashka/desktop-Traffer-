# gui/dialogs/main_admins_dialog.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
–ó–∞–º–µ–Ω—è–µ—Ç bot_holders_dialog.py —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
"""

from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTabWidget, QCheckBox, QScrollArea, QWidget, QFrame,
    QSizePolicy, QSpacerItem
)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont
from loguru import logger
from pathlib import Path
from typing import List, Dict, Optional


class AccountListWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏"""

    def __init__(self, title: str, accounts: List[Dict], checkable: bool = True):
        super().__init__()
        self.accounts = accounts
        self.checkable = checkable
        self.account_items = []

        self._create_ui(title)

    def _create_ui(self, title: str):
        """–°–æ–∑–¥–∞–µ—Ç UI —Å–ø–∏—Å–∫–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 16, 16, 16)
        layout.setSpacing(12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setObjectName("SectionTitle")
        title_label.setStyleSheet("""
            QLabel#SectionTitle {
                font-size: 16px;
                font-weight: 600;
                color: rgba(255, 255, 255, 0.9);
                margin-bottom: 8px;
            }
        """)
        layout.addWidget(title_label)

        # –°–∫—Ä–æ–ª–ª –æ–±–ª–∞—Å—Ç—å
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                background: rgba(255, 255, 255, 0.1);
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background: rgba(255, 255, 255, 0.3);
                border-radius: 4px;
            }
        """)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_widget = QWidget()
        accounts_layout = QVBoxLayout(accounts_widget)
        accounts_layout.setSpacing(8)
        accounts_layout.setContentsMargins(0, 0, 0, 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        for account in self.accounts:
            account_item = self._create_account_item(account)
            accounts_layout.addWidget(account_item)
            self.account_items.append(account_item)

        accounts_layout.addStretch()
        scroll.setWidget(accounts_widget)
        layout.addWidget(scroll)

    def _create_account_item(self, account: Dict) -> QFrame:
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
        frame = QFrame()
        frame.setObjectName("AccountItem")
        frame.setStyleSheet("""
            QFrame#AccountItem {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 8px;
                margin: 2px;
            }
            QFrame#AccountItem:hover {
                background: rgba(255, 255, 255, 0.08);
                border-color: rgba(255, 255, 255, 0.2);
            }
        """)

        layout = QHBoxLayout(frame)
        layout.setContentsMargins(12, 8, 12, 8)
        layout.setSpacing(12)

        # –ß–µ–∫–±–æ–∫—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        if self.checkable:
            checkbox = QCheckBox()
            checkbox.setStyleSheet("""
                QCheckBox::indicator {
                    width: 18px;
                    height: 18px;
                    border-radius: 3px;
                    border: 2px solid rgba(255, 255, 255, 0.3);
                    background: rgba(255, 255, 255, 0.05);
                }
                QCheckBox::indicator:checked {
                    background: #3B82F6;
                    border-color: #3B82F6;
                }
                QCheckBox::indicator:checked::after {
                    content: "‚úì";
                    color: white;
                }
            """)
            layout.addWidget(checkbox)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        info_layout = QVBoxLayout()
        info_layout.setSpacing(2)

        # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        name_label = QLabel(account['name'])
        name_label.setStyleSheet("""
            font-size: 14px;
            font-weight: 600;
            color: #FFFFFF;
        """)
        info_layout.addWidget(name_label)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        details = []
        if account.get('phone'):
            details.append(f"üì± {account['phone']}")
        if account.get('full_name'):
            details.append(f"üë§ {account['full_name']}")

        if details:
            details_label = QLabel(" ‚Ä¢ ".join(details))
            details_label.setStyleSheet("""
                font-size: 12px;
                color: rgba(255, 255, 255, 0.7);
            """)
            info_layout.addWidget(details_label)

        layout.addLayout(info_layout, 1)

        # –°—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if account.get('is_main_admin'):
            status_label = QLabel("üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω")
            status_label.setStyleSheet("""
                background: rgba(34, 197, 94, 0.2);
                color: #22C55E;
                border: 1px solid rgba(34, 197, 94, 0.3);
                border-radius: 12px;
                padding: 4px 8px;
                font-size: 11px;
                font-weight: 500;
            """)
            layout.addWidget(status_label)

        return frame

    def get_selected_accounts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if not self.checkable:
            return []

        selected = []
        for i, item in enumerate(self.account_items):
            checkbox = item.findChild(QCheckBox)
            if checkbox and checkbox.isChecked():
                selected.append(self.accounts[i])

        return selected


class MainAdminsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""

    accounts_selected = Signal(list)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

    def __init__(self, parent, profile_name: str):
        super().__init__(parent)
        self.profile_name = profile_name
        self.selected_accounts = []

        self.setWindowTitle(f"–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã - {profile_name}")
        self.setFixedSize(800, 600)
        self.setModal(True)

        # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.available_widget = None
        self.admins_widget = None

        self._setup_styles()
        self._create_ui()
        self.load_accounts()

    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(
                    x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 rgba(15, 23, 42, 0.98),
                    stop: 1 rgba(30, 41, 59, 0.95)
                );
                border: 2px solid rgba(255, 255, 255, 0.1);
                border-radius: 16px;
                backdrop-filter: blur(20px);
            }

            QLabel#DialogIcon {
                font-size: 32px;
                background: rgba(251, 191, 36, 0.1);
                border-radius: 24px;
                border: 2px solid rgba(251, 191, 36, 0.3);
            }

            QLabel#DialogTitle {
                font-size: 20px;
                font-weight: 700;
                color: #FFFFFF;
                margin: 0;
            }

            QLabel#DialogDescription {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.7);
                margin-top: 5px;
            }

            QTabWidget::pane {
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                background: rgba(255, 255, 255, 0.02);
            }

            QTabBar::tab {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                padding: 10px 20px;
                margin-right: 2px;
                color: rgba(255, 255, 255, 0.7);
                font-size: 13px;
                font-weight: 500;
            }

            QTabBar::tab:selected {
                background: rgba(251, 191, 36, 0.2);
                border-color: rgba(251, 191, 36, 0.4);
                color: #FFFFFF;
            }

            QTabBar::tab:hover:!selected {
                background: rgba(255, 255, 255, 0.08);
                border-color: rgba(255, 255, 255, 0.2);
            }

            QPushButton#CancelButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 14px;
                font-weight: 500;
                padding: 12px 24px;
            }

            QPushButton#CancelButton:hover {
                background: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.3);
                color: #FFFFFF;
            }

            QPushButton#ConfirmButton {
                background: #FBBF24;
                border: 1px solid #FBBF24;
                border-radius: 8px;
                color: #000000;
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#ConfirmButton:hover {
                background: #F59E0B;
                border-color: #F59E0B;
            }

            QPushButton#SecondaryButton {
                background: rgba(251, 191, 36, 0.2);
                border: 1px solid rgba(251, 191, 36, 0.5);
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 500;
                padding: 10px 20px;
            }

            QPushButton#SecondaryButton:hover {
                background: rgba(251, 191, 36, 0.3);
                border-color: rgba(251, 191, 36, 0.7);
            }
        """)

    def _create_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç UI –¥–∏–∞–ª–æ–≥–∞"""
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setContentsMargins(24, 24, 24, 24)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(layout)

        # –í–∫–ª–∞–¥–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        self._create_tabs(layout)

        # –ö–Ω–æ–ø–∫–∏
        self._create_buttons(layout)

    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞"""
        header_layout = QHBoxLayout()
        header_layout.setSpacing(15)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel("üëë")
        icon_label.setObjectName("DialogIcon")
        icon_label.setFixedSize(48, 48)
        icon_label.setAlignment(Qt.AlignCenter)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        text_layout = QVBoxLayout()

        title_label = QLabel(f"–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã - {self.profile_name}")
        title_label.setObjectName("DialogTitle")

        desc_label = QLabel(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—É—Ç –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏ –≤ —á–∞—Ç–∞—Ö.\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{self.profile_name}/–ê–¥–º–∏–Ω—ã/'"
        )
        desc_label.setObjectName("DialogDescription")
        desc_label.setWordWrap(True)

        text_layout.addWidget(title_label)
        text_layout.addWidget(desc_label)

        header_layout.addWidget(icon_label)
        header_layout.addLayout(text_layout, 1)

        layout.addLayout(header_layout)

    def _create_tabs(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

    def _create_buttons(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(12)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ
        self.select_all_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        self.select_all_btn.setObjectName("SecondaryButton")
        self.select_all_btn.clicked.connect(self._select_all)

        # –ö–Ω–æ–ø–∫–∞ —Å–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        self.remove_admin_btn = QPushButton("–°–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        self.remove_admin_btn.setObjectName("SecondaryButton")
        self.remove_admin_btn.clicked.connect(self._remove_main_admins)

        buttons_layout.addWidget(self.select_all_btn)
        buttons_layout.addWidget(self.remove_admin_btn)
        buttons_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
        cancel_btn.setObjectName("CancelButton")
        cancel_btn.clicked.connect(self.reject)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.confirm_btn = QPushButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞–º–∏")
        self.confirm_btn.setObjectName("ConfirmButton")
        self.confirm_btn.clicked.connect(self._confirm_selection)

        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(self.confirm_btn)

        layout.addLayout(buttons_layout)

    def load_accounts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            self.tabs.clear()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            available_accounts = self._load_available_accounts()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            main_admins = self._load_main_admins()

            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            if available_accounts:
                available_widget = AccountListWidget(
                    "–ê–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏",
                    available_accounts,
                    checkable=True
                )
                self.tabs.addTab(available_widget, f"üü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ ({len(available_accounts)})")
                self.available_widget = available_widget

            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏
            if main_admins:
                admins_widget = AccountListWidget(
                    "–¢–µ–∫—É—â–∏–µ –≥–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è",
                    main_admins,
                    checkable=True
                )
                self.tabs.addTab(admins_widget, f"üëë –ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã ({len(main_admins)})")
                self.admins_widget = admins_widget

            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if not available_accounts:
                empty_label = QLabel("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏")
                empty_label.setAlignment(Qt.AlignCenter)
                empty_label.setStyleSheet("""
                    QLabel {
                        font-size: 16px;
                        color: rgba(255, 255, 255, 0.5);
                        padding: 50px;
                    }
                """)
                self.tabs.addTab(empty_label, "üü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ (0)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

    def _load_available_accounts(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        try:
            from src.accounts.manager import _account_manager

            if not _account_manager:
                logger.error("‚ùå AccountManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞
            available = []
            for name, account_data in _account_manager.traffic_accounts.items():
                if account_data.status == "active":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
                    if not self._is_main_admin(name):
                        available.append({
                            'name': name,
                            'phone': account_data.info.get('phone', ''),
                            'full_name': account_data.info.get('full_name', ''),
                            'is_main_admin': False,
                            'account_data': account_data
                        })

            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(available)}")
            return available

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []

    def _load_main_admins(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            admins_folder = self._get_profile_admins_folder()

            if not admins_folder or not admins_folder.exists():
                return []

            admins = []

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É –ê–¥–º–∏–Ω—ã
            for session_file in admins_folder.glob("*.session"):
                json_file = session_file.with_suffix(".json")

                if json_file.exists():
                    import json
                    try:
                        with open(json_file, 'r', encoding='utf-8') as f:
                            data = json.load(f)

                        admins.append({
                            'name': session_file.stem,
                            'phone': data.get('phone', ''),
                            'full_name': f"{data.get('first_name', '')} {data.get('last_name', '')}".strip(),
                            'is_main_admin': True
                        })
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {json_file}: {e}")

            logger.info(f"üëë –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(admins)}")
            return admins

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {e}")
            return []

    def _get_profile_admins_folder(self):
        from paths import get_profile_admins_folder
        return get_profile_admins_folder(self.profile_name)

    def _is_main_admin(self, account_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"""
        admins_folder = self._get_profile_admins_folder()
        if not admins_folder:
            return False

        session_file = admins_folder / f"{account_name}.session"
        return session_file.exists()

    def _select_all(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ"""
        current_tab = self.tabs.currentWidget()

        if isinstance(current_tab, AccountListWidget) and current_tab.checkable:
            for item in current_tab.account_items:
                checkbox = item.findChild(QCheckBox)
                if checkbox:
                    checkbox.setChecked(True)

    def _remove_main_admins(self):
        """–°–Ω–∏–º–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if not hasattr(self, 'admins_widget'):
            from gui.notifications import show_info
            show_info(
                "–°–Ω—è—Ç–∏–µ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                "–ù–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
            )
            return

        selected_admins = self.admins_widget.get_selected_accounts()

        if not selected_admins:
            from gui.notifications import show_warning
            show_warning(
                "–°–Ω—è—Ç–∏–µ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã'"
            )
            return

        # –°–Ω–∏–º–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        success_count = 0
        failed_accounts = []

        for account in selected_admins:
            account_name = account['name']
            success = self._remove_admin_account(account_name)

            if success:
                success_count += 1
                logger.info(f"üîÑ –ê–∫–∫–∞—É–Ω—Ç {account_name} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
            else:
                failed_accounts.append(account_name)
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å {account_name} —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º AccountManager –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if success_count > 0:
            self._update_account_manager()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if failed_accounts:
            from gui.notifications import show_error
            show_error(
                "–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏",
                f"–°–Ω—è—Ç–æ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {success_count}, –æ—à–∏–±–æ–∫: {len(failed_accounts)}\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å: {', '.join(failed_accounts[:3])}" +
                (f" –∏ –µ—â–µ {len(failed_accounts) - 3}" if len(failed_accounts) > 3 else "")
            )
        else:
            from gui.notifications import show_success
            show_success(
                "–ê–¥–º–∏–Ω—ã —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                f"üîÑ –£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {success_count} –∞–¥–º–∏–Ω(–æ–≤)\n"
                f"–ê–∫–∫–∞—É–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É '–¢—Ä–∞—Ñ–∏–∫'"
            )

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_accounts()

    def _confirm_selection(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if hasattr(self, 'available_widget'):
            self.selected_accounts = self.available_widget.get_selected_accounts()

            if not self.selected_accounts:
                from gui.notifications import show_warning
                show_warning(
                    "–í—ã–±–æ—Ä –∞–¥–º–∏–Ω–æ–≤",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"
                )
                return

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏
            success_count = 0
            failed_accounts = []

            for account in self.selected_accounts:
                account_name = account['name']
                success = self._assign_main_admin(account)

                if success:
                    success_count += 1
                    logger.info(f"üëë –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º")
                else:
                    failed_accounts.append(account_name)
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å {account_name} –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º AccountManager –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if success_count > 0:
                self._update_account_manager()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if failed_accounts:
                from gui.notifications import show_error
                show_error(
                    "–û—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏",
                    f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {len(failed_accounts)}\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å: {', '.join(failed_accounts[:3])}" +
                    (f" –∏ –µ—â–µ {len(failed_accounts) - 3}" if len(failed_accounts) > 3 else "")
                )
            else:
                from gui.notifications import show_success
                show_success(
                    "–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã",
                    f"üëë –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ {success_count} –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤\n"
                    f"–ê–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{self.profile_name}/–ê–¥–º–∏–Ω—ã/'"
                )

                # –≠–º–∏—Ç–∏–º —Å–∏–≥–Ω–∞–ª —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                self.accounts_selected.emit(self.selected_accounts)
                self.accept()

    def _assign_main_admin(self, account: Dict) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ paths.py"""
        try:
            account_name = account['name']
            logger.info(f"üëë –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º: {account_name}")

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞
            from src.accounts.manager import _account_manager
            account_data = _account_manager.traffic_accounts.get(account_name)

            if not account_data:
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞—Ñ–∏–∫–µ")
                return False

            session_src = account_data.account.session_path
            json_src = account_data.account.json_path

            if not session_src.exists() or not json_src.exists():
                logger.error(f"‚ùå –§–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ò–ó paths.py!
            from paths import move_account_to_main_admins
            success = move_account_to_main_admins(
                self.profile_name,
                account_name,
                session_src,
                json_src
            )

            if success:
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É –∞–¥–º–∏–Ω–æ–≤")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {account_name} –≤ –ø–∞–ø–∫—É –∞–¥–º–∏–Ω–æ–≤")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º {account['name']}: {e}")
            return False

    def _remove_admin_account(self, account_name: str) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∏–º–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ paths.py"""
        try:
            logger.info(f"üîÑ –°–Ω–∏–º–∞–µ–º —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {account_name}")

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ò–ó paths.py!
            from paths import move_main_admin_to_traffic
            success = move_main_admin_to_traffic(self.profile_name, account_name)

            if success:
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ç—Ä–∞—Ñ–∏–∫")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å {account_name} –≤ —Ç—Ä–∞—Ñ–∏–∫")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {account_name}: {e}")
            return False

    def _update_account_manager(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç AccountManager –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            from src.accounts.manager import _account_manager

            if _account_manager:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º scan_all_folders –≤–º–µ—Å—Ç–æ reload_accounts
                import asyncio

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                        asyncio.create_task(_account_manager.scan_all_folders())
                    else:
                        # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        asyncio.run(_account_manager.scan_all_folders())
                except RuntimeError:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    asyncio.run(_account_manager.scan_all_folders())

                logger.info("üîÑ AccountManager –æ–±–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AccountManager: {e}")


def show_main_admins_dialog(parent, profile_name: str) -> List[Dict]:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    """
    dialog = MainAdminsDialog(parent, profile_name)

    selected = []

    def on_accounts_selected(accounts):
        nonlocal selected
        selected = accounts

    dialog.accounts_selected.connect(on_accounts_selected)

    if dialog.exec() == QDialog.Accepted:
        return selected

    return []