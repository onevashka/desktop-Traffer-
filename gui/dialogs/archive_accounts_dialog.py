"""
–ö—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import shutil
import subprocess
from pathlib import Path
from typing import List, Dict, Optional

from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QScrollArea, QWidget, QFrame, QGraphicsOpacityEffect,
    QGraphicsDropShadowEffect, QApplication, QComboBox, QLineEdit
)
from PySide6.QtCore import (
    Qt, QPropertyAnimation, QEasingCurve, QTimer, QRect,
    QParallelAnimationGroup, QThread, Signal
)
from PySide6.QtGui import QFont, QColor, QPalette, QPixmap, QPainter
from loguru import logger


class ArchiveWorker(QThread):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    progress = Signal(str)  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    finished = Signal(bool, str)  # –£—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ

    def __init__(self, accounts_info, archive_name, archive_format, archive_path):
        super().__init__()
        self.accounts_info = accounts_info
        self.archive_name = archive_name
        self.archive_format = archive_format
        self.archive_path = Path(archive_path)

    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏—é"""
        try:
            self.progress.emit("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏...")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            temp_folder = self.archive_path / self.archive_name
            temp_folder.mkdir(parents=True, exist_ok=True)

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            copied_count = 0
            for account in self.accounts_info:
                self.progress.emit(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {account['name']}...")

                # –ö–æ–ø–∏—Ä—É–µ–º .session —Ñ–∞–π–ª
                session_src = Path(account['session_file'])
                json_src = Path(account['json_file'])

                if session_src.exists():
                    shutil.copy2(session_src, temp_folder / session_src.name)
                if json_src.exists():
                    shutil.copy2(json_src, temp_folder / json_src.name)

                copied_count += 1

            self.progress.emit(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–∞–ø–∫—É
            self.progress.emit("–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...")
            archive_file = self.archive_path / f"{self.archive_name}.{self.archive_format}"

            if self.archive_format == "zip":
                self._create_zip_archive(temp_folder, archive_file)
            else:  # rar
                self._create_rar_archive(temp_folder, archive_file)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            self.progress.emit("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            shutil.rmtree(temp_folder)

            self.finished.emit(True, f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_file}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")
            self.finished.emit(False, f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {str(e)}")

    def _create_zip_archive(self, source_folder, archive_file):
        """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤"""
        shutil.make_archive(str(archive_file.with_suffix('')), 'zip', source_folder)

    def _create_rar_archive(self, source_folder, archive_file):
        """–°–æ–∑–¥–∞–µ—Ç RAR –∞—Ä—Ö–∏–≤"""
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ WinRAR
        winrar_paths = [
            r"C:\Program Files\WinRAR\WinRAR.exe",
            r"C:\Program Files (x86)\WinRAR\WinRAR.exe"
        ]

        winrar_exe = None
        for path in winrar_paths:
            if Path(path).exists():
                winrar_exe = path
                break

        if not winrar_exe:
            raise Exception("WinRAR –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RAR –∞—Ä—Ö–∏–≤–∞
        cmd = [
            winrar_exe,
            "a",  # –î–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤
            "-r",  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            str(archive_file),
            str(source_folder / "*")
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RAR: {result.stderr}")


class ArchiveAccountsDialog(QDialog):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    ACCEPTED = 1
    REJECTED = 0

    def __init__(self, accounts_info: List[Dict], current_category: str, parent=None):
        super().__init__(parent)

        self.accounts_info = accounts_info
        self.current_category = current_category
        self.result_value = self.REJECTED
        self.archive_name = ""
        self.archive_format = "zip"
        self.archive_worker = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        self.setWindowTitle("–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        self.setModal(True)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)
        self.setAttribute(Qt.WA_TranslucentBackground)

        # –†–∞–∑–º–µ—Ä—ã
        self.setFixedSize(650, 600)

        # –°–æ–∑–¥–∞–µ–º UI
        self._create_ui()
        self._setup_animations()
        self._center_on_parent()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self._apply_styles()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self._animate_in()

    def _create_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_container = QFrame()
        self.content_container.setObjectName("ContentContainer")
        content_layout = QVBoxLayout(self.content_container)
        content_layout.setContentsMargins(30, 30, 30, 30)
        content_layout.setSpacing(20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        header_layout = QHBoxLayout()
        header_layout.setSpacing(15)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel("üì¶")
        icon_label.setObjectName("DialogIcon")
        icon_label.setFixedSize(48, 48)
        icon_label.setAlignment(Qt.AlignCenter)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        title_label.setObjectName("DialogTitle")
        title_label.setWordWrap(True)

        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label, 1)

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        count = len(self.accounts_info)
        if count == 1:
            message = "–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º:"
        else:
            message = f"–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å {count} –∞–∫–∫–∞—É–Ω—Ç(–∞–º–∏):"

        message_label = QLabel(message)
        message_label.setObjectName("DialogMessage")
        message_label.setWordWrap(True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        settings_layout = self._create_archive_settings()

        # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_container = self._create_accounts_list()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel("‚ÑπÔ∏è –ê—Ä—Ö–∏–≤ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ '–ê—Ä—Ö–∏–≤—ã' –≤ –∫–æ—Ä–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        info_label.setObjectName("InfoLabel")
        info_label.setWordWrap(True)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = self._create_buttons()

        # –°–±–æ—Ä–∫–∞ layout
        content_layout.addLayout(header_layout)
        content_layout.addWidget(message_label)
        content_layout.addLayout(settings_layout)
        content_layout.addWidget(accounts_container, 1)
        content_layout.addWidget(info_label)
        content_layout.addLayout(buttons_layout)

        main_layout.addWidget(self.content_container)

        # –¢–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(30)
        shadow.setXOffset(0)
        shadow.setYOffset(10)
        shadow.setColor(QColor(0, 0, 0, 120))
        self.content_container.setGraphicsEffect(shadow)

    def _create_archive_settings(self) -> QVBoxLayout:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
        layout = QVBoxLayout()
        layout.setSpacing(15)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        name_layout = QVBoxLayout()
        name_layout.setSpacing(8)

        name_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞:")
        name_label.setObjectName("SettingsLabel")

        self.name_input = QLineEdit()
        self.name_input.setObjectName("ArchiveNameInput")
        self.name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...")
        self.name_input.setFixedHeight(40)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        from datetime import datetime
        default_name = f"accounts_{self.current_category}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.name_input.setText(default_name)

        name_layout.addWidget(name_label)
        name_layout.addWidget(self.name_input)

        # –§–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞
        format_layout = QVBoxLayout()
        format_layout.setSpacing(8)

        format_label = QLabel("–§–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞:")
        format_label.setObjectName("SettingsLabel")

        self.format_combo = QComboBox()
        self.format_combo.setObjectName("FormatCombo")
        self.format_combo.setFixedHeight(40)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WinRAR
        if self._check_winrar_available():
            self.format_combo.addItem("üì¶ ZIP –∞—Ä—Ö–∏–≤", "zip")
            self.format_combo.addItem("üì¶ RAR –∞—Ä—Ö–∏–≤", "rar")
        else:
            self.format_combo.addItem("üì¶ ZIP –∞—Ä—Ö–∏–≤", "zip")
            self.format_combo.addItem("üì¶ RAR –∞—Ä—Ö–∏–≤ (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)", "zip")

        format_layout.addWidget(format_label)
        format_layout.addWidget(self.format_combo)

        layout.addLayout(name_layout)
        layout.addLayout(format_layout)

        return layout

    def _check_winrar_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WinRAR —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            from src.accounts.manager import check_winrar_available
            return check_winrar_available()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WinRAR: {e}")
            return False

    def _create_accounts_list(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        container = QFrame()
        container.setObjectName("AccountsContainer")

        # –ü–æ–¥–ø–∏—Å—å
        list_label = QLabel(f"–ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ ({len(self.accounts_info)}):")
        list_label.setObjectName("ListLabel")

        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scroll_area = QScrollArea()
        scroll_area.setObjectName("AccountsScroll")
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
        accounts_widget = QWidget()
        accounts_layout = QVBoxLayout(accounts_widget)
        accounts_layout.setContentsMargins(10, 10, 10, 10)
        accounts_layout.setSpacing(8)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        for i, account in enumerate(self.accounts_info):
            account_item = self._create_account_item(account, i)
            accounts_layout.addWidget(account_item)

        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 12
        if len(self.accounts_info) > 12:
            accounts_layout.addWidget(self._create_more_indicator())

        accounts_layout.addStretch()
        scroll_area.setWidget(accounts_widget)

        # Layout –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_layout = QVBoxLayout(container)
        container_layout.setContentsMargins(0, 0, 0, 0)
        container_layout.setSpacing(8)
        container_layout.addWidget(list_label)
        container_layout.addWidget(scroll_area)

        return container

    def _create_account_item(self, account: Dict, index: int) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if index >= 12:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 12
            return QWidget()

        item = QFrame()
        item.setObjectName("AccountItem")

        layout = QHBoxLayout(item)
        layout.setContentsMargins(12, 8, 12, 8)
        layout.setSpacing(10)

        # –ò–∫–æ–Ω–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        icon = QLabel("üì¶")
        icon.setObjectName("AccountIcon")
        icon.setFixedSize(20, 20)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        info_layout = QVBoxLayout()
        info_layout.setSpacing(2)

        # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        name_label = QLabel(account['name'])
        name_label.setObjectName("AccountName")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        details = []
        if account.get('full_name') and account['full_name'] != '?':
            details.append(account['full_name'])
        if account.get('phone') and account['phone'] != '?':
            details.append(account['phone'])

        if details:
            details_label = QLabel(" ‚Ä¢ ".join(details))
            details_label.setObjectName("AccountDetails")
            info_layout.addWidget(details_label)

        info_layout.addWidget(name_label)

        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
        size_label = self._get_files_size(account)
        size_label.setObjectName("AccountSize")

        layout.addWidget(icon)
        layout.addLayout(info_layout, 1)
        layout.addWidget(size_label)

        return item

    def _get_files_size(self, account: Dict) -> QLabel:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            session_size = Path(account['session_file']).stat().st_size if Path(account['session_file']).exists() else 0
            json_size = Path(account['json_file']).stat().st_size if Path(account['json_file']).exists() else 0
            total_size = session_size + json_size

            if total_size < 1024:
                size_text = f"{total_size} B"
            elif total_size < 1024 * 1024:
                size_text = f"{total_size / 1024:.1f} KB"
            else:
                size_text = f"{total_size / (1024 * 1024):.1f} MB"

            return QLabel(size_text)
        except:
            return QLabel("? KB")

    def _create_more_indicator(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–µ—â–µ N –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        remaining = len(self.accounts_info) - 12

        indicator = QLabel(f"... –∏ –µ—â–µ {remaining} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)")
        indicator.setObjectName("MoreIndicator")
        indicator.setAlignment(Qt.AlignCenter)
        indicator.setStyleSheet("""
            QLabel#MoreIndicator {
                color: rgba(255, 255, 255, 0.6);
                font-style: italic;
                font-size: 12px;
                padding: 8px;
            }
        """)

        return indicator

    def _create_buttons(self) -> QHBoxLayout:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        layout = QHBoxLayout()
        layout.setSpacing(12)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
        self.cancel_button.setObjectName("CancelButton")
        self.cancel_button.setFixedSize(120, 44)
        self.cancel_button.clicked.connect(self._on_cancel)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.confirm_button = QPushButton("–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤")
        self.confirm_button.setObjectName("ConfirmButton")
        self.confirm_button.setFixedSize(140, 44)
        self.confirm_button.clicked.connect(self._on_confirm)

        layout.addStretch()
        layout.addWidget(self.cancel_button)
        layout.addWidget(self.confirm_button)

        return layout

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ –¥–∏–∞–ª–æ–≥—É"""
        self.setStyleSheet("""
            /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
            QFrame#ContentContainer {
                background: rgba(20, 20, 20, 0.95);
                border: 2px solid rgba(255, 255, 255, 0.1);
                border-radius: 16px;
                backdrop-filter: blur(20px);
            }

            /* –ò–∫–æ–Ω–∫–∞ –¥–∏–∞–ª–æ–≥–∞ */
            QLabel#DialogIcon {
                font-size: 32px;
                background: rgba(59, 130, 246, 0.1);
                border-radius: 24px;
                border: 2px solid rgba(59, 130, 246, 0.3);
            }

            /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
            QLabel#DialogTitle {
                font-size: 20px;
                font-weight: 700;
                color: #FFFFFF;
                margin: 0;
            }

            /* –°–æ–æ–±—â–µ–Ω–∏–µ */
            QLabel#DialogMessage {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.8);
                line-height: 1.4;
                margin: 0;
            }

            /* –ü–æ–¥–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */
            QLabel#SettingsLabel {
                font-size: 14px;
                font-weight: 500;
                color: rgba(255, 255, 255, 0.9);
                margin: 0;
            }

            /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è */
            QLineEdit#ArchiveNameInput {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 8px 12px;
                font-size: 14px;
                color: rgba(255, 255, 255, 0.9);
                selection-background-color: rgba(59, 130, 246, 0.3);
            }

            QLineEdit#ArchiveNameInput:focus {
                border-color: #3B82F6;
                background: rgba(255, 255, 255, 0.08);
            }

            /* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ */
            QComboBox#FormatCombo {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 8px 12px;
                font-size: 14px;
                color: rgba(255, 255, 255, 0.9);
                selection-background-color: rgba(59, 130, 246, 0.3);
            }

            QComboBox#FormatCombo:hover {
                border-color: rgba(59, 130, 246, 0.5);
                background: rgba(255, 255, 255, 0.08);
            }

            QComboBox#FormatCombo::drop-down {
                border: none;
                padding-right: 8px;
            }

            QComboBox#FormatCombo QAbstractItemView {
                background: rgba(30, 30, 30, 0.95);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                selection-background-color: rgba(59, 130, 246, 0.3);
                color: rgba(255, 255, 255, 0.9);
                padding: 4px;
            }

            /* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–∞–º... */
            
            /* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã */
            QPushButton#CancelButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 14px;
                font-weight: 500;
            }

            QPushButton#CancelButton:hover {
                background: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.3);
                color: #FFFFFF;
            }

            /* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */
            QPushButton#ConfirmButton {
                background: #059669;
                border: 1px solid #059669;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
            }

            QPushButton#ConfirmButton:hover {
                background: #047857;
                border-color: #047857;
            }

            /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ */
            QFrame#AccountsContainer {
                background: rgba(255, 255, 255, 0.02);
                border: 1px solid rgba(255, 255, 255, 0.05);
                border-radius: 8px;
                padding: 8px;
            }

            /* –≠–ª–µ–º–µ–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ */
            QFrame#AccountItem {
                background: rgba(255, 255, 255, 0.03);
                border: 1px solid rgba(255, 255, 255, 0.05);
                border-radius: 6px;
                margin: 0;
            }

            QFrame#AccountItem:hover {
                background: rgba(255, 255, 255, 0.05);
                border-color: rgba(59, 130, 246, 0.3);
            }
        """)

    def _setup_animations(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏"""
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.opacity_effect = QGraphicsOpacityEffect()
        self.opacity_effect.setOpacity(0.0)
        self.setGraphicsEffect(self.opacity_effect)

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.opacity_animation = QPropertyAnimation(self.opacity_effect, b"opacity")

        # –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scale_animation = QPropertyAnimation(self, b"geometry")

        # –ì—Ä—É–ø–ø–∞ –∞–Ω–∏–º–∞—Ü–∏–π
        self.animation_group = QParallelAnimationGroup()
        self.animation_group.addAnimation(self.opacity_animation)
        self.animation_group.addAnimation(self.scale_animation)

    def _center_on_parent(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        if self.parent():
            parent_rect = self.parent().geometry()
            x = parent_rect.x() + (parent_rect.width() - self.width()) // 2
            y = parent_rect.y() + (parent_rect.height() - self.height()) // 2
            self.move(x, y)
        else:
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            screen = QApplication.primaryScreen().geometry()
            x = (screen.width() - self.width()) // 2
            y = (screen.height() - self.height()) // 2
            self.move(x, y)

    def _animate_in(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        final_rect = self.geometry()

        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–º–µ–Ω—å—à–µ –∏ –≤—ã—à–µ)
        start_rect = QRect(
            final_rect.x() + 30,
            final_rect.y() - 30,
            final_rect.width() - 60,
            final_rect.height() - 60
        )

        self.setGeometry(start_rect)

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.opacity_animation.setDuration(300)
        self.opacity_animation.setStartValue(0.0)
        self.opacity_animation.setEndValue(1.0)
        self.opacity_animation.setEasingCurve(QEasingCurve.OutCubic)

        # –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scale_animation.setDuration(300)
        self.scale_animation.setStartValue(start_rect)
        self.scale_animation.setEndValue(final_rect)
        self.scale_animation.setEasingCurve(QEasingCurve.OutBack)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animation_group.start()

    def _animate_out(self, callback=None):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è"""
        current_rect = self.geometry()

        # –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–º–µ–Ω—å—à–µ –∏ –≤—ã—à–µ)
        end_rect = QRect(
            current_rect.x() + 30,
            current_rect.y() - 30,
            current_rect.width() - 60,
            current_rect.height() - 60
        )

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.opacity_animation.setDuration(200)
        self.opacity_animation.setStartValue(1.0)
        self.opacity_animation.setEndValue(0.0)
        self.opacity_animation.setEasingCurve(QEasingCurve.InCubic)

        # –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scale_animation.setDuration(200)
        self.scale_animation.setStartValue(current_rect)
        self.scale_animation.setEndValue(end_rect)
        self.scale_animation.setEasingCurve(QEasingCurve.InBack)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º callback
        if callback:
            self.animation_group.finished.connect(callback)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animation_group.start()

    def _on_cancel(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        self.result_value = self.REJECTED
        self._animate_out(self.close)

    def _on_confirm(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.archive_name = self.name_input.text().strip()
        if not self.archive_name:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            self.name_input.setStyleSheet("""
                QLineEdit#ArchiveNameInput {
                    border: 2px solid #EF4444;
                    background: rgba(239, 68, 68, 0.1);
                }
            """)
            return

        self.archive_format = self.format_combo.currentData()
        self.result_value = self.ACCEPTED
        self._animate_out(self.close)

    def exec(self) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –º–æ–¥–∞–ª—å–Ω–æ"""
        super().exec()
        return self.result_value

    def get_archive_settings(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
        return {
            'name': self.archive_name,
            'format': self.archive_format
        }


def show_archive_accounts_dialog(parent, accounts_info: List[Dict], current_category: str) -> Optional[Dict]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏
    """
    dialog = ArchiveAccountsDialog(accounts_info, current_category, parent)
    result = dialog.exec()

    if result == ArchiveAccountsDialog.ACCEPTED:
        return dialog.get_archive_settings()
    else:
        return None