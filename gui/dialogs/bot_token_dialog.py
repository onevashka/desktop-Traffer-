# gui/dialogs/bot_token_dialog.py
"""
–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
"""

from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QTextEdit, QFrame, QSpacerItem, QSizePolicy
)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont
from loguru import logger
from pathlib import Path


class BotTokenDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""

    def __init__(self, parent, profile_name: str, current_token: str = ""):
        super().__init__(parent)
        self.profile_name = profile_name
        self.current_token = current_token
        self.token = ""

        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        self.setFixedSize(600, 400)
        self.setModal(True)

        # –°—Ç–∏–ª–∏
        self._setup_styles()

        # UI
        self._create_ui()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if current_token:
            self.token_input.setText(current_token)

    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–∏–∞–ª–æ–≥–∞"""
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(
                    x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 rgba(15, 23, 42, 0.98),
                    stop: 1 rgba(30, 41, 59, 0.95)
                );
                border: 2px solid rgba(255, 255, 255, 0.1);
                border-radius: 16px;
            }

            QLabel#DialogIcon {
                font-size: 32px;
                background: rgba(34, 197, 94, 0.1);
                border-radius: 24px;
                border: 2px solid rgba(34, 197, 94, 0.3);
            }

            QLabel#DialogTitle {
                font-size: 20px;
                font-weight: 700;
                color: #FFFFFF;
                margin: 0;
            }

            QLabel#DialogDescription {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.7);
                margin-top: 5px;
                line-height: 1.4;
            }

            QLabel#StepLabel {
                font-size: 13px;
                color: rgba(255, 255, 255, 0.8);
                font-weight: 500;
                margin: 8px 0 4px 0;
            }

            QLineEdit {
                background: rgba(255, 255, 255, 0.08);
                border: 2px solid rgba(255, 255, 255, 0.15);
                border-radius: 8px;
                padding: 12px 16px;
                color: #FFFFFF;
                font-size: 14px;
                font-family: 'Cascadia Code', 'Consolas', monospace;
            }

            QLineEdit:focus {
                border-color: rgba(34, 197, 94, 0.6);
                background: rgba(255, 255, 255, 0.12);
            }

            QLineEdit::placeholder {
                color: rgba(255, 255, 255, 0.4);
            }

            QTextEdit {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 12px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 13px;
                line-height: 1.5;
            }

            QPushButton#CancelButton {
                background: rgba(255, 255, 255, 0.06);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.9);
                font-size: 14px;
                font-weight: 500;
                padding: 12px 24px;
            }

            QPushButton#CancelButton:hover {
                background: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.3);
                color: #FFFFFF;
            }

            QPushButton#SaveButton {
                background: #22C55E;
                border: 1px solid #22C55E;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#SaveButton:hover {
                background: #16A34A;
                border-color: #16A34A;
            }

            QPushButton#SaveButton:disabled {
                background: rgba(34, 197, 94, 0.3);
                border-color: rgba(34, 197, 94, 0.3);
                color: rgba(255, 255, 255, 0.5);
            }
        """)

    def _create_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç UI –¥–∏–∞–ª–æ–≥–∞"""
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setContentsMargins(24, 24, 24, 24)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(layout)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        self._create_instructions(layout)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
        self._create_token_input(layout)

        # –ö–Ω–æ–ø–∫–∏
        self._create_buttons(layout)

    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞"""
        header_layout = QHBoxLayout()
        header_layout.setSpacing(15)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel("ü§ñ")
        icon_label.setObjectName("DialogIcon")
        icon_label.setFixedSize(48, 48)
        icon_label.setAlignment(Qt.AlignCenter)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        text_layout = QVBoxLayout()

        title_label = QLabel(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")
        title_label.setObjectName("DialogTitle")

        desc_label = QLabel(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏ –≤ —á–∞—Ç–∞—Ö.\n"
            "–¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è."
        )
        desc_label.setObjectName("DialogDescription")
        desc_label.setWordWrap(True)

        text_layout.addWidget(title_label)
        text_layout.addWidget(desc_label)

        header_layout.addWidget(icon_label)
        header_layout.addLayout(text_layout, 1)

        layout.addLayout(header_layout)

    def _create_instructions(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞"""
        instructions_text = """
üîß –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:

1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "MyInviterBot")
4. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ username –¥–ª—è –±–æ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "_bot")
5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ

–¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
        """.strip()

        instructions_widget = QTextEdit()
        instructions_widget.setPlainText(instructions_text)
        instructions_widget.setReadOnly(True)
        instructions_widget.setMaximumHeight(160)

        layout.addWidget(instructions_widget)

    def _create_token_input(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—è
        token_label = QLabel("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:")
        token_label.setObjectName("StepLabel")
        layout.addWidget(token_label)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.token_input = QLineEdit()
        self.token_input.setPlaceholderText("1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        self.token_input.textChanged.connect(self._validate_token)
        layout.addWidget(self.token_input)

        # –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validation_label = QLabel("")
        self.validation_label.setObjectName("DialogDescription")
        layout.addWidget(self.validation_label)

    def _create_buttons(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        layout.addSpacerItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(12)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
        cancel_btn.setObjectName("CancelButton")
        cancel_btn.clicked.connect(self.reject)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω")
        self.save_btn.setObjectName("SaveButton")
        self.save_btn.clicked.connect(self._save_token)
        self.save_btn.setEnabled(False)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

        buttons_layout.addStretch()
        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(self.save_btn)

        layout.addLayout(buttons_layout)

    def _validate_token(self):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
        token = self.token_input.text().strip()

        if not token:
            self.validation_label.setText("")
            self.save_btn.setEnabled(False)
            return

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if self._is_valid_token_format(token):
            self.validation_label.setText("‚úÖ –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            self.validation_label.setStyleSheet("color: #22C55E;")
            self.save_btn.setEnabled(True)
        else:
            self.validation_label.setText("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
            self.validation_label.setStyleSheet("color: #EF4444;")
            self.save_btn.setEnabled(False)

    def _is_valid_token_format(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞
        parts = token.split(':')
        if len(parts) != 2:
            return False

        bot_id, bot_hash = parts

        # ID –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
        if not bot_id.isdigit():
            return False

        # –•–µ—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–º –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º
        if len(bot_hash) < 20 or not bot_hash.replace('_', '').replace('-', '').isalnum():
            return False

        return True

    def _save_token(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            token = self.token_input.text().strip()

            if not token or not self._is_valid_token_format(token):
                from gui.notifications import show_error
                show_error(
                    "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_folder = self._get_profile_folder()
            if not profile_folder:
                from gui.notifications import show_error
                show_error(
                    "–û—à–∏–±–∫–∞",
                    f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
            token_file = profile_folder / "bot_token.txt"
            token_file.write_text(token, encoding='utf-8')

            self.token = token
            logger.info(f"üíæ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")

            from gui.notifications import show_success
            show_success(
                "–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                f"ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ {self.profile_name}"
            )

            self.accept()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            from gui.notifications import show_error
            show_error(
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}"
            )

    def _get_profile_folder(self) -> Path:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            from src.modules.impl.inviter.profile_manager import InviterProfileManager

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏
            profile_manager = InviterProfileManager()
            profiles = profile_manager.get_all_profiles()

            for profile in profiles:
                if profile.get('name') == self.profile_name:
                    return Path(profile['folder_path'])

            logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {self.profile_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None

    def get_token(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
        return self.token


def show_bot_token_dialog(parent, profile_name: str, current_token: str = "") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        current_token: –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)

    Returns:
        str: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    dialog = BotTokenDialog(parent, profile_name, current_token)

    if dialog.exec() == QDialog.Accepted:
        return dialog.get_token()

    return ""


def load_bot_token_from_profile(profile_name: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è
    –£–°–¢–ê–†–ï–õ–ê: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ load_bot_token() –∏–∑ paths.py

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        str: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ paths.py
        from paths import load_bot_token
        return load_bot_token(profile_name)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return ""