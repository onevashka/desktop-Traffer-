# gui/dialogs/bot_token_dialog.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï–ú

from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTextEdit, QLineEdit, QFrame, QSpacerItem, QSizePolicy, QApplication, QWidget
)
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QScreen
from loguru import logger
from pathlib import Path
from typing import List, Optional


class BotTokenDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""

    def __init__(self, parent=None, profile_name: str = "", current_token: str = ""):
        super().__init__(parent)
        self.profile_name = profile_name
        self.current_token = current_token
        self.bot_token = ""

        self.setWindowTitle(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ - {profile_name}")
        self.setModal(True)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFixedSize(600, 400)

        self._init_ui()
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        QTimer.singleShot(0, self._center_on_parent)

    def _center_on_parent(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞–¥ top-level –æ–∫–Ω–æ–º —Ä–æ–¥–∏—Ç–µ–ª—è, –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞."""
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –±–µ—Ä—ë–º –µ–≥–æ top-level –æ–∫–Ω–æ (—á—Ç–æ–±—ã geometry –±—ã–ª –≤–∞–ª–∏–¥–Ω—ã–º)
        parent = self.parent()
        if parent:
            parent = parent.window()
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        if isinstance(parent, QWidget):
            target_rect = parent.frameGeometry()
        else:
            target_rect = QApplication.primaryScreen().geometry()
        # –¶–µ–Ω—Ç—Ä —ç—Ç–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        center_point = target_rect.center()
        # –°–¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π-–≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –¥–∏–∞–ª–æ–≥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ —Ü–µ–Ω—Ç—Ä —Å–æ–≤–ø–∞–ª —Å —Ü–µ–Ω—Ç—Ä–æ–º target
        self.move(center_point.x() - self.width() // 2,
                  center_point.y() - self.height() // 2)

    def showEvent(self, event):
        super().showEvent(event)
        self._center_on_parent()

    def _init_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_container = QFrame()
        self.content_container.setObjectName("DialogContainer")
        content_layout = QVBoxLayout(self.content_container)
        content_layout.setContentsMargins(30, 30, 30, 30)
        content_layout.setSpacing(20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        self._create_header(content_layout)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        self._create_instructions(content_layout)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
        self._create_token_input(content_layout)

        # –ö–Ω–æ–ø–∫–∏
        self._create_buttons(content_layout)

        main_layout.addWidget(self.content_container)
        self._apply_styles()

    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞"""
        header_layout = QHBoxLayout()
        header_layout.setSpacing(15)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel("ü§ñ")
        icon_label.setObjectName("DialogIcon")
        icon_label.setFixedSize(48, 48)
        icon_label.setAlignment(Qt.AlignCenter)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        text_layout = QVBoxLayout()

        title_label = QLabel(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {self.profile_name}")
        title_label.setObjectName("DialogTitle")

        desc_label = QLabel("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏")
        desc_label.setObjectName("DialogDescription")
        desc_label.setWordWrap(True)

        text_layout.addWidget(title_label)
        text_layout.addWidget(desc_label)

        header_layout.addWidget(icon_label)
        header_layout.addLayout(text_layout, 1)

        layout.addLayout(header_layout)

    def _create_instructions(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
        instructions_text = """
üîß –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:

1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –∏ username –¥–ª—è –±–æ—Ç–∞
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ

üí° –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
        """.strip()

        instructions_widget = QTextEdit()
        instructions_widget.setPlainText(instructions_text)
        instructions_widget.setReadOnly(True)
        instructions_widget.setMaximumHeight(120)
        instructions_widget.setObjectName("InstructionsText")

        layout.addWidget(instructions_widget)

    def _create_token_input(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—è
        token_label = QLabel("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:")
        token_label.setObjectName("StepLabel")
        layout.addWidget(token_label)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.token_input = QLineEdit()
        self.token_input.setObjectName("TokenInput")
        self.token_input.setPlaceholderText("1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        self.token_input.setText(self.current_token)
        self.token_input.textChanged.connect(self._on_token_changed)

        layout.addWidget(self.token_input)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        self.status_label.setObjectName("DialogDescription")
        layout.addWidget(self.status_label)

    def _create_buttons(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        layout.addSpacerItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(12)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.setObjectName("ClearButton")
        clear_btn.clicked.connect(self._clear_token)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
        cancel_btn.setObjectName("CancelButton")
        cancel_btn.clicked.connect(self.reject)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω")
        self.save_btn.setObjectName("SaveButton")
        self.save_btn.clicked.connect(self._save_token)

        buttons_layout.addWidget(clear_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(self.save_btn)

        layout.addLayout(buttons_layout)

    def _on_token_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        token = self.token_input.text().strip()

        if not token:
            self.status_label.setText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        elif self._is_valid_token(token):
            self.status_label.setText("‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        else:
            self.status_label.setText("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")

    def _is_valid_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        if not token:
            return False

        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —á–∏—Å–ª–∞:–±—É–∫–≤—ã
        parts = token.split(':')
        return len(parts) == 2 and parts[0].isdigit() and len(parts[1]) > 10

    def _clear_token(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞"""
        self.token_input.clear()

    def _save_token(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        token = self.token_input.text().strip()

        if not token:
            from gui.notifications import show_warning
            show_warning(
                "–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω",
                "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
            )
            return

        if not self._is_valid_token(token):
            from gui.notifications import show_warning
            show_warning(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"
            )
            return

        self.bot_token = token
        self.accept()

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏"""
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #1E1E2E, stop:1 #161622);
            }

            QFrame#DialogContainer {
                background: rgba(30, 30, 46, 0.95);
                border-radius: 16px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            QLabel#DialogIcon {
                font-size: 32px;
                background: rgba(245, 158, 11, 0.1);
                border-radius: 24px;
                border: 2px solid rgba(245, 158, 11, 0.2);
            }

            QLabel#DialogTitle {
                font-size: 20px;
                font-weight: 600;
                color: #FFFFFF;
                margin-bottom: 8px;
            }

            QLabel#DialogDescription {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.7);
                line-height: 1.4;
            }

            QLabel#StepLabel {
                font-size: 14px;
                font-weight: 600;
                color: rgba(255, 255, 255, 0.9);
                margin: 8px 0 4px 0;
            }

            QTextEdit#InstructionsText {
                background: rgba(17, 24, 39, 0.6);
                border: 1px solid rgba(245, 158, 11, 0.2);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 13px;
                padding: 12px;
            }

            QLineEdit#TokenInput {
                background: #111827;
                border: 1px solid #374151;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 13px;
                font-family: 'Consolas', 'Monaco', monospace;
                padding: 12px;
            }

            QLineEdit#TokenInput:focus {
                border-color: #F59E0B;
            }

            QPushButton#ClearButton {
                background: rgba(239, 68, 68, 0.2);
                border: 1px solid rgba(239, 68, 68, 0.5);
                border-radius: 8px;
                color: #EF4444;
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#ClearButton:hover {
                background: rgba(239, 68, 68, 0.3);
                border-color: #EF4444;
            }

            QPushButton#CancelButton {
                background: rgba(156, 163, 175, 0.2);
                border: 1px solid rgba(156, 163, 175, 0.5);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#CancelButton:hover {
                background: rgba(156, 163, 175, 0.3);
                color: #FFFFFF;
            }

            QPushButton#SaveButton {
                background: #F59E0B;
                border: 1px solid #F59E0B;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#SaveButton:hover {
                background: #D97706;
                border-color: #D97706;
            }
        """)

    def get_token(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
        return self.bot_token


class BotTokensDialog(QDialog):
    """–ù–û–í–´–ô: –î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ –±–æ—Ç–æ–≤ - –≤ —Å—Ç–∏–ª–µ –¥–∏–∞–ª–æ–≥–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, parent=None, profile_name: str = ""):
        super().__init__(parent)
        self.profile_name = profile_name
        self.current_tokens = []

        self.setWindowTitle(f"–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ - {profile_name}")
        self.setModal(True)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFixedSize(1400, 1200)  # –†–∞–∑–º–µ—Ä –∫–∞–∫ —É –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        self._load_current_tokens()
        self._init_ui()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        QTimer.singleShot(0, self._center_on_parent)

    def _center_on_parent(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞–¥ top-level –æ–∫–Ω–æ–º —Ä–æ–¥–∏—Ç–µ–ª—è, –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞."""
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –±–µ—Ä—ë–º –µ–≥–æ top-level –æ–∫–Ω–æ (—á—Ç–æ–±—ã geometry –±—ã–ª –≤–∞–ª–∏–¥–Ω—ã–º)
        parent = self.parent()
        if parent:
            parent = parent.window()
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        if isinstance(parent, QWidget):
            target_rect = parent.frameGeometry()
        else:
            target_rect = QApplication.primaryScreen().geometry()
        # –¶–µ–Ω—Ç—Ä —ç—Ç–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        center_point = target_rect.center()
        # –°–¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π-–≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –¥–∏–∞–ª–æ–≥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ —Ü–µ–Ω—Ç—Ä —Å–æ–≤–ø–∞–ª —Å —Ü–µ–Ω—Ç—Ä–æ–º target
        self.move(center_point.x() - self.width() // 2,
                  center_point.y() - self.height() // 2)

    def showEvent(self, event):
        super().showEvent(event)
        self._center_on_parent()

    def _load_current_tokens(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            from paths import get_profile_folder
            profile_folder = get_profile_folder(self.profile_name)
            tokens_file = profile_folder / "bot_tokens.txt"

            if tokens_file.exists():
                content = tokens_file.read_text(encoding='utf-8')
                self.current_tokens = [line.strip() for line in content.split('\n') if line.strip()]
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(self.current_tokens)}")
            else:
                self.current_tokens = []
                logger.info("üìÑ –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            self.current_tokens = []

    def _init_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∏–∞–ª–æ–≥–∞ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ —Å—Ç–∏–ª–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_container = QFrame()
        self.content_container.setObjectName("DialogContainer")
        content_layout = QVBoxLayout(self.content_container)
        content_layout.setContentsMargins(30, 30, 30, 30)
        content_layout.setSpacing(20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        header_layout = QHBoxLayout()
        header_layout.setSpacing(15)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel("ü§ñ")
        icon_label.setObjectName("DialogIcon")
        icon_label.setFixedSize(48, 48)
        icon_label.setAlignment(Qt.AlignCenter)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(f"–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ - {self.profile_name}")
        title_label.setObjectName("DialogTitle")
        title_label.setWordWrap(True)

        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label, 1)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc = QLabel(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ Telegram –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
            f"–§–∞–π–ª: {self.profile_name}/bot_tokens.txt | –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(self.current_tokens)}"
        )
        desc.setObjectName("DialogDescription")
        desc.setWordWrap(True)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instructions_text = """
üîß –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤:

1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º–µ–Ω–∞ –∏ username –¥–ª—è –±–æ—Ç–æ–≤
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)

üí° –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
        """.strip()

        instructions_widget = QTextEdit()
        instructions_widget.setPlainText(instructions_text)
        instructions_widget.setReadOnly(True)
        instructions_widget.setMaximumHeight(140)
        instructions_widget.setObjectName("InstructionsText")

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        self.tokens_text = QTextEdit()
        self.tokens_text.setObjectName("TokensTextEdit")
        self.tokens_text.setPlaceholderText(
            "1234567890:ABCdefGHIjklMNOpqrsTUVwxyz\n"
            "5678901234:DEFghiJKLmnoPQRstuvWXYZ\n"
            "9012345678:GHIjklMNOpqrsTUVwxyzABC\n"
            "..."
        )
        self.tokens_text.setPlainText('\n'.join(self.current_tokens))
        self.tokens_text.textChanged.connect(self._on_tokens_changed)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info_label = QLabel(f"üí° –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–ª–µ: {len(self.current_tokens)}")
        self.info_label.setObjectName("InfoLabel")

        # –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.status_label = QLabel(f"–¢–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–ª–µ: {len(self.current_tokens)}")
        self.status_label.setObjectName("DialogDescription")

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = self._create_buttons()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        content_layout.addLayout(header_layout)
        content_layout.addWidget(desc)
        content_layout.addWidget(instructions_widget)
        content_layout.addWidget(QLabel("–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):"))
        content_layout.addWidget(self.tokens_text)
        content_layout.addWidget(self.info_label)
        content_layout.addWidget(self.status_label)
        content_layout.addLayout(buttons_layout)

        main_layout.addWidget(self.content_container)
        self._apply_styles()

    def _create_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(12)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        clear_btn.setObjectName("ClearButton")
        clear_btn.clicked.connect(self._clear_tokens)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
        cancel_btn.setObjectName("CancelButton")
        cancel_btn.clicked.connect(self.reject)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
        self.save_btn.setObjectName("SaveButton")
        self.save_btn.clicked.connect(self._save_tokens)

        buttons_layout.addWidget(clear_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(self.save_btn)

        return buttons_layout

    def _on_tokens_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        text = self.tokens_text.toPlainText()
        tokens = [line.strip() for line in text.split('\n') if line.strip()]
        valid_tokens = [token for token in tokens if self._is_valid_token(token)]

        self.status_label.setText(
            f"–¢–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–ª–µ: {len(tokens)} | –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_tokens)}"
        )

    def _is_valid_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        if not token:
            return False

        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —á–∏—Å–ª–∞:–±—É–∫–≤—ã
        parts = token.split(':')
        return len(parts) == 2 and parts[0].isdigit() and len(parts[1]) > 10

    def _clear_tokens(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–æ–≤"""
        self.tokens_text.clear()

    def _save_tokens(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª"""
        try:
            text = self.tokens_text.toPlainText()
            tokens = [line.strip() for line in text.split('\n') if line.strip()]

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            valid_tokens = []
            invalid_count = 0

            for token in tokens:
                if self._is_valid_token(token):
                    valid_tokens.append(token)
                else:
                    invalid_count += 1

            if not valid_tokens:
                from gui.notifications import show_warning
                show_warning(
                    "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤",
                    "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            from paths import get_profile_folder
            profile_folder = get_profile_folder(self.profile_name)
            profile_folder.mkdir(parents=True, exist_ok=True)

            tokens_file = profile_folder / "bot_tokens.txt"
            tokens_file.write_text('\n'.join(valid_tokens), encoding='utf-8')

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(valid_tokens)}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            from gui.notifications import show_success
            message = f"ü§ñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(valid_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤"
            if invalid_count > 0:
                message += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {invalid_count}"

            show_success("–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message)
            self.accept()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            from gui.notifications import show_error
            show_error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}")

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ –¥–∏–∞–ª–æ–≥–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #1E1E2E, stop:1 #161622);
            }

            QFrame#DialogContainer {
                background: rgba(30, 30, 46, 0.95);
                border-radius: 16px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            QLabel#DialogIcon {
                font-size: 32px;
                background: rgba(59, 130, 246, 0.1);
                border-radius: 24px;
                border: 2px solid rgba(59, 130, 246, 0.2);
            }

            QLabel#DialogTitle {
                font-size: 20px;
                font-weight: 600;
                color: #FFFFFF;
                margin-bottom: 8px;
            }

            QLabel#DialogDescription {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.7);
                line-height: 1.4;
                margin-bottom: 16px;
            }

            QLabel#InfoLabel {
                font-size: 13px;
                color: rgba(255, 255, 255, 0.6);
                margin: 8px 0;
            }

            QTextEdit#InstructionsText {
                background: rgba(17, 24, 39, 0.6);
                border: 1px solid rgba(59, 130, 246, 0.2);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 13px;
                padding: 12px;
            }

            QTextEdit#TokensTextEdit {
                background: rgba(17, 24, 39, 0.6);
                border: 1px solid rgba(59, 130, 246, 0.2);
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 13px;
                font-family: 'Consolas', 'Monaco', monospace;
                padding: 12px;
                min-height: 300px;
            }

            QTextEdit#TokensTextEdit:focus {
                border-color: #2563EB;
                background: rgba(17, 24, 39, 0.8);
            }

            QPushButton#ClearButton {
                background: rgba(239, 68, 68, 0.2);
                border: 1px solid rgba(239, 68, 68, 0.5);
                border-radius: 8px;
                color: #EF4444;
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#ClearButton:hover {
                background: rgba(239, 68, 68, 0.3);
                border-color: #EF4444;
            }

            QPushButton#CancelButton {
                background: rgba(156, 163, 175, 0.2);
                border: 1px solid rgba(156, 163, 175, 0.5);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#CancelButton:hover {
                background: rgba(156, 163, 175, 0.3);
                color: #FFFFFF;
            }

            QPushButton#SaveButton {
                background: #22C55E;
                border: 1px solid #22C55E;
                border-radius: 8px;
                color: #FFFFFF;
                font-size: 14px;
                font-weight: 600;
                padding: 12px 24px;
            }

            QPushButton#SaveButton:hover {
                background: #16A34A;
                border-color: #16A34A;
            }
        """)

    def get_tokens(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
        text = self.tokens_text.toPlainText()
        tokens = [line.strip() for line in text.split('\n') if line.strip()]
        return [token for token in tokens if self._is_valid_token(token)]


def show_bot_token_dialog(parent, profile_name: str, current_token: str = "") -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        current_token: –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)

    Returns:
        str: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    dialog = BotTokenDialog(parent, profile_name, current_token)

    if dialog.exec() == QDialog.Accepted:
        return dialog.get_token()

    return ""


def show_bot_tokens_dialog(parent, profile_name: str) -> List[str]:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ –±–æ—Ç–æ–≤

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    dialog = BotTokensDialog(parent, profile_name)

    if dialog.exec() == QDialog.Accepted:
        return dialog.get_tokens()

    return []


def load_bot_token_from_profile(profile_name: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        str: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        from paths import get_profile_folder
        profile_folder = get_profile_folder(profile_name)

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config.json
        config_file = profile_folder / "config.json"
        if config_file.exists():
            import json
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                bot_account = config.get('bot_account', {})
                if isinstance(bot_account, dict):
                    return bot_account.get('token', '')

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ bot_token.txt (legacy)
        token_file = profile_folder / "bot_token.txt"
        if token_file.exists():
            token = token_file.read_text(encoding='utf-8').strip()
            return token

        return ""

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {profile_name}: {e}")
        return ""