# debug_sales.py - –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –§–ê–ô–õ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

from pathlib import Path
from paths import *
import asyncio


def check_sales_folders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""

    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂...")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ –∏–∑ manager.py
    sales_folders = {
        "registration": WORK_ACCOUNTS_SALE_FOLDER,
        "ready_tdata": TDATA_FOLDER,
        "ready_sessions": SESSIONS_JSON_FOLDER,
        "middle": MIDDLE_ACCOUNTS_FOLDER,
        "dead": DEAD_SALES_FOLDER,
        "frozen": FROZEN_SALES_FOLDER,
        "invalid": INVALID_SALES_FORMAT_FOLDER
    }

    print("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ –ø—Ä–æ–¥–∞–∂:")
    for status, folder_path in sales_folders.items():
        exists = "‚úÖ" if folder_path.exists() else "‚ùå"
        print(f"  {exists} {status}: {folder_path}")

        if folder_path.exists():
            # –ò—â–µ–º .session —Ñ–∞–π–ª—ã
            session_files = list(folder_path.glob("*.session"))
            json_files = list(folder_path.glob("*.json"))

            print(f"    üìÑ .session —Ñ–∞–π–ª–æ–≤: {len(session_files)}")
            print(f"    üìÑ .json —Ñ–∞–π–ª–æ–≤: {len(json_files)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            if status == "registration" and session_files:
                print(f"    üìã –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:")
                for session_file in session_files:
                    json_file = session_file.with_suffix(".json")
                    has_json = "‚úÖ" if json_file.exists() else "‚ùå"
                    print(f"      {has_json} {session_file.name} -> {json_file.name}")

        print()

    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ paths.py
    print("üìÇ –ü—É—Ç–∏ –∏–∑ paths.py:")
    print(f"  BASE_PATH: {BASE_PATH}")
    print(f"  WORK_SALES_FOLDER: {WORK_SALES_FOLDER}")
    print(f"  WORK_ACCOUNTS_SALE_FOLDER: {WORK_ACCOUNTS_SALE_FOLDER}")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    print("üóÇÔ∏è –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ '–ü—Ä–æ–¥–∞–∂–∏':")
    sales_base = BASE_PATH / "–ü—Ä–æ–¥–∞–∂–∏"
    if sales_base.exists():
        for item in sales_base.iterdir():
            if item.is_dir():
                session_count = len(list(item.glob("*.session")))
                print(f"  üìÅ {item.name}: {session_count} .session —Ñ–∞–π–ª–æ–≤")
    else:
        print("  ‚ùå –ü–∞–ø–∫–∞ '–ü—Ä–æ–¥–∞–∂–∏' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


async def test_manager_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ AccountManager"""

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ AccountManager...")

    try:
        from src.accounts.manager import AccountManager

        manager = AccountManager()

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        print("\nüìã –ü–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä:")

        print("  üöÄ –¢—Ä–∞—Ñ–∏–∫:")
        for status, folder_path in manager.traffic_folders.items():
            exists = "‚úÖ" if folder_path.exists() else "‚ùå"
            print(f"    {exists} {status}: {folder_path}")

        print("  üí∞ –ü—Ä–æ–¥–∞–∂–∏:")
        for status, folder_path in manager.sales_folders.items():
            exists = "‚úÖ" if folder_path.exists() else "‚ùå"
            session_count = len(list(folder_path.glob("*.session"))) if folder_path.exists() else 0
            print(f"    {exists} {status}: {folder_path} ({session_count} —Ñ–∞–π–ª–æ–≤)")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        await manager.scan_all_folders()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")

        traffic_accounts = [name for name, data in manager.accounts.items() if data.category == "traffic"]
        sales_accounts = [name for name, data in manager.accounts.items() if data.category == "sales"]

        print(f"  üöÄ –¢—Ä–∞—Ñ–∏–∫: {len(traffic_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        if traffic_accounts:
            for name in traffic_accounts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    - {name}")

        print(f"  üí∞ –ü—Ä–æ–¥–∞–∂–∏: {len(sales_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        if sales_accounts:
            for name in sales_accounts:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                account_data = manager.accounts[name]
                print(f"    - {name} (—Å—Ç–∞—Ç—É—Å: {account_data.status})")
        else:
            print(f"    ‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–¥–∞–∂ –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´!")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            reg_folder = manager.sales_folders["registration"]
            print(f"  –ü–∞–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_folder}")
            print(f"  –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {reg_folder.exists()}")

            if reg_folder.exists():
                all_files = list(reg_folder.iterdir())
                session_files = list(reg_folder.glob("*.session"))
                json_files = list(reg_folder.glob("*.json"))

                print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
                print(f"  .session —Ñ–∞–π–ª–æ–≤: {len(session_files)}")
                print(f"  .json —Ñ–∞–π–ª–æ–≤: {len(json_files)}")

                if session_files:
                    print(f"  –§–∞–π–ª—ã .session:")
                    for f in session_files:
                        print(f"    - {f.name}")

                if json_files:
                    print(f"  –§–∞–π–ª—ã .json:")
                    for f in json_files:
                        print(f"    - {f.name}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    check_sales_folders()
    await test_manager_loading()


if __name__ == "__main__":
    asyncio.run(main())