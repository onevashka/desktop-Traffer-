# ============================================================================
# –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –í–°–ï–• –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –ò –û–®–ò–ë–û–ö + –°–ö–†–´–¢–ò–ï –ö–û–ù–°–û–õ–ò
# ============================================================================

import warnings
import logging
import asyncio
import sys
import os

# –°–ö–†–´–í–ê–ï–ú –ö–û–ù–°–û–õ–¨–ù–û–ï –û–ö–ù–û –í WINDOWS
'''if os.name == 'nt':  # Windows
    import ctypes
    from ctypes import wintypes

    # –ü–æ–ª—É—á–∞–µ–º handle –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    kernel32 = ctypes.windll.kernel32
    user32 = ctypes.windll.user32

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ShowWindow
    SW_HIDE = 0
    SW_SHOW = 5

    # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
    console_window = kernel32.GetConsoleWindow()
    if console_window:
        user32.ShowWindow(console_window, SW_HIDE)'''

# 1. –û–¢–ö–õ–Æ–ß–ê–ï–ú –í–°–ï WARNINGS
warnings.filterwarnings("ignore")
warnings.simplefilter("ignore")
os.environ['PYTHONWARNINGS'] = 'ignore'

# 2. –û–¢–ö–õ–Æ–ß–ê–ï–ú ASYNCIO –ü–û–õ–ù–û–°–¢–¨–Æ
logging.getLogger('asyncio').setLevel(logging.CRITICAL + 100)
logging.getLogger('asyncio').disabled = True
logging.getLogger('asyncio').propagate = False

# 3. –û–¢–ö–õ–Æ–ß–ê–ï–ú TELETHON –ü–û–õ–ù–û–°–¢–¨–Æ
telethon_loggers = [
    'telethon', 'telethon.network', 'telethon.client', 'telethon.network.mtprotosender',
    'telethon.network.connection', 'telethon.network.connection.connection',
    'telethon.client.updates', 'telethon.helpers'
]

for logger_name in telethon_loggers:
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.CRITICAL + 100)
    logger.disabled = True
    logger.propagate = False


# 4. –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú sys.stderr –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò
class ErrorFilter:
    def __init__(self, original_stderr):
        self.original_stderr = original_stderr
        self.blocked_keywords = [
            'Exception ignored in:',
            'RuntimeError: Event loop is closed',
            'RuntimeError: coroutine ignored GeneratorExit',
            'Queue.get',
            'MTProtoSender',
            'Connection._send_loop',
            '_recv_loop',
            '_start_reconnect',
            'create_task',
            '_check_closed',
            'getter.cancel()',
            'GeneratorExit',
            'Task was destroyed but it is pending',
            'Task exception was never retrieved'
        ]

    def write(self, message):
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –≤ stderr (–∫–æ–Ω—Å–æ–ª—å)
        # –û–Ω–∏ —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∏–≥–¥–µ
        pass

    def flush(self):
        pass

    def __getattr__(self, name):
        return getattr(self.original_stderr, name)


# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ stderr (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
#sys.stderr = ErrorFilter(sys.stderr)


# –¢–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º stdout –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–æ–±—ã—á–Ω—ã–π print)
class StdoutFilter:
    def __init__(self, original_stdout):
        self.original_stdout = original_stdout

    def write(self, message):
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ print() –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        pass

    def flush(self):
        pass

    def __getattr__(self, name):
        return getattr(self.original_stdout, name)


# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—ã—á–Ω—ã–µ print()
#sys.stdout = StdoutFilter(sys.stdout)


# 5. –ü–û–õ–ù–û–°–¢–¨–Æ –ú–û–õ–ß–ê–õ–ò–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô
def completely_silent_exception_handler(loop, context):
    pass


# 6. –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú EXCEPTHOOK
original_excepthook = sys.excepthook


def filtered_excepthook(exc_type, exc_value, exc_traceback):
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
    pass


#sys.excepthook = filtered_excepthook


# 7. –ú–û–ù–ö–ò-–ü–ê–¢–ß –î–õ–Ø ASYNCIO
def patch_asyncio():
    """–ü–∞—Ç—á–∏–º asyncio –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""

    # –ü–∞—Ç—á–∏–º BaseEventLoop._check_closed
    original_check_closed = asyncio.BaseEventLoop._check_closed

    def silent_check_closed(self):
        try:
            return original_check_closed(self)
        except RuntimeError as e:
            if 'Event loop is closed' in str(e):
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            raise

    asyncio.BaseEventLoop._check_closed = silent_check_closed

    # –ü–∞—Ç—á–∏–º call_soon
    original_call_soon = asyncio.BaseEventLoop.call_soon

    def silent_call_soon(self, callback, *args, **kwargs):
        try:
            return original_call_soon(self, callback, *args, **kwargs)
        except RuntimeError as e:
            if 'Event loop is closed' in str(e):
                return None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            raise

    asyncio.BaseEventLoop.call_soon = silent_call_soon

    # –ü–∞—Ç—á–∏–º create_task
    original_create_task = asyncio.BaseEventLoop.create_task

    def silent_create_task(self, coro, **kwargs):
        try:
            return original_create_task(self, coro, **kwargs)
        except RuntimeError as e:
            if 'Event loop is closed' in str(e):
                return None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            raise

    asyncio.BaseEventLoop.create_task = silent_create_task


# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
patch_asyncio()


# 8. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• LOOP
def setup_silent_handlers():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–ª—á–∞–ª–∏–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö loop"""
    try:
        # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ loop
        loop = asyncio.get_event_loop()
        loop.set_exception_handler(completely_silent_exception_handler)
    except:
        pass

    try:
        # –î–ª—è running loop –µ—Å–ª–∏ –µ—Å—Ç—å
        loop = asyncio.get_running_loop()
        loop.set_exception_handler(completely_silent_exception_handler)
    except:
        pass


setup_silent_handlers()

# ============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–û–î –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ============================================================================

import os

os.environ['QT_LOGGING_RULES'] = '*=false'
os.environ['QT_FATAL_WARNINGS'] = '0'
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = ''

from pathlib import Path
from PySide6.QtWidgets import QApplication
from PySide6.QtCore import qInstallMessageHandler
from qasync import QEventLoop

from paths import ensure_folder_structure
#from gui.log_console import LogConsole
from gui.main_window import MainWindow
from src.accounts.manager import init_account_manager
from src.proxies.manager import get_proxy_manager
from loguru import logger

#log_console = None
main_win = None


def qt_message_handler(mode, context, message):
    """–§–∏–ª—å—Ç—Ä—É–µ–º Qt —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –Ω–µ –∏–¥—É—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ Qt —Å–æ–æ–±—â–µ–Ω–∏–π
    pass


async def async_main():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    global log_console, main_win

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ loop
    loop = asyncio.get_running_loop()
    loop.set_exception_handler(completely_silent_exception_handler)

    # 1. –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–æ–≤
    #log_console = LogConsole()
    #log_console.show()
    #logger.info("üìã –ö–æ–Ω—Å–æ–ª—å –ª–æ–≥–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞")

    await asyncio.sleep(0.5)

    # 2. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    ensure_folder_structure()
    logger.info("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞")

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AccountManager
    try:
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccountManager...")
        await init_account_manager()
        logger.info("‚úÖ AccountManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AccountManager: {e}")

    try:
        logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProxyManager...")
        proxy_manager = get_proxy_manager()
        total_proxies = proxy_manager.get_total_proxies()

        if total_proxies > 0:
            logger.info(f"‚úÖ ProxyManager –≥–æ—Ç–æ–≤. –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª–µ: {total_proxies}")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProxyManager: {e}")

    try:
        logger.info("üì® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞...")
        from src.modules.impl.inviter import init_inviter_module
        await init_inviter_module()
        logger.info("‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞: {e}")

    # 5. –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    main_win = MainWindow()
    main_win.show()
    logger.info("üñ•Ô∏è  –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")

    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await asyncio.sleep(0.5)
    try:
        from gui.notifications import show_success
        show_success(
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ",
            "üöÄ desktop-Traffer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
            "üì® –ú–æ–¥—É–ª—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω\n"
            "üë• –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ desktop-Traffer –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")


def main():
    app = QApplication(sys.argv)
    qInstallMessageHandler(qt_message_handler)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
    style_file = Path("gui/style/light.qss")
    if style_file.exists():
        app.setStyleSheet(style_file.read_text(encoding="utf-8"))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π event loop
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–ª—á–∞–ª–∏–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    loop.set_exception_handler(completely_silent_exception_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    with loop:
        try:
            loop.run_until_complete(async_main())
            loop.run_forever()
        except KeyboardInterrupt:
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–æ–æ–±—â–µ
            pass
        finally:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–∏—Ö–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            try:
                pending = asyncio.all_tasks(loop)
                for task in pending:
                    task.cancel()

                if pending:
                    # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
                    try:
                        loop.run_until_complete(asyncio.wait(pending, timeout=0.1))
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ


if __name__ == "__main__":
    main()