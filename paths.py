# paths.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É—Ç–µ–π –¥–ª—è desktop Traffer
–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
"""

import os
import sys
from pathlib import Path
from loguru import logger
from typing import List, Dict

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É (–∏–ª–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å main.py)
if getattr(sys, 'frozen', False):
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ exe —Ñ–∞–π–ª
    BASE_PATH = Path(sys.executable).parent
else:
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ Python —Å–∫—Ä–∏–ø—Ç - –±–µ—Ä–µ–º –ø–∞–ø–∫—É –≥–¥–µ –ª–µ–∂–∏—Ç main.py
    # –ù–∞—Ö–æ–¥–∏–º main.py —á–µ—Ä–µ–∑ sys.argv[0] –∏–ª–∏ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if len(sys.argv) > 0 and sys.argv[0]:
        main_file = Path(sys.argv[0]).resolve()
        if main_file.name == '__main__.py':
            # –ó–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ python -m main
            BASE_PATH = Path.cwd()
        else:
            BASE_PATH = main_file.parent
    else:
        BASE_PATH = Path.cwd()

# --------------- –î–ª—è —Ä–∞–±–æ—Ç—ã, –¢—Ä–∞—Ñ—Ñ–µ—Ä ---------------
WORK_TRAFFER_FOLDER = BASE_PATH / "–î–ª—è —Ä–∞–±–æ—Ç—ã"
WORK_ACCOUNTS_TRAFFER_FOLDER = WORK_TRAFFER_FOLDER / "–ê–∫–∫–∞—É–Ω—Ç—ã"
DEAD_TRAFFER_FOLDER = WORK_TRAFFER_FOLDER / "–ú–µ—Ä—Ç–≤—ã–µ"
FROZEN_TRAFFER_FOLDER = WORK_TRAFFER_FOLDER / "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ"
INVALID_TRAFFER_FORMAT_FOLDER = WORK_TRAFFER_FOLDER / "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"

# --------------- –ò–Ω–≤–∞–π—Ç–µ—Ä --------------------------
WORK_INVITER_FOLDER = WORK_TRAFFER_FOLDER / "–ò–Ω–≤–∞–π—Ç"

# –£–°–¢–ê–†–ï–í–®–ê–Ø –ü–ê–ü–ö–ê - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
BOT_HOLDERS_FOLDER = WORK_INVITER_FOLDER / "–î–µ—Ä–∂–∞—Ç–µ–ª–∏_–±–æ—Ç–æ–≤"

# --------------- –ü—Ä–æ–¥–∞–∂–∏ ---------------
WORK_SALES_FOLDER = BASE_PATH / "–ü—Ä–æ–¥–∞–∂–∏"
DEAD_SALES_FOLDER = WORK_SALES_FOLDER / "–ú–µ—Ä—Ç–≤—ã–µ"
FROZEN_SALES_FOLDER = WORK_SALES_FOLDER / "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ"
INVALID_SALES_FORMAT_FOLDER = WORK_SALES_FOLDER / "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"

READY_FOR_SALE_FOLDER = WORK_SALES_FOLDER / "–ì–æ—Ç–æ–≤—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
MIDDLE_ACCOUNTS_FOLDER = WORK_SALES_FOLDER / "–°—Ä–µ–¥–Ω–∏–µ"

# –ü–æ–¥–ø–∞–ø–∫–∏ –≤ "–ì–æ—Ç–æ–≤—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
WORK_ACCOUNTS_SALE_FOLDER = WORK_SALES_FOLDER / "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
TDATA_FOLDER = READY_FOR_SALE_FOLDER / "–¢–¥–∞—Ç–∞"
SESSIONS_JSON_FOLDER = READY_FOR_SALE_FOLDER / "–°–µ—Å—Å–∏–∏+json"

# ----------------------------------------

# –§–∞–π–ª—ã
PROXY_FILE = BASE_PATH / "–ø—Ä–æ–∫—Å–∏.txt"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
ALL_FOLDERS = [
    WORK_TRAFFER_FOLDER,
    WORK_SALES_FOLDER,
    DEAD_TRAFFER_FOLDER,
    FROZEN_TRAFFER_FOLDER,
    INVALID_TRAFFER_FORMAT_FOLDER,
    DEAD_SALES_FOLDER,
    FROZEN_SALES_FOLDER,
    INVALID_SALES_FORMAT_FOLDER,
    READY_FOR_SALE_FOLDER,
    MIDDLE_ACCOUNTS_FOLDER,
    TDATA_FOLDER,
    SESSIONS_JSON_FOLDER,
    WORK_ACCOUNTS_SALE_FOLDER,
    WORK_ACCOUNTS_TRAFFER_FOLDER,
    WORK_INVITER_FOLDER,
    BOT_HOLDERS_FOLDER  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
]

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
ALL_FILES = [
    PROXY_FILE
]


def ensure_folder_structure():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        for folder in ALL_FOLDERS:
            folder.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for file in ALL_FILES:
            if not file.exists():
                file.touch()
    except PermissionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
        logger.error(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤: {BASE_PATH}")


def get_profile_folder(profile_name: str) -> Path:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
    """
    return WORK_INVITER_FOLDER / profile_name


def get_profile_admins_folder(profile_name: str) -> Path:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è ([–ü—Ä–æ—Ñ–∏–ª—å]/–ê–¥–º–∏–Ω—ã/)
    """
    profile_folder = get_profile_folder(profile_name)
    admins_folder = profile_folder / "–ê–¥–º–∏–Ω—ã"

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    admins_folder.mkdir(parents=True, exist_ok=True)

    return admins_folder


def get_profile_bot_token_file(profile_name: str) -> Path:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–æ–∫–µ–Ω–∞ ([–ü—Ä–æ—Ñ–∏–ª—å]/bot_token.txt)
    """
    profile_folder = get_profile_folder(profile_name)
    return profile_folder / "bot_token.txt"


def get_profile_reports_folder(profile_name: str) -> Path:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –æ—Ç—á–µ—Ç–æ–≤ ([–ü—Ä–æ—Ñ–∏–ª—å]/–û—Ç—á–µ—Ç—ã/)
    """
    profile_folder = get_profile_folder(profile_name)
    reports_folder = profile_folder / "–û—Ç—á–µ—Ç—ã"

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    reports_folder.mkdir(parents=True, exist_ok=True)

    return reports_folder


def ensure_profile_structure(profile_name: str):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        profile_folder = get_profile_folder(profile_name)

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        profile_folder.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
        admins_folder = get_profile_admins_folder(profile_name)
        reports_folder = get_profile_reports_folder(profile_name)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        files_to_create = [
            profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt",
            profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt",
            profile_folder / "config.json"
        ]

        for file_path in files_to_create:
            if not file_path.exists():
                file_path.touch()

        logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è {profile_name} –æ–±–µ—Å–ø–µ—á–µ–Ω–∞")
        logger.debug(f"   üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_folder}")
        logger.debug(f"   üëë –ü–∞–ø–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {admins_folder}")
        logger.debug(f"   üìä –ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {reports_folder}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")


def migrate_from_old_bot_holders():
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–î–µ—Ä–∂–∞—Ç–µ–ª–∏_–±–æ—Ç–æ–≤) –≤ –Ω–æ–≤—É—é
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞
        if not BOT_HOLDERS_FOLDER.exists():
            logger.info("üì¶ –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–µ
        session_files = list(BOT_HOLDERS_FOLDER.glob("*.session"))

        if not session_files:
            logger.info("üì¶ –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤ –ø—É—Å—Ç–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
            return

        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {len(session_files)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.warning("=" * 60)
        logger.warning("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ö –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–ï")
        logger.warning("=" * 60)
        logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(session_files)} –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–µ")
        logger.warning("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö")
        logger.warning("–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ '–î–µ—Ä–∂–∞—Ç–µ–ª–∏_–±–æ—Ç–æ–≤' –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        logger.warning("=" * 60)

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–µ—à–∏—Ç —á—Ç–æ —Å –Ω–∏–º–∏ –¥–µ–ª–∞—Ç—å

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def get_all_profile_names() -> List[str]:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–æ—Ñ–∏–ª–µ–π
    """
    try:
        if not WORK_INVITER_FOLDER.exists():
            return []

        profiles = []
        for item in WORK_INVITER_FOLDER.iterdir():
            if item.is_dir() and item.name != "–î–µ—Ä–∂–∞—Ç–µ–ª–∏_–±–æ—Ç–æ–≤":  # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å—Ç—å config.json)
                config_file = item / "config.json"
                if config_file.exists():
                    profiles.append(item.name)

        return profiles

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        return []


def validate_profile_structure(profile_name: str) -> Dict[str, any]:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    """
    try:
        errors = []
        warnings = []
        info = []

        profile_folder = get_profile_folder(profile_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
        if not profile_folder.exists():
            errors.append(f"–ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {profile_folder}")
            return {"errors": errors, "warnings": warnings, "info": info}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        required_files = [
            ("config.json", "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
            ("–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt", "–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            ("–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt", "–ë–∞–∑–∞ —á–∞—Ç–æ–≤")
        ]

        for filename, description in required_files:
            file_path = profile_folder / filename
            if not file_path.exists():
                warnings.append(f"{description} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {filename}")
            elif file_path.stat().st_size == 0:
                warnings.append(f"{description} –ø—É—Å—Ç–æ–π: {filename}")
            else:
                info.append(f"{description} –≤ –ø–æ—Ä—è–¥–∫–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–¥–º–∏–Ω–æ–≤
        admins_folder = get_profile_admins_folder(profile_name)
        admin_sessions = list(admins_folder.glob("*.session"))

        if admin_sessions:
            info.append(f"–ì–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(admin_sessions)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–Ω–æ—Å—Ç—å session/json —Ñ–∞–π–ª–æ–≤
            for session_file in admin_sessions:
                json_file = session_file.with_suffix(".json")
                if not json_file.exists():
                    warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç JSON –¥–ª—è –∞–¥–º–∏–Ω–∞: {session_file.stem}")
        else:
            warnings.append("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        token_file = get_profile_bot_token_file(profile_name)
        if token_file.exists() and token_file.stat().st_size > 0:
            info.append("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            warnings.append("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –æ—Ç—á–µ—Ç–æ–≤
        reports_folder = get_profile_reports_folder(profile_name)
        if reports_folder.exists():
            info.append("–ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")

        return {
            "errors": errors,
            "warnings": warnings,
            "info": info
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
        return {
            "errors": [f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"],
            "warnings": [],
            "info": []
        }


# –ù–û–í–´–ï –£–¢–ò–õ–ò–¢–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏

def get_main_admins_list(profile_name: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    """
    try:
        admins_folder = get_profile_admins_folder(profile_name)

        admins = []
        for session_file in admins_folder.glob("*.session"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π JSON
            json_file = session_file.with_suffix(".json")
            if json_file.exists():
                admins.append(session_file.stem)

        return admins

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è {profile_name}: {e}")
        return []


def is_main_admin(profile_name: str, account_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    """
    try:
        admins_folder = get_profile_admins_folder(profile_name)
        session_file = admins_folder / f"{account_name}.session"
        return session_file.exists()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
        return False


def load_bot_token(profile_name: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        str: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        token_file = get_profile_bot_token_file(profile_name)

        if token_file.exists():
            token = token_file.read_text(encoding='utf-8').strip()
            logger.debug(f"üìñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")
            return token

        logger.debug(f"üìÑ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")
        return ""

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {profile_name}: {e}")
        return ""


def save_bot_token(profile_name: str, token: str) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        ensure_profile_structure(profile_name)

        token_file = get_profile_bot_token_file(profile_name)
        token_file.write_text(token.strip(), encoding='utf-8')

        logger.info(f"üíæ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {profile_name}: {e}")
        return False


def move_account_to_main_admins(profile_name: str, account_name: str,
                                session_file: Path, json_file: Path) -> bool:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–∞–ø–∫—É –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        session_file: –ü—É—Ç—å –∫ session —Ñ–∞–π–ª—É
        json_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É

    Returns:
        bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –∞–¥–º–∏–Ω–æ–≤
        admins_folder = get_profile_admins_folder(profile_name)

        # –¶–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏
        session_dst = admins_folder / f"{account_name}.session"
        json_dst = admins_folder / f"{account_name}.json"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not session_file.exists() or not json_file.exists():
            logger.error(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
        import shutil
        shutil.move(str(session_file), str(session_dst))
        shutil.move(str(json_file), str(json_dst))

        logger.info(f"üëë –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –≥–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è {profile_name}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {account_name} –≤ –∞–¥–º–∏–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
        return False


def move_main_admin_to_traffic(profile_name: str, account_name: str) -> bool:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç—Ä–∞—Ñ–∏–∫

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏
        admins_folder = get_profile_admins_folder(profile_name)
        session_src = admins_folder / f"{account_name}.session"
        json_src = admins_folder / f"{account_name}.json"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not session_src.exists() or not json_src.exists():
            logger.error(f"‚ùå –§–∞–π–ª—ã –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

        # –¶–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏ –≤ —Ç—Ä–∞—Ñ–∏–∫–µ
        session_dst = WORK_ACCOUNTS_TRAFFER_FOLDER / f"{account_name}.session"
        json_dst = WORK_ACCOUNTS_TRAFFER_FOLDER / f"{account_name}.json"

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
        import shutil
        shutil.move(str(session_src), str(session_dst))
        shutil.move(str(json_src), str(json_dst))

        logger.info(f"üîÑ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {account_name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ç—Ä–∞—Ñ–∏–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ {account_name} –≤ —Ç—Ä–∞—Ñ–∏–∫: {e}")
        return False


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_profile_statistics(profile_name: str) -> Dict[str, any]:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è

    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        profile_folder = get_profile_folder(profile_name)

        if not profile_folder.exists():
            return {"error": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        stats = {
            "profile_name": profile_name,
            "main_admins_count": 0,
            "has_bot_token": False,
            "users_count": 0,
            "chats_count": 0,
            "reports_count": 0
        }

        # –°—á–∏—Ç–∞–µ–º –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        admins_folder = get_profile_admins_folder(profile_name)
        admin_sessions = list(admins_folder.glob("*.session"))
        stats["main_admins_count"] = len(admin_sessions)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        token_file = get_profile_bot_token_file(profile_name)
        stats["has_bot_token"] = token_file.exists() and token_file.stat().st_size > 0

        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_file = profile_folder / "–ë–∞–∑–∞ —é–∑–µ—Ä–æ–≤.txt"
        if users_file.exists():
            users_content = users_file.read_text(encoding='utf-8')
            users_lines = [line.strip() for line in users_content.split('\n') if line.strip()]
            stats["users_count"] = len(users_lines)

        # –°—á–∏—Ç–∞–µ–º —á–∞—Ç—ã
        chats_file = profile_folder / "–ë–∞–∑–∞ —á–∞—Ç–æ–≤.txt"
        if chats_file.exists():
            chats_content = chats_file.read_text(encoding='utf-8')
            chats_lines = [line.strip() for line in chats_content.split('\n') if line.strip()]
            stats["chats_count"] = len(chats_lines)

        # –°—á–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç—ã
        reports_folder = get_profile_reports_folder(profile_name)
        if reports_folder.exists():
            report_files = list(reports_folder.glob("*.txt")) + list(reports_folder.glob("*.json"))
            stats["reports_count"] = len(report_files)

        return stats

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {e}")
        return {"error": str(e)}